
tdse-tp2_02-model_integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  080040e0  080040e0  000050e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004570  08004570  00006098  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004570  08004570  00005570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004578  08004578  00006098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004578  08004578  00005578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800457c  0800457c  0000557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000098  20000000  08004580  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000098  08004618  00006098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08004618  0000639c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000835d  00000000  00000000  000060c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5e  00000000  00000000  0000e41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  00010280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056f  00000000  00000000  000109d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185ae  00000000  00000000  00010f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbc4  00000000  00000000  000294ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835f6  00000000  00000000  000350b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b86a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000b86ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000bae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000098 	.word	0x20000098
 8000128:	00000000 	.word	0x00000000
 800012c:	080040c8 	.word	0x080040c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000009c 	.word	0x2000009c
 8000148:	080040c8 	.word	0x080040c8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  #if (1 == LOGGER_CONFIG_USE_SEMIHOSTING)

  initialise_monitor_handles();
 8000160:	f002 fdfc 	bl	8002d5c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 f9f2 	bl	800054c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Application Init */
  app_init();
 8000174:	f001 fa24 	bl	80015c0 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    /* Application Update */
    app_update();
 8000178:	f001 fb9c 	bl	80018b4 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 f86c 	bl	800326a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd10 	bl	8000be4 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8b1 	bl	8000330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 ff7d 	bl	80010e8 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f89c 	bl	8000330 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f8e4 	bl	8001404 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f875 	bl	8000330 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000b4 	.word	0x200000b4
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <MX_GPIO_Init+0xcc>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a2c      	ldr	r2, [pc, #176]	@ (8000320 <MX_GPIO_Init+0xcc>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <MX_GPIO_Init+0xcc>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b27      	ldr	r3, [pc, #156]	@ (8000320 <MX_GPIO_Init+0xcc>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a26      	ldr	r2, [pc, #152]	@ (8000320 <MX_GPIO_Init+0xcc>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b24      	ldr	r3, [pc, #144]	@ (8000320 <MX_GPIO_Init+0xcc>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <MX_GPIO_Init+0xcc>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a20      	ldr	r2, [pc, #128]	@ (8000320 <MX_GPIO_Init+0xcc>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000320 <MX_GPIO_Init+0xcc>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <MX_GPIO_Init+0xcc>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000320 <MX_GPIO_Init+0xcc>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <MX_GPIO_Init+0xcc>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	2120      	movs	r1, #32
 80002cc:	4815      	ldr	r0, [pc, #84]	@ (8000324 <MX_GPIO_Init+0xd0>)
 80002ce:	f000 fc4e 	bl	8000b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002d8:	4b13      	ldr	r3, [pc, #76]	@ (8000328 <MX_GPIO_Init+0xd4>)
 80002da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002dc:	2300      	movs	r3, #0
 80002de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002e0:	f107 0310 	add.w	r3, r7, #16
 80002e4:	4619      	mov	r1, r3
 80002e6:	4811      	ldr	r0, [pc, #68]	@ (800032c <MX_GPIO_Init+0xd8>)
 80002e8:	f000 faa6 	bl	8000838 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002ec:	2320      	movs	r3, #32
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f0:	2301      	movs	r3, #1
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f8:	2302      	movs	r3, #2
 80002fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002fc:	f107 0310 	add.w	r3, r7, #16
 8000300:	4619      	mov	r1, r3
 8000302:	4808      	ldr	r0, [pc, #32]	@ (8000324 <MX_GPIO_Init+0xd0>)
 8000304:	f000 fa98 	bl	8000838 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000308:	2200      	movs	r2, #0
 800030a:	2100      	movs	r1, #0
 800030c:	2028      	movs	r0, #40	@ 0x28
 800030e:	f000 fa56 	bl	80007be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000312:	2028      	movs	r0, #40	@ 0x28
 8000314:	f000 fa6f 	bl	80007f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000318:	bf00      	nop
 800031a:	3720      	adds	r7, #32
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40021000 	.word	0x40021000
 8000324:	40010800 	.word	0x40010800
 8000328:	10110000 	.word	0x10110000
 800032c:	40011000 	.word	0x40011000

08000330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000334:	b672      	cpsid	i
}
 8000336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000338:	bf00      	nop
 800033a:	e7fd      	b.n	8000338 <Error_Handler+0x8>

0800033c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <HAL_MspInit+0x5c>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a14      	ldr	r2, [pc, #80]	@ (8000398 <HAL_MspInit+0x5c>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <HAL_MspInit+0x5c>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <HAL_MspInit+0x5c>)
 800035c:	69db      	ldr	r3, [r3, #28]
 800035e:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <HAL_MspInit+0x5c>)
 8000360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000364:	61d3      	str	r3, [r2, #28]
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <HAL_MspInit+0x5c>)
 8000368:	69db      	ldr	r3, [r3, #28]
 800036a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800036e:	607b      	str	r3, [r7, #4]
 8000370:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_MspInit+0x60>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800037e:	60fb      	str	r3, [r7, #12]
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	4a04      	ldr	r2, [pc, #16]	@ (800039c <HAL_MspInit+0x60>)
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr
 8000398:	40021000 	.word	0x40021000
 800039c:	40010000 	.word	0x40010000

080003a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b088      	sub	sp, #32
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a8:	f107 0310 	add.w	r3, r7, #16
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a15      	ldr	r2, [pc, #84]	@ (8000410 <HAL_UART_MspInit+0x70>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d123      	bne.n	8000408 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80003c0:	4b14      	ldr	r3, [pc, #80]	@ (8000414 <HAL_UART_MspInit+0x74>)
 80003c2:	69db      	ldr	r3, [r3, #28]
 80003c4:	4a13      	ldr	r2, [pc, #76]	@ (8000414 <HAL_UART_MspInit+0x74>)
 80003c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ca:	61d3      	str	r3, [r2, #28]
 80003cc:	4b11      	ldr	r3, [pc, #68]	@ (8000414 <HAL_UART_MspInit+0x74>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <HAL_UART_MspInit+0x74>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <HAL_UART_MspInit+0x74>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <HAL_UART_MspInit+0x74>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0304 	and.w	r3, r3, #4
 80003ec:	60bb      	str	r3, [r7, #8]
 80003ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80003f0:	230c      	movs	r3, #12
 80003f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003f4:	2302      	movs	r3, #2
 80003f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f8:	2302      	movs	r3, #2
 80003fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fc:	f107 0310 	add.w	r3, r7, #16
 8000400:	4619      	mov	r1, r3
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <HAL_UART_MspInit+0x78>)
 8000404:	f000 fa18 	bl	8000838 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000408:	bf00      	nop
 800040a:	3720      	adds	r7, #32
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	40004400 	.word	0x40004400
 8000414:	40021000 	.word	0x40021000
 8000418:	40010800 	.word	0x40010800

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <NMI_Handler+0x4>

08000424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <BusFault_Handler+0x4>

0800043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <UsageFault_Handler+0x4>

08000444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	bc80      	pop	{r7}
 800044e:	4770      	bx	lr

08000450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000454:	bf00      	nop
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr

08000468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800046c:	f000 f8b4 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  	HAL_SYSTICK_IRQHandler();
 8000470:	f000 f9db 	bl	800082a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}

08000478 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800047c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000480:	f000 fb8e 	bl	8000ba0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000484:	bf00      	nop
 8000486:	bd80      	pop	{r7, pc}

08000488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000490:	4a14      	ldr	r2, [pc, #80]	@ (80004e4 <_sbrk+0x5c>)
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <_sbrk+0x60>)
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <_sbrk+0x64>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d102      	bne.n	80004aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <_sbrk+0x64>)
 80004a6:	4a12      	ldr	r2, [pc, #72]	@ (80004f0 <_sbrk+0x68>)
 80004a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	693a      	ldr	r2, [r7, #16]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d207      	bcs.n	80004c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b8:	f002 ff26 	bl	8003308 <__errno>
 80004bc:	4603      	mov	r3, r0
 80004be:	220c      	movs	r2, #12
 80004c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	e009      	b.n	80004dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	4a05      	ldr	r2, [pc, #20]	@ (80004ec <_sbrk+0x64>)
 80004d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20005000 	.word	0x20005000
 80004e8:	00000400 	.word	0x00000400
 80004ec:	200000fc 	.word	0x200000fc
 80004f0:	200003a0 	.word	0x200003a0

080004f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000500:	f7ff fff8 	bl	80004f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000504:	480b      	ldr	r0, [pc, #44]	@ (8000534 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000506:	490c      	ldr	r1, [pc, #48]	@ (8000538 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000508:	4a0c      	ldr	r2, [pc, #48]	@ (800053c <LoopFillZerobss+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800050c:	e002      	b.n	8000514 <LoopCopyDataInit>

0800050e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800050e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000510:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000512:	3304      	adds	r3, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000514:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000516:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000518:	d3f9      	bcc.n	800050e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800051a:	4a09      	ldr	r2, [pc, #36]	@ (8000540 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800051c:	4c09      	ldr	r4, [pc, #36]	@ (8000544 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000520:	e001      	b.n	8000526 <LoopFillZerobss>

08000522 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000522:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000524:	3204      	adds	r2, #4

08000526 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000526:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000528:	d3fb      	bcc.n	8000522 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800052a:	f002 fef3 	bl	8003314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800052e:	f7ff fe15 	bl	800015c <main>
  bx lr
 8000532:	4770      	bx	lr
  ldr r0, =_sdata
 8000534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000538:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800053c:	08004580 	.word	0x08004580
  ldr r2, =_sbss
 8000540:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000544:	2000039c 	.word	0x2000039c

08000548 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000548:	e7fe      	b.n	8000548 <ADC1_2_IRQHandler>
	...

0800054c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <HAL_Init+0x28>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a07      	ldr	r2, [pc, #28]	@ (8000574 <HAL_Init+0x28>)
 8000556:	f043 0310 	orr.w	r3, r3, #16
 800055a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800055c:	2003      	movs	r0, #3
 800055e:	f000 f923 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000562:	200f      	movs	r0, #15
 8000564:	f000 f808 	bl	8000578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000568:	f7ff fee8 	bl	800033c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800056c:	2300      	movs	r3, #0
}
 800056e:	4618      	mov	r0, r3
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40022000 	.word	0x40022000

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000580:	4b12      	ldr	r3, [pc, #72]	@ (80005cc <HAL_InitTick+0x54>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_InitTick+0x58>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4619      	mov	r1, r3
 800058a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800058e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000592:	fbb2 f3f3 	udiv	r3, r2, r3
 8000596:	4618      	mov	r0, r3
 8000598:	f000 f93b 	bl	8000812 <HAL_SYSTICK_Config>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
 80005a4:	e00e      	b.n	80005c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	d80a      	bhi.n	80005c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ac:	2200      	movs	r2, #0
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	f000 f903 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005b8:	4a06      	ldr	r2, [pc, #24]	@ (80005d4 <HAL_InitTick+0x5c>)
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000000 	.word	0x20000000
 80005d0:	20000008 	.word	0x20000008
 80005d4:	20000004 	.word	0x20000004

080005d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <HAL_IncTick+0x1c>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b05      	ldr	r3, [pc, #20]	@ (80005f8 <HAL_IncTick+0x20>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a03      	ldr	r2, [pc, #12]	@ (80005f8 <HAL_IncTick+0x20>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	20000008 	.word	0x20000008
 80005f8:	20000100 	.word	0x20000100

080005fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000600:	4b02      	ldr	r3, [pc, #8]	@ (800060c <HAL_GetTick+0x10>)
 8000602:	681b      	ldr	r3, [r3, #0]
}
 8000604:	4618      	mov	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	20000100 	.word	0x20000100

08000610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f003 0307 	and.w	r3, r3, #7
 800061e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000622:	68db      	ldr	r3, [r3, #12]
 8000624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800062c:	4013      	ands	r3, r2
 800062e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000638:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800063c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000642:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <__NVIC_SetPriorityGrouping+0x44>)
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	60d3      	str	r3, [r2, #12]
}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800065c:	4b04      	ldr	r3, [pc, #16]	@ (8000670 <__NVIC_GetPriorityGrouping+0x18>)
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	0a1b      	lsrs	r3, r3, #8
 8000662:	f003 0307 	and.w	r3, r3, #7
}
 8000666:	4618      	mov	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	2b00      	cmp	r3, #0
 8000684:	db0b      	blt.n	800069e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 021f 	and.w	r2, r3, #31
 800068c:	4906      	ldr	r1, [pc, #24]	@ (80006a8 <__NVIC_EnableIRQ+0x34>)
 800068e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000692:	095b      	lsrs	r3, r3, #5
 8000694:	2001      	movs	r0, #1
 8000696:	fa00 f202 	lsl.w	r2, r0, r2
 800069a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	@ (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	@ (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	@ 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	@ 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff90 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	@ (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff2d 	bl	8000610 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff42 	bl	8000658 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff90 	bl	8000700 <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5f 	bl	80006ac <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff35 	bl	8000674 <__NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffa2 	bl	8000764 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800082e:	f001 f8c3 	bl	80019b8 <HAL_SYSTICK_Callback>
}
 8000832:	bf00      	nop
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b480      	push	{r7}
 800083a:	b08b      	sub	sp, #44	@ 0x2c
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000846:	2300      	movs	r3, #0
 8000848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800084a:	e169      	b.n	8000b20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800084c:	2201      	movs	r2, #1
 800084e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000850:	fa02 f303 	lsl.w	r3, r2, r3
 8000854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	69fa      	ldr	r2, [r7, #28]
 800085c:	4013      	ands	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000860:	69ba      	ldr	r2, [r7, #24]
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	429a      	cmp	r2, r3
 8000866:	f040 8158 	bne.w	8000b1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ad8 <HAL_GPIO_Init+0x2a0>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d05e      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000874:	4a98      	ldr	r2, [pc, #608]	@ (8000ad8 <HAL_GPIO_Init+0x2a0>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d875      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800087a:	4a98      	ldr	r2, [pc, #608]	@ (8000adc <HAL_GPIO_Init+0x2a4>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d058      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000880:	4a96      	ldr	r2, [pc, #600]	@ (8000adc <HAL_GPIO_Init+0x2a4>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d86f      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000886:	4a96      	ldr	r2, [pc, #600]	@ (8000ae0 <HAL_GPIO_Init+0x2a8>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d052      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 800088c:	4a94      	ldr	r2, [pc, #592]	@ (8000ae0 <HAL_GPIO_Init+0x2a8>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d869      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 8000892:	4a94      	ldr	r2, [pc, #592]	@ (8000ae4 <HAL_GPIO_Init+0x2ac>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d04c      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 8000898:	4a92      	ldr	r2, [pc, #584]	@ (8000ae4 <HAL_GPIO_Init+0x2ac>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d863      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 800089e:	4a92      	ldr	r2, [pc, #584]	@ (8000ae8 <HAL_GPIO_Init+0x2b0>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d046      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
 80008a4:	4a90      	ldr	r2, [pc, #576]	@ (8000ae8 <HAL_GPIO_Init+0x2b0>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d85d      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008aa:	2b12      	cmp	r3, #18
 80008ac:	d82a      	bhi.n	8000904 <HAL_GPIO_Init+0xcc>
 80008ae:	2b12      	cmp	r3, #18
 80008b0:	d859      	bhi.n	8000966 <HAL_GPIO_Init+0x12e>
 80008b2:	a201      	add	r2, pc, #4	@ (adr r2, 80008b8 <HAL_GPIO_Init+0x80>)
 80008b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b8:	08000933 	.word	0x08000933
 80008bc:	0800090d 	.word	0x0800090d
 80008c0:	0800091f 	.word	0x0800091f
 80008c4:	08000961 	.word	0x08000961
 80008c8:	08000967 	.word	0x08000967
 80008cc:	08000967 	.word	0x08000967
 80008d0:	08000967 	.word	0x08000967
 80008d4:	08000967 	.word	0x08000967
 80008d8:	08000967 	.word	0x08000967
 80008dc:	08000967 	.word	0x08000967
 80008e0:	08000967 	.word	0x08000967
 80008e4:	08000967 	.word	0x08000967
 80008e8:	08000967 	.word	0x08000967
 80008ec:	08000967 	.word	0x08000967
 80008f0:	08000967 	.word	0x08000967
 80008f4:	08000967 	.word	0x08000967
 80008f8:	08000967 	.word	0x08000967
 80008fc:	08000915 	.word	0x08000915
 8000900:	08000929 	.word	0x08000929
 8000904:	4a79      	ldr	r2, [pc, #484]	@ (8000aec <HAL_GPIO_Init+0x2b4>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d013      	beq.n	8000932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800090a:	e02c      	b.n	8000966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	623b      	str	r3, [r7, #32]
          break;
 8000912:	e029      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	68db      	ldr	r3, [r3, #12]
 8000918:	3304      	adds	r3, #4
 800091a:	623b      	str	r3, [r7, #32]
          break;
 800091c:	e024      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	3308      	adds	r3, #8
 8000924:	623b      	str	r3, [r7, #32]
          break;
 8000926:	e01f      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	330c      	adds	r3, #12
 800092e:	623b      	str	r3, [r7, #32]
          break;
 8000930:	e01a      	b.n	8000968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d102      	bne.n	8000940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800093a:	2304      	movs	r3, #4
 800093c:	623b      	str	r3, [r7, #32]
          break;
 800093e:	e013      	b.n	8000968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	689b      	ldr	r3, [r3, #8]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d105      	bne.n	8000954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000948:	2308      	movs	r3, #8
 800094a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	611a      	str	r2, [r3, #16]
          break;
 8000952:	e009      	b.n	8000968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000954:	2308      	movs	r3, #8
 8000956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69fa      	ldr	r2, [r7, #28]
 800095c:	615a      	str	r2, [r3, #20]
          break;
 800095e:	e003      	b.n	8000968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000960:	2300      	movs	r3, #0
 8000962:	623b      	str	r3, [r7, #32]
          break;
 8000964:	e000      	b.n	8000968 <HAL_GPIO_Init+0x130>
          break;
 8000966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	2bff      	cmp	r3, #255	@ 0xff
 800096c:	d801      	bhi.n	8000972 <HAL_GPIO_Init+0x13a>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	e001      	b.n	8000976 <HAL_GPIO_Init+0x13e>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3304      	adds	r3, #4
 8000976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000978:	69bb      	ldr	r3, [r7, #24]
 800097a:	2bff      	cmp	r3, #255	@ 0xff
 800097c:	d802      	bhi.n	8000984 <HAL_GPIO_Init+0x14c>
 800097e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	e002      	b.n	800098a <HAL_GPIO_Init+0x152>
 8000984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000986:	3b08      	subs	r3, #8
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	210f      	movs	r1, #15
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	fa01 f303 	lsl.w	r3, r1, r3
 8000998:	43db      	mvns	r3, r3
 800099a:	401a      	ands	r2, r3
 800099c:	6a39      	ldr	r1, [r7, #32]
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	fa01 f303 	lsl.w	r3, r1, r3
 80009a4:	431a      	orrs	r2, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f000 80b1 	beq.w	8000b1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009b8:	4b4d      	ldr	r3, [pc, #308]	@ (8000af0 <HAL_GPIO_Init+0x2b8>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	4a4c      	ldr	r2, [pc, #304]	@ (8000af0 <HAL_GPIO_Init+0x2b8>)
 80009be:	f043 0301 	orr.w	r3, r3, #1
 80009c2:	6193      	str	r3, [r2, #24]
 80009c4:	4b4a      	ldr	r3, [pc, #296]	@ (8000af0 <HAL_GPIO_Init+0x2b8>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009d0:	4a48      	ldr	r2, [pc, #288]	@ (8000af4 <HAL_GPIO_Init+0x2bc>)
 80009d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d4:	089b      	lsrs	r3, r3, #2
 80009d6:	3302      	adds	r3, #2
 80009d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e0:	f003 0303 	and.w	r3, r3, #3
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4013      	ands	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a40      	ldr	r2, [pc, #256]	@ (8000af8 <HAL_GPIO_Init+0x2c0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d013      	beq.n	8000a24 <HAL_GPIO_Init+0x1ec>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a3f      	ldr	r2, [pc, #252]	@ (8000afc <HAL_GPIO_Init+0x2c4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d00d      	beq.n	8000a20 <HAL_GPIO_Init+0x1e8>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a3e      	ldr	r2, [pc, #248]	@ (8000b00 <HAL_GPIO_Init+0x2c8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x1e4>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b04 <HAL_GPIO_Init+0x2cc>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_GPIO_Init+0x1e0>
 8000a14:	2303      	movs	r3, #3
 8000a16:	e006      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a18:	2304      	movs	r3, #4
 8000a1a:	e004      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	e002      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a20:	2301      	movs	r3, #1
 8000a22:	e000      	b.n	8000a26 <HAL_GPIO_Init+0x1ee>
 8000a24:	2300      	movs	r3, #0
 8000a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000a28:	f002 0203 	and.w	r2, r2, #3
 8000a2c:	0092      	lsls	r2, r2, #2
 8000a2e:	4093      	lsls	r3, r2
 8000a30:	68fa      	ldr	r2, [r7, #12]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a36:	492f      	ldr	r1, [pc, #188]	@ (8000af4 <HAL_GPIO_Init+0x2bc>)
 8000a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3a:	089b      	lsrs	r3, r3, #2
 8000a3c:	3302      	adds	r3, #2
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d006      	beq.n	8000a5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a50:	4b2d      	ldr	r3, [pc, #180]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	492c      	ldr	r1, [pc, #176]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a56:	69bb      	ldr	r3, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	608b      	str	r3, [r1, #8]
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	43db      	mvns	r3, r3
 8000a66:	4928      	ldr	r1, [pc, #160]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d006      	beq.n	8000a86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a78:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	4922      	ldr	r1, [pc, #136]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	60cb      	str	r3, [r1, #12]
 8000a84:	e006      	b.n	8000a94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a86:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	491e      	ldr	r1, [pc, #120]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d006      	beq.n	8000aae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000aa0:	4b19      	ldr	r3, [pc, #100]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	685a      	ldr	r2, [r3, #4]
 8000aa4:	4918      	ldr	r1, [pc, #96]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	604b      	str	r3, [r1, #4]
 8000aac:	e006      	b.n	8000abc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aae:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	4914      	ldr	r1, [pc, #80]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000ab8:	4013      	ands	r3, r2
 8000aba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d021      	beq.n	8000b0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	490e      	ldr	r1, [pc, #56]	@ (8000b08 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	600b      	str	r3, [r1, #0]
 8000ad4:	e021      	b.n	8000b1a <HAL_GPIO_Init+0x2e2>
 8000ad6:	bf00      	nop
 8000ad8:	10320000 	.word	0x10320000
 8000adc:	10310000 	.word	0x10310000
 8000ae0:	10220000 	.word	0x10220000
 8000ae4:	10210000 	.word	0x10210000
 8000ae8:	10120000 	.word	0x10120000
 8000aec:	10110000 	.word	0x10110000
 8000af0:	40021000 	.word	0x40021000
 8000af4:	40010000 	.word	0x40010000
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40010c00 	.word	0x40010c00
 8000b00:	40011000 	.word	0x40011000
 8000b04:	40011400 	.word	0x40011400
 8000b08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <HAL_GPIO_Init+0x304>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	4909      	ldr	r1, [pc, #36]	@ (8000b3c <HAL_GPIO_Init+0x304>)
 8000b16:	4013      	ands	r3, r2
 8000b18:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b26:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	f47f ae8e 	bne.w	800084c <HAL_GPIO_Init+0x14>
  }
}
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	372c      	adds	r7, #44	@ 0x2c
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40010400 	.word	0x40010400

08000b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689a      	ldr	r2, [r3, #8]
 8000b50:	887b      	ldrh	r3, [r7, #2]
 8000b52:	4013      	ands	r3, r2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	73fb      	strb	r3, [r7, #15]
 8000b5c:	e001      	b.n	8000b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	460b      	mov	r3, r1
 8000b78:	807b      	strh	r3, [r7, #2]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b7e:	787b      	ldrb	r3, [r7, #1]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b84:	887a      	ldrh	r2, [r7, #2]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b8a:	e003      	b.n	8000b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	041a      	lsls	r2, r3, #16
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	611a      	str	r2, [r3, #16]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
	...

08000ba0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000baa:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bac:	695a      	ldr	r2, [r3, #20]
 8000bae:	88fb      	ldrh	r3, [r7, #6]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d006      	beq.n	8000bc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bb8:	88fb      	ldrh	r3, [r7, #6]
 8000bba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f806 	bl	8000bd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40010400 	.word	0x40010400

08000bd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e272      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 8087 	beq.w	8000d12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c04:	4b92      	ldr	r3, [pc, #584]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 030c 	and.w	r3, r3, #12
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d00c      	beq.n	8000c2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c10:	4b8f      	ldr	r3, [pc, #572]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f003 030c 	and.w	r3, r3, #12
 8000c18:	2b08      	cmp	r3, #8
 8000c1a:	d112      	bne.n	8000c42 <HAL_RCC_OscConfig+0x5e>
 8000c1c:	4b8c      	ldr	r3, [pc, #560]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c28:	d10b      	bne.n	8000c42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c2a:	4b89      	ldr	r3, [pc, #548]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d06c      	beq.n	8000d10 <HAL_RCC_OscConfig+0x12c>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d168      	bne.n	8000d10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e24c      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c4a:	d106      	bne.n	8000c5a <HAL_RCC_OscConfig+0x76>
 8000c4c:	4b80      	ldr	r3, [pc, #512]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a7f      	ldr	r2, [pc, #508]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c56:	6013      	str	r3, [r2, #0]
 8000c58:	e02e      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd4>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d10c      	bne.n	8000c7c <HAL_RCC_OscConfig+0x98>
 8000c62:	4b7b      	ldr	r3, [pc, #492]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a7a      	ldr	r2, [pc, #488]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	4b78      	ldr	r3, [pc, #480]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a77      	ldr	r2, [pc, #476]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c78:	6013      	str	r3, [r2, #0]
 8000c7a:	e01d      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd4>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000c84:	d10c      	bne.n	8000ca0 <HAL_RCC_OscConfig+0xbc>
 8000c86:	4b72      	ldr	r3, [pc, #456]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a71      	ldr	r2, [pc, #452]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	4b6f      	ldr	r3, [pc, #444]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a6e      	ldr	r2, [pc, #440]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e00b      	b.n	8000cb8 <HAL_RCC_OscConfig+0xd4>
 8000ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000caa:	6013      	str	r3, [r2, #0]
 8000cac:	4b68      	ldr	r3, [pc, #416]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a67      	ldr	r2, [pc, #412]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000cb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cb6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d013      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc0:	f7ff fc9c 	bl	80005fc <HAL_GetTick>
 8000cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cc6:	e008      	b.n	8000cda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cc8:	f7ff fc98 	bl	80005fc <HAL_GetTick>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	2b64      	cmp	r3, #100	@ 0x64
 8000cd4:	d901      	bls.n	8000cda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cd6:	2303      	movs	r3, #3
 8000cd8:	e200      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cda:	4b5d      	ldr	r3, [pc, #372]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f0      	beq.n	8000cc8 <HAL_RCC_OscConfig+0xe4>
 8000ce6:	e014      	b.n	8000d12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fc88 	bl	80005fc <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cee:	e008      	b.n	8000d02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fc84 	bl	80005fc <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	2b64      	cmp	r3, #100	@ 0x64
 8000cfc:	d901      	bls.n	8000d02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	e1ec      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d02:	4b53      	ldr	r3, [pc, #332]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d1f0      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x10c>
 8000d0e:	e000      	b.n	8000d12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d063      	beq.n	8000de6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d1e:	4b4c      	ldr	r3, [pc, #304]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 030c 	and.w	r3, r3, #12
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d00b      	beq.n	8000d42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d2a:	4b49      	ldr	r3, [pc, #292]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d11c      	bne.n	8000d70 <HAL_RCC_OscConfig+0x18c>
 8000d36:	4b46      	ldr	r3, [pc, #280]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d116      	bne.n	8000d70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d42:	4b43      	ldr	r3, [pc, #268]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d005      	beq.n	8000d5a <HAL_RCC_OscConfig+0x176>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	691b      	ldr	r3, [r3, #16]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d001      	beq.n	8000d5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e1c0      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	695b      	ldr	r3, [r3, #20]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	4939      	ldr	r1, [pc, #228]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6e:	e03a      	b.n	8000de6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	691b      	ldr	r3, [r3, #16]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d020      	beq.n	8000dba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d78:	4b36      	ldr	r3, [pc, #216]	@ (8000e54 <HAL_RCC_OscConfig+0x270>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fc3d 	bl	80005fc <HAL_GetTick>
 8000d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d84:	e008      	b.n	8000d98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d86:	f7ff fc39 	bl	80005fc <HAL_GetTick>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	1ad3      	subs	r3, r2, r3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d901      	bls.n	8000d98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d94:	2303      	movs	r3, #3
 8000d96:	e1a1      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d98:	4b2d      	ldr	r3, [pc, #180]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0f0      	beq.n	8000d86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	4b2a      	ldr	r3, [pc, #168]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4927      	ldr	r1, [pc, #156]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	600b      	str	r3, [r1, #0]
 8000db8:	e015      	b.n	8000de6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dba:	4b26      	ldr	r3, [pc, #152]	@ (8000e54 <HAL_RCC_OscConfig+0x270>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc1c 	bl	80005fc <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fc18 	bl	80005fc <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e180      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dda:	4b1d      	ldr	r3, [pc, #116]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f0      	bne.n	8000dc8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d03a      	beq.n	8000e68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	699b      	ldr	r3, [r3, #24]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d019      	beq.n	8000e2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dfa:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <HAL_RCC_OscConfig+0x274>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e00:	f7ff fbfc 	bl	80005fc <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e08:	f7ff fbf8 	bl	80005fc <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e160      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e50 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d0f0      	beq.n	8000e08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 face 	bl	80013c8 <RCC_Delay>
 8000e2c:	e01c      	b.n	8000e68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_RCC_OscConfig+0x274>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e34:	f7ff fbe2 	bl	80005fc <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3a:	e00f      	b.n	8000e5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fbde 	bl	80005fc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d908      	bls.n	8000e5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e146      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000
 8000e54:	42420000 	.word	0x42420000
 8000e58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e5c:	4b92      	ldr	r3, [pc, #584]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e60:	f003 0302 	and.w	r3, r3, #2
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1e9      	bne.n	8000e3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f003 0304 	and.w	r3, r3, #4
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f000 80a6 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e76:	2300      	movs	r3, #0
 8000e78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	69db      	ldr	r3, [r3, #28]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10d      	bne.n	8000ea2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b88      	ldr	r3, [pc, #544]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a87      	ldr	r2, [pc, #540]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	61d3      	str	r3, [r2, #28]
 8000e92:	4b85      	ldr	r3, [pc, #532]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000e94:	69db      	ldr	r3, [r3, #28]
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	60bb      	str	r3, [r7, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea2:	4b82      	ldr	r3, [pc, #520]	@ (80010ac <HAL_RCC_OscConfig+0x4c8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d118      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eae:	4b7f      	ldr	r3, [pc, #508]	@ (80010ac <HAL_RCC_OscConfig+0x4c8>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7e      	ldr	r2, [pc, #504]	@ (80010ac <HAL_RCC_OscConfig+0x4c8>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000eba:	f7ff fb9f 	bl	80005fc <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec0:	e008      	b.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ec2:	f7ff fb9b 	bl	80005fc <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	2b64      	cmp	r3, #100	@ 0x64
 8000ece:	d901      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	e103      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed4:	4b75      	ldr	r3, [pc, #468]	@ (80010ac <HAL_RCC_OscConfig+0x4c8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f0      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d106      	bne.n	8000ef6 <HAL_RCC_OscConfig+0x312>
 8000ee8:	4b6f      	ldr	r3, [pc, #444]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	4a6e      	ldr	r2, [pc, #440]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	6213      	str	r3, [r2, #32]
 8000ef4:	e02d      	b.n	8000f52 <HAL_RCC_OscConfig+0x36e>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d10c      	bne.n	8000f18 <HAL_RCC_OscConfig+0x334>
 8000efe:	4b6a      	ldr	r3, [pc, #424]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f00:	6a1b      	ldr	r3, [r3, #32]
 8000f02:	4a69      	ldr	r2, [pc, #420]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f04:	f023 0301 	bic.w	r3, r3, #1
 8000f08:	6213      	str	r3, [r2, #32]
 8000f0a:	4b67      	ldr	r3, [pc, #412]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	4a66      	ldr	r2, [pc, #408]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f10:	f023 0304 	bic.w	r3, r3, #4
 8000f14:	6213      	str	r3, [r2, #32]
 8000f16:	e01c      	b.n	8000f52 <HAL_RCC_OscConfig+0x36e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b05      	cmp	r3, #5
 8000f1e:	d10c      	bne.n	8000f3a <HAL_RCC_OscConfig+0x356>
 8000f20:	4b61      	ldr	r3, [pc, #388]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f22:	6a1b      	ldr	r3, [r3, #32]
 8000f24:	4a60      	ldr	r2, [pc, #384]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6213      	str	r3, [r2, #32]
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f2e:	6a1b      	ldr	r3, [r3, #32]
 8000f30:	4a5d      	ldr	r2, [pc, #372]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6213      	str	r3, [r2, #32]
 8000f38:	e00b      	b.n	8000f52 <HAL_RCC_OscConfig+0x36e>
 8000f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4a5a      	ldr	r2, [pc, #360]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f40:	f023 0301 	bic.w	r3, r3, #1
 8000f44:	6213      	str	r3, [r2, #32]
 8000f46:	4b58      	ldr	r3, [pc, #352]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a57      	ldr	r2, [pc, #348]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	f023 0304 	bic.w	r3, r3, #4
 8000f50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d015      	beq.n	8000f86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f5a:	f7ff fb4f 	bl	80005fc <HAL_GetTick>
 8000f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f60:	e00a      	b.n	8000f78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f62:	f7ff fb4b 	bl	80005fc <HAL_GetTick>
 8000f66:	4602      	mov	r2, r0
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	1ad3      	subs	r3, r2, r3
 8000f6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e0b1      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f78:	4b4b      	ldr	r3, [pc, #300]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d0ee      	beq.n	8000f62 <HAL_RCC_OscConfig+0x37e>
 8000f84:	e014      	b.n	8000fb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f86:	f7ff fb39 	bl	80005fc <HAL_GetTick>
 8000f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f8c:	e00a      	b.n	8000fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f8e:	f7ff fb35 	bl	80005fc <HAL_GetTick>
 8000f92:	4602      	mov	r2, r0
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d901      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	e09b      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa4:	4b40      	ldr	r3, [pc, #256]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fa6:	6a1b      	ldr	r3, [r3, #32]
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1ee      	bne.n	8000f8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d105      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	4a3b      	ldr	r2, [pc, #236]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000fc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	69db      	ldr	r3, [r3, #28]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	f000 8087 	beq.w	80010da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fcc:	4b36      	ldr	r3, [pc, #216]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 030c 	and.w	r3, r3, #12
 8000fd4:	2b08      	cmp	r3, #8
 8000fd6:	d061      	beq.n	800109c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	69db      	ldr	r3, [r3, #28]
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d146      	bne.n	800106e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe0:	4b33      	ldr	r3, [pc, #204]	@ (80010b0 <HAL_RCC_OscConfig+0x4cc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe6:	f7ff fb09 	bl	80005fc <HAL_GetTick>
 8000fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fec:	e008      	b.n	8001000 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fee:	f7ff fb05 	bl	80005fc <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d901      	bls.n	8001000 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	e06d      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001000:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f0      	bne.n	8000fee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001014:	d108      	bne.n	8001028 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001016:	4b24      	ldr	r3, [pc, #144]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	4921      	ldr	r1, [pc, #132]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a19      	ldr	r1, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001038:	430b      	orrs	r3, r1
 800103a:	491b      	ldr	r1, [pc, #108]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	4313      	orrs	r3, r2
 800103e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001040:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <HAL_RCC_OscConfig+0x4cc>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001046:	f7ff fad9 	bl	80005fc <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fad5 	bl	80005fc <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e03d      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0f0      	beq.n	800104e <HAL_RCC_OscConfig+0x46a>
 800106c:	e035      	b.n	80010da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <HAL_RCC_OscConfig+0x4cc>)
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001074:	f7ff fac2 	bl	80005fc <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800107c:	f7ff fabe 	bl	80005fc <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e026      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_RCC_OscConfig+0x4c4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x498>
 800109a:	e01e      	b.n	80010da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	69db      	ldr	r3, [r3, #28]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d107      	bne.n	80010b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e019      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40007000 	.word	0x40007000
 80010b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010b4:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <HAL_RCC_OscConfig+0x500>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6a1b      	ldr	r3, [r3, #32]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d106      	bne.n	80010d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0d0      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010fc:	4b6a      	ldr	r3, [pc, #424]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0307 	and.w	r3, r3, #7
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d910      	bls.n	800112c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800110a:	4b67      	ldr	r3, [pc, #412]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f023 0207 	bic.w	r2, r3, #7
 8001112:	4965      	ldr	r1, [pc, #404]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	4313      	orrs	r3, r2
 8001118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800111a:	4b63      	ldr	r3, [pc, #396]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	683a      	ldr	r2, [r7, #0]
 8001124:	429a      	cmp	r2, r3
 8001126:	d001      	beq.n	800112c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e0b8      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d020      	beq.n	800117a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001144:	4b59      	ldr	r3, [pc, #356]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	4a58      	ldr	r2, [pc, #352]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800114e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f003 0308 	and.w	r3, r3, #8
 8001158:	2b00      	cmp	r3, #0
 800115a:	d005      	beq.n	8001168 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	4a52      	ldr	r2, [pc, #328]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001162:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001166:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001168:	4b50      	ldr	r3, [pc, #320]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	494d      	ldr	r1, [pc, #308]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	d040      	beq.n	8001208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d107      	bne.n	800119e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800118e:	4b47      	ldr	r3, [pc, #284]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d115      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e07f      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d107      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a6:	4b41      	ldr	r3, [pc, #260]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d109      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e073      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d101      	bne.n	80011c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e06b      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011c6:	4b39      	ldr	r3, [pc, #228]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f023 0203 	bic.w	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	4936      	ldr	r1, [pc, #216]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011d8:	f7ff fa10 	bl	80005fc <HAL_GetTick>
 80011dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011de:	e00a      	b.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011e0:	f7ff fa0c 	bl	80005fc <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e053      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f6:	4b2d      	ldr	r3, [pc, #180]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 020c 	and.w	r2, r3, #12
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	429a      	cmp	r2, r3
 8001206:	d1eb      	bne.n	80011e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001208:	4b27      	ldr	r3, [pc, #156]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d210      	bcs.n	8001238 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 0207 	bic.w	r2, r3, #7
 800121e:	4922      	ldr	r1, [pc, #136]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b20      	ldr	r3, [pc, #128]	@ (80012a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e032      	b.n	800129e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d008      	beq.n	8001256 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	4916      	ldr	r1, [pc, #88]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d009      	beq.n	8001276 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001262:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	00db      	lsls	r3, r3, #3
 8001270:	490e      	ldr	r1, [pc, #56]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001276:	f000 f821 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 800127a:	4602      	mov	r2, r0
 800127c:	4b0b      	ldr	r3, [pc, #44]	@ (80012ac <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	490a      	ldr	r1, [pc, #40]	@ (80012b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001288:	5ccb      	ldrb	r3, [r1, r3]
 800128a:	fa22 f303 	lsr.w	r3, r2, r3
 800128e:	4a09      	ldr	r2, [pc, #36]	@ (80012b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff f96e 	bl	8000578 <HAL_InitTick>

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40022000 	.word	0x40022000
 80012ac:	40021000 	.word	0x40021000
 80012b0:	080044a4 	.word	0x080044a4
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x94>)
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d002      	beq.n	80012ec <HAL_RCC_GetSysClockFreq+0x30>
 80012e6:	2b08      	cmp	r3, #8
 80012e8:	d003      	beq.n	80012f2 <HAL_RCC_GetSysClockFreq+0x36>
 80012ea:	e027      	b.n	800133c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012ec:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x98>)
 80012ee:	613b      	str	r3, [r7, #16]
      break;
 80012f0:	e027      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	0c9b      	lsrs	r3, r3, #18
 80012f6:	f003 030f 	and.w	r3, r3, #15
 80012fa:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <HAL_RCC_GetSysClockFreq+0x9c>)
 80012fc:	5cd3      	ldrb	r3, [r2, r3]
 80012fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d010      	beq.n	800132c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800130a:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_RCC_GetSysClockFreq+0x94>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	0c5b      	lsrs	r3, r3, #17
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	4a11      	ldr	r2, [pc, #68]	@ (800135c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001316:	5cd3      	ldrb	r3, [r2, r3]
 8001318:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a0d      	ldr	r2, [pc, #52]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x98>)
 800131e:	fb03 f202 	mul.w	r2, r3, r2
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	fbb2 f3f3 	udiv	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]
 800132a:	e004      	b.n	8001336 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a0c      	ldr	r2, [pc, #48]	@ (8001360 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001330:	fb02 f303 	mul.w	r3, r2, r3
 8001334:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	613b      	str	r3, [r7, #16]
      break;
 800133a:	e002      	b.n	8001342 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_RCC_GetSysClockFreq+0x98>)
 800133e:	613b      	str	r3, [r7, #16]
      break;
 8001340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001342:	693b      	ldr	r3, [r7, #16]
}
 8001344:	4618      	mov	r0, r3
 8001346:	371c      	adds	r7, #28
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	007a1200 	.word	0x007a1200
 8001358:	080044bc 	.word	0x080044bc
 800135c:	080044cc 	.word	0x080044cc
 8001360:	003d0900 	.word	0x003d0900

08001364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001368:	4b02      	ldr	r3, [pc, #8]	@ (8001374 <HAL_RCC_GetHCLKFreq+0x10>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	20000000 	.word	0x20000000

08001378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800137c:	f7ff fff2 	bl	8001364 <HAL_RCC_GetHCLKFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4903      	ldr	r1, [pc, #12]	@ (800139c <HAL_RCC_GetPCLK1Freq+0x24>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40021000 	.word	0x40021000
 800139c:	080044b4 	.word	0x080044b4

080013a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013a4:	f7ff ffde 	bl	8001364 <HAL_RCC_GetHCLKFreq>
 80013a8:	4602      	mov	r2, r0
 80013aa:	4b05      	ldr	r3, [pc, #20]	@ (80013c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	0adb      	lsrs	r3, r3, #11
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	4903      	ldr	r1, [pc, #12]	@ (80013c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013b6:	5ccb      	ldrb	r3, [r1, r3]
 80013b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013bc:	4618      	mov	r0, r3
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40021000 	.word	0x40021000
 80013c4:	080044b4 	.word	0x080044b4

080013c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <RCC_Delay+0x34>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <RCC_Delay+0x38>)
 80013d6:	fba2 2303 	umull	r2, r3, r2, r3
 80013da:	0a5b      	lsrs	r3, r3, #9
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80013e4:	bf00      	nop
  }
  while (Delay --);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	60fa      	str	r2, [r7, #12]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <RCC_Delay+0x1c>
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr
 80013fc:	20000000 	.word	0x20000000
 8001400:	10624dd3 	.word	0x10624dd3

08001404 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e042      	b.n	800149c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d106      	bne.n	8001430 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2200      	movs	r2, #0
 8001426:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7fe ffb8 	bl	80003a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2224      	movs	r2, #36	@ 0x24
 8001434:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68da      	ldr	r2, [r3, #12]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001446:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f000 f82b 	bl	80014a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	691a      	ldr	r2, [r3, #16]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800145c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	695a      	ldr	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800146c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	68da      	ldr	r2, [r3, #12]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800147c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2220      	movs	r2, #32
 8001488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2220      	movs	r2, #32
 8001490:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	430a      	orrs	r2, r1
 80014c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80014de:	f023 030c 	bic.w	r3, r3, #12
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	430b      	orrs	r3, r1
 80014ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	699a      	ldr	r2, [r3, #24]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a2c      	ldr	r2, [pc, #176]	@ (80015b8 <UART_SetConfig+0x114>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d103      	bne.n	8001514 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800150c:	f7ff ff48 	bl	80013a0 <HAL_RCC_GetPCLK2Freq>
 8001510:	60f8      	str	r0, [r7, #12]
 8001512:	e002      	b.n	800151a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001514:	f7ff ff30 	bl	8001378 <HAL_RCC_GetPCLK1Freq>
 8001518:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	009a      	lsls	r2, r3, #2
 8001524:	441a      	add	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001530:	4a22      	ldr	r2, [pc, #136]	@ (80015bc <UART_SetConfig+0x118>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	095b      	lsrs	r3, r3, #5
 8001538:	0119      	lsls	r1, r3, #4
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	4613      	mov	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4413      	add	r3, r2
 8001542:	009a      	lsls	r2, r3, #2
 8001544:	441a      	add	r2, r3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001550:	4b1a      	ldr	r3, [pc, #104]	@ (80015bc <UART_SetConfig+0x118>)
 8001552:	fba3 0302 	umull	r0, r3, r3, r2
 8001556:	095b      	lsrs	r3, r3, #5
 8001558:	2064      	movs	r0, #100	@ 0x64
 800155a:	fb00 f303 	mul.w	r3, r0, r3
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	011b      	lsls	r3, r3, #4
 8001562:	3332      	adds	r3, #50	@ 0x32
 8001564:	4a15      	ldr	r2, [pc, #84]	@ (80015bc <UART_SetConfig+0x118>)
 8001566:	fba2 2303 	umull	r2, r3, r2, r3
 800156a:	095b      	lsrs	r3, r3, #5
 800156c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001570:	4419      	add	r1, r3
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	009a      	lsls	r2, r3, #2
 800157c:	441a      	add	r2, r3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	fbb2 f2f3 	udiv	r2, r2, r3
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <UART_SetConfig+0x118>)
 800158a:	fba3 0302 	umull	r0, r3, r3, r2
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2064      	movs	r0, #100	@ 0x64
 8001592:	fb00 f303 	mul.w	r3, r0, r3
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	011b      	lsls	r3, r3, #4
 800159a:	3332      	adds	r3, #50	@ 0x32
 800159c:	4a07      	ldr	r2, [pc, #28]	@ (80015bc <UART_SetConfig+0x118>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	f003 020f 	and.w	r2, r3, #15
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	440a      	add	r2, r1
 80015ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40013800 	.word	0x40013800
 80015bc:	51eb851f 	.word	0x51eb851f

080015c0 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_INFO(" ");
 80015c6:	b672      	cpsid	i
 80015c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001804 <app_init+0x244>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a8e      	ldr	r2, [pc, #568]	@ (8001808 <app_init+0x248>)
 80015ce:	213f      	movs	r1, #63	@ 0x3f
 80015d0:	4618      	mov	r0, r3
 80015d2:	f001 fdd1 	bl	8003178 <sniprintf>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a8c      	ldr	r2, [pc, #560]	@ (800180c <app_init+0x24c>)
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b89      	ldr	r3, [pc, #548]	@ (8001804 <app_init+0x244>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fa0b 	bl	80019fc <logger_log_print_>
 80015e6:	b662      	cpsie	i
 80015e8:	b672      	cpsid	i
 80015ea:	4b86      	ldr	r3, [pc, #536]	@ (8001804 <app_init+0x244>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a88      	ldr	r2, [pc, #544]	@ (8001810 <app_init+0x250>)
 80015f0:	213f      	movs	r1, #63	@ 0x3f
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fdc0 	bl	8003178 <sniprintf>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a84      	ldr	r2, [pc, #528]	@ (800180c <app_init+0x24c>)
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b81      	ldr	r3, [pc, #516]	@ (8001804 <app_init+0x244>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f000 f9fa 	bl	80019fc <logger_log_print_>
 8001608:	b662      	cpsie	i
 800160a:	b672      	cpsid	i
 800160c:	4b7d      	ldr	r3, [pc, #500]	@ (8001804 <app_init+0x244>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a80      	ldr	r2, [pc, #512]	@ (8001814 <app_init+0x254>)
 8001612:	213f      	movs	r1, #63	@ 0x3f
 8001614:	4618      	mov	r0, r3
 8001616:	f001 fdaf 	bl	8003178 <sniprintf>
 800161a:	4603      	mov	r3, r0
 800161c:	4a7b      	ldr	r2, [pc, #492]	@ (800180c <app_init+0x24c>)
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b78      	ldr	r3, [pc, #480]	@ (8001804 <app_init+0x244>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f000 f9e9 	bl	80019fc <logger_log_print_>
 800162a:	b662      	cpsie	i
	LOGGER_INFO("%s is running - Tick [mS] = %lu", GET_NAME(app_init), HAL_GetTick());
 800162c:	b672      	cpsid	i
 800162e:	4b75      	ldr	r3, [pc, #468]	@ (8001804 <app_init+0x244>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a75      	ldr	r2, [pc, #468]	@ (8001808 <app_init+0x248>)
 8001634:	213f      	movs	r1, #63	@ 0x3f
 8001636:	4618      	mov	r0, r3
 8001638:	f001 fd9e 	bl	8003178 <sniprintf>
 800163c:	4603      	mov	r3, r0
 800163e:	4a73      	ldr	r2, [pc, #460]	@ (800180c <app_init+0x24c>)
 8001640:	6013      	str	r3, [r2, #0]
 8001642:	4b70      	ldr	r3, [pc, #448]	@ (8001804 <app_init+0x244>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f000 f9d8 	bl	80019fc <logger_log_print_>
 800164c:	b662      	cpsie	i
 800164e:	b672      	cpsid	i
 8001650:	4b6c      	ldr	r3, [pc, #432]	@ (8001804 <app_init+0x244>)
 8001652:	681c      	ldr	r4, [r3, #0]
 8001654:	f7fe ffd2 	bl	80005fc <HAL_GetTick>
 8001658:	4603      	mov	r3, r0
 800165a:	9300      	str	r3, [sp, #0]
 800165c:	4b6e      	ldr	r3, [pc, #440]	@ (8001818 <app_init+0x258>)
 800165e:	4a6f      	ldr	r2, [pc, #444]	@ (800181c <app_init+0x25c>)
 8001660:	213f      	movs	r1, #63	@ 0x3f
 8001662:	4620      	mov	r0, r4
 8001664:	f001 fd88 	bl	8003178 <sniprintf>
 8001668:	4603      	mov	r3, r0
 800166a:	4a68      	ldr	r2, [pc, #416]	@ (800180c <app_init+0x24c>)
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b65      	ldr	r3, [pc, #404]	@ (8001804 <app_init+0x244>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9c2 	bl	80019fc <logger_log_print_>
 8001678:	b662      	cpsie	i
 800167a:	b672      	cpsid	i
 800167c:	4b61      	ldr	r3, [pc, #388]	@ (8001804 <app_init+0x244>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a64      	ldr	r2, [pc, #400]	@ (8001814 <app_init+0x254>)
 8001682:	213f      	movs	r1, #63	@ 0x3f
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fd77 	bl	8003178 <sniprintf>
 800168a:	4603      	mov	r3, r0
 800168c:	4a5f      	ldr	r2, [pc, #380]	@ (800180c <app_init+0x24c>)
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b5c      	ldr	r3, [pc, #368]	@ (8001804 <app_init+0x244>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f000 f9b1 	bl	80019fc <logger_log_print_>
 800169a:	b662      	cpsie	i

	LOGGER_INFO(p_sys);
 800169c:	b672      	cpsid	i
 800169e:	4b59      	ldr	r3, [pc, #356]	@ (8001804 <app_init+0x244>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a59      	ldr	r2, [pc, #356]	@ (8001808 <app_init+0x248>)
 80016a4:	213f      	movs	r1, #63	@ 0x3f
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fd66 	bl	8003178 <sniprintf>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4a57      	ldr	r2, [pc, #348]	@ (800180c <app_init+0x24c>)
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b54      	ldr	r3, [pc, #336]	@ (8001804 <app_init+0x244>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f9a0 	bl	80019fc <logger_log_print_>
 80016bc:	b662      	cpsie	i
 80016be:	b672      	cpsid	i
 80016c0:	4b50      	ldr	r3, [pc, #320]	@ (8001804 <app_init+0x244>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a56      	ldr	r2, [pc, #344]	@ (8001820 <app_init+0x260>)
 80016c6:	6812      	ldr	r2, [r2, #0]
 80016c8:	213f      	movs	r1, #63	@ 0x3f
 80016ca:	4618      	mov	r0, r3
 80016cc:	f001 fd54 	bl	8003178 <sniprintf>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a4e      	ldr	r2, [pc, #312]	@ (800180c <app_init+0x24c>)
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <app_init+0x244>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f98e 	bl	80019fc <logger_log_print_>
 80016e0:	b662      	cpsie	i
 80016e2:	b672      	cpsid	i
 80016e4:	4b47      	ldr	r3, [pc, #284]	@ (8001804 <app_init+0x244>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4a      	ldr	r2, [pc, #296]	@ (8001814 <app_init+0x254>)
 80016ea:	213f      	movs	r1, #63	@ 0x3f
 80016ec:	4618      	mov	r0, r3
 80016ee:	f001 fd43 	bl	8003178 <sniprintf>
 80016f2:	4603      	mov	r3, r0
 80016f4:	4a45      	ldr	r2, [pc, #276]	@ (800180c <app_init+0x24c>)
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b42      	ldr	r3, [pc, #264]	@ (8001804 <app_init+0x244>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 f97d 	bl	80019fc <logger_log_print_>
 8001702:	b662      	cpsie	i
	LOGGER_INFO(p_app);
 8001704:	b672      	cpsid	i
 8001706:	4b3f      	ldr	r3, [pc, #252]	@ (8001804 <app_init+0x244>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a3f      	ldr	r2, [pc, #252]	@ (8001808 <app_init+0x248>)
 800170c:	213f      	movs	r1, #63	@ 0x3f
 800170e:	4618      	mov	r0, r3
 8001710:	f001 fd32 	bl	8003178 <sniprintf>
 8001714:	4603      	mov	r3, r0
 8001716:	4a3d      	ldr	r2, [pc, #244]	@ (800180c <app_init+0x24c>)
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b3a      	ldr	r3, [pc, #232]	@ (8001804 <app_init+0x244>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f96c 	bl	80019fc <logger_log_print_>
 8001724:	b662      	cpsie	i
 8001726:	b672      	cpsid	i
 8001728:	4b36      	ldr	r3, [pc, #216]	@ (8001804 <app_init+0x244>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a3d      	ldr	r2, [pc, #244]	@ (8001824 <app_init+0x264>)
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	213f      	movs	r1, #63	@ 0x3f
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fd20 	bl	8003178 <sniprintf>
 8001738:	4603      	mov	r3, r0
 800173a:	4a34      	ldr	r2, [pc, #208]	@ (800180c <app_init+0x24c>)
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <app_init+0x244>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f95a 	bl	80019fc <logger_log_print_>
 8001748:	b662      	cpsie	i
 800174a:	b672      	cpsid	i
 800174c:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <app_init+0x244>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a30      	ldr	r2, [pc, #192]	@ (8001814 <app_init+0x254>)
 8001752:	213f      	movs	r1, #63	@ 0x3f
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fd0f 	bl	8003178 <sniprintf>
 800175a:	4603      	mov	r3, r0
 800175c:	4a2b      	ldr	r2, [pc, #172]	@ (800180c <app_init+0x24c>)
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b28      	ldr	r3, [pc, #160]	@ (8001804 <app_init+0x244>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 f949 	bl	80019fc <logger_log_print_>
 800176a:	b662      	cpsie	i

	/* Init & Print out: Application execution counter */
	g_app_cnt = G_APP_CNT_INI;
 800176c:	4b2e      	ldr	r3, [pc, #184]	@ (8001828 <app_init+0x268>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
	LOGGER_INFO(" %s = %lu", GET_NAME(g_app_cnt), g_app_cnt);
 8001772:	b672      	cpsid	i
 8001774:	4b23      	ldr	r3, [pc, #140]	@ (8001804 <app_init+0x244>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a23      	ldr	r2, [pc, #140]	@ (8001808 <app_init+0x248>)
 800177a:	213f      	movs	r1, #63	@ 0x3f
 800177c:	4618      	mov	r0, r3
 800177e:	f001 fcfb 	bl	8003178 <sniprintf>
 8001782:	4603      	mov	r3, r0
 8001784:	4a21      	ldr	r2, [pc, #132]	@ (800180c <app_init+0x24c>)
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b1e      	ldr	r3, [pc, #120]	@ (8001804 <app_init+0x244>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f935 	bl	80019fc <logger_log_print_>
 8001792:	b662      	cpsie	i
 8001794:	b672      	cpsid	i
 8001796:	4b1b      	ldr	r3, [pc, #108]	@ (8001804 <app_init+0x244>)
 8001798:	6818      	ldr	r0, [r3, #0]
 800179a:	4b23      	ldr	r3, [pc, #140]	@ (8001828 <app_init+0x268>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <app_init+0x26c>)
 80017a2:	4a23      	ldr	r2, [pc, #140]	@ (8001830 <app_init+0x270>)
 80017a4:	213f      	movs	r1, #63	@ 0x3f
 80017a6:	f001 fce7 	bl	8003178 <sniprintf>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4a17      	ldr	r2, [pc, #92]	@ (800180c <app_init+0x24c>)
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <app_init+0x244>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 f921 	bl	80019fc <logger_log_print_>
 80017ba:	b662      	cpsie	i
 80017bc:	b672      	cpsid	i
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <app_init+0x244>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <app_init+0x254>)
 80017c4:	213f      	movs	r1, #63	@ 0x3f
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fcd6 	bl	8003178 <sniprintf>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <app_init+0x24c>)
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <app_init+0x244>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f910 	bl	80019fc <logger_log_print_>
 80017dc:	b662      	cpsie	i
/*!< DWT Cycle Counter register */
/*!< CYCCNTENA bit in DWT_CONTROL register */
static inline void cycle_counter_init(void) __attribute__((always_inline));
static inline void cycle_counter_init(void)
{
	 CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;/* enable DWT hardware */
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <app_init+0x274>)
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <app_init+0x274>)
 80017e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e8:	60d3      	str	r3, [r2, #12]
	 DWT->CYCCNT = 0;								/* reset cycle counter */
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <app_init+0x278>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	605a      	str	r2, [r3, #4]
	 DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;			/* start counting */
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <app_init+0x278>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a10      	ldr	r2, [pc, #64]	@ (8001838 <app_init+0x278>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop

	/* Init Cycle Counter */
	cycle_counter_init();

    /* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
 8001802:	e036      	b.n	8001872 <app_init+0x2b2>
 8001804:	080044f4 	.word	0x080044f4
 8001808:	08004130 	.word	0x08004130
 800180c:	2000015c 	.word	0x2000015c
 8001810:	08004138 	.word	0x08004138
 8001814:	0800413c 	.word	0x0800413c
 8001818:	08004140 	.word	0x08004140
 800181c:	0800414c 	.word	0x0800414c
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000010 	.word	0x20000010
 8001828:	20000104 	.word	0x20000104
 800182c:	0800416c 	.word	0x0800416c
 8001830:	08004178 	.word	0x08004178
 8001834:	e000edf0 	.word	0xe000edf0
 8001838:	e0001000 	.word	0xe0001000
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 800183c:	4917      	ldr	r1, [pc, #92]	@ (800189c <app_init+0x2dc>)
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	4413      	add	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	440b      	add	r3, r1
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	4813      	ldr	r0, [pc, #76]	@ (800189c <app_init+0x2dc>)
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4403      	add	r3, r0
 800185a:	3308      	adds	r3, #8
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8001862:	4a0f      	ldr	r2, [pc, #60]	@ (80018a0 <app_init+0x2e0>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2100      	movs	r1, #0
 8001868:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3301      	adds	r3, #1
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2b02      	cmp	r3, #2
 8001876:	d9e1      	bls.n	800183c <app_init+0x27c>
	}

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 8001878:	b672      	cpsid	i
	/* Init Tick Counter */
	g_app_tick_cnt = G_APP_TICK_CNT_INI;
 800187a:	4b0a      	ldr	r3, [pc, #40]	@ (80018a4 <app_init+0x2e4>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

	g_task_sensor_tick_cnt = G_APP_TICK_CNT_INI;
 8001880:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <app_init+0x2e8>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
	g_task_system_tick_cnt = G_APP_TICK_CNT_INI;
 8001886:	4b09      	ldr	r3, [pc, #36]	@ (80018ac <app_init+0x2ec>)
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
	g_task_actuator_tick_cnt = G_APP_TICK_CNT_INI;
 800188c:	4b08      	ldr	r3, [pc, #32]	@ (80018b0 <app_init+0x2f0>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
    __asm("CPSIE i");	/* enable interrupts */
 8001892:	b662      	cpsie	i
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	080044d0 	.word	0x080044d0
 80018a0:	20000110 	.word	0x20000110
 80018a4:	2000010c 	.word	0x2000010c
 80018a8:	20000174 	.word	0x20000174
 80018ac:	20000184 	.word	0x20000184
 80018b0:	20000164 	.word	0x20000164

080018b4 <app_update>:

void app_update(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
	uint32_t index;
	bool b_time_update_required = false;
 80018ba:	2300      	movs	r3, #0
 80018bc:	72fb      	strb	r3, [r7, #11]
	uint32_t cycle_counter_time_us;

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 80018be:	b672      	cpsid	i
    if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 80018c0:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <app_update+0xe4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <app_update+0x22>
    {
		/* Update Tick Counter */
    	g_app_tick_cnt--;
 80018c8:	4b33      	ldr	r3, [pc, #204]	@ (8001998 <app_update+0xe4>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	4a32      	ldr	r2, [pc, #200]	@ (8001998 <app_update+0xe4>)
 80018d0:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80018d2:	2301      	movs	r3, #1
 80018d4:	72fb      	strb	r3, [r7, #11]
    }
    __asm("CPSIE i");	/* enable interrupts */
 80018d6:	b662      	cpsie	i

	/* Check if it's time to run tasks */
    while (b_time_update_required)
 80018d8:	e055      	b.n	8001986 <app_update+0xd2>
    {
    	/* Update App Counter */
    	g_app_cnt++;
 80018da:	4b30      	ldr	r3, [pc, #192]	@ (800199c <app_update+0xe8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	4a2e      	ldr	r2, [pc, #184]	@ (800199c <app_update+0xe8>)
 80018e2:	6013      	str	r3, [r2, #0]
    	g_app_runtime_us = 0;
 80018e4:	4b2e      	ldr	r3, [pc, #184]	@ (80019a0 <app_update+0xec>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]

		/* Go through the task arrays */
		for (index = 0; TASK_QTY > index; index++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	e037      	b.n	8001960 <app_update+0xac>
/* reset cycle counter */
/*!< DWT Cycle Counter register */
static inline void cycle_counter_reset(void) __attribute__((always_inline));
static inline void cycle_counter_reset(void)
{
	DWT->CYCCNT = 0;
 80018f0:	4b2c      	ldr	r3, [pc, #176]	@ (80019a4 <app_update+0xf0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	605a      	str	r2, [r3, #4]
}
 80018f6:	bf00      	nop
		{
			cycle_counter_reset();

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 80018f8:	492b      	ldr	r1, [pc, #172]	@ (80019a8 <app_update+0xf4>)
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	440b      	add	r3, r1
 8001906:	3304      	adds	r3, #4
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	4827      	ldr	r0, [pc, #156]	@ (80019a8 <app_update+0xf4>)
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	4613      	mov	r3, r2
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	4413      	add	r3, r2
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	4403      	add	r3, r0
 8001918:	3308      	adds	r3, #8
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	4788      	blx	r1
}

static inline uint32_t cycle_counter_get_time_us(void) __attribute__((always_inline));
static inline uint32_t cycle_counter_get_time_us(void)
{
	return (DWT->CYCCNT / (SystemCoreClock / 1000000));
 8001920:	4b20      	ldr	r3, [pc, #128]	@ (80019a4 <app_update+0xf0>)
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <app_update+0xf8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4921      	ldr	r1, [pc, #132]	@ (80019b0 <app_update+0xfc>)
 800192a:	fba1 1303 	umull	r1, r3, r1, r3
 800192e:	0c9b      	lsrs	r3, r3, #18
 8001930:	fbb2 f3f3 	udiv	r3, r2, r3

			cycle_counter_time_us = cycle_counter_get_time_us();
 8001934:	607b      	str	r3, [r7, #4]

			/* Update variables */
			g_app_runtime_us += cycle_counter_time_us;
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <app_update+0xec>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a18      	ldr	r2, [pc, #96]	@ (80019a0 <app_update+0xec>)
 8001940:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001942:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <app_update+0x100>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	429a      	cmp	r2, r3
 800194e:	d904      	bls.n	800195a <app_update+0xa6>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001950:	4918      	ldr	r1, [pc, #96]	@ (80019b4 <app_update+0x100>)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (index = 0; TASK_QTY > index; index++)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	3301      	adds	r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d9c4      	bls.n	80018f0 <app_update+0x3c>
			}
		}

		/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 8001966:	b672      	cpsid	i
		if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <app_update+0xe4>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d007      	beq.n	8001980 <app_update+0xcc>
		{
			/* Update Tick Counter */
			g_app_tick_cnt--;
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <app_update+0xe4>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3b01      	subs	r3, #1
 8001976:	4a08      	ldr	r2, [pc, #32]	@ (8001998 <app_update+0xe4>)
 8001978:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800197a:	2301      	movs	r3, #1
 800197c:	72fb      	strb	r3, [r7, #11]
 800197e:	e001      	b.n	8001984 <app_update+0xd0>
		}
		else
		{
			b_time_update_required = false;
 8001980:	2300      	movs	r3, #0
 8001982:	72fb      	strb	r3, [r7, #11]
		}
		__asm("CPSIE i");	/* enable interrupts */
 8001984:	b662      	cpsie	i
    while (b_time_update_required)
 8001986:	7afb      	ldrb	r3, [r7, #11]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1a6      	bne.n	80018da <app_update+0x26>
	}
}
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	2000010c 	.word	0x2000010c
 800199c:	20000104 	.word	0x20000104
 80019a0:	20000108 	.word	0x20000108
 80019a4:	e0001000 	.word	0xe0001000
 80019a8:	080044d0 	.word	0x080044d0
 80019ac:	20000000 	.word	0x20000000
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	20000110 	.word	0x20000110

080019b8 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
	/* Update Tick Counter */
	g_app_tick_cnt++;
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_SYSTICK_Callback+0x34>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	3301      	adds	r3, #1
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_SYSTICK_Callback+0x34>)
 80019c4:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_SYSTICK_Callback+0x38>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <HAL_SYSTICK_Callback+0x38>)
 80019ce:	6013      	str	r3, [r2, #0]
	g_task_system_tick_cnt++;
 80019d0:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_SYSTICK_Callback+0x3c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	4a07      	ldr	r2, [pc, #28]	@ (80019f4 <HAL_SYSTICK_Callback+0x3c>)
 80019d8:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <HAL_SYSTICK_Callback+0x40>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <HAL_SYSTICK_Callback+0x40>)
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr
 80019ec:	2000010c 	.word	0x2000010c
 80019f0:	20000174 	.word	0x20000174
 80019f4:	20000184 	.word	0x20000184
 80019f8:	20000164 	.word	0x20000164

080019fc <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f001 fba5 	bl	8003154 <iprintf>
	fflush(stdout);
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <logger_log_print_+0x24>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fac9 	bl	8002fa8 <fflush>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000048 	.word	0x20000048

08001a24 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08e      	sub	sp, #56	@ 0x38
 8001a28:	af08      	add	r7, sp, #32
 8001a2a:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_INFO(" ");
 8001a2c:	b672      	cpsid	i
 8001a2e:	4ba2      	ldr	r3, [pc, #648]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4aa2      	ldr	r2, [pc, #648]	@ (8001cbc <task_actuator_init+0x298>)
 8001a34:	213f      	movs	r1, #63	@ 0x3f
 8001a36:	4618      	mov	r0, r3
 8001a38:	f001 fb9e 	bl	8003178 <sniprintf>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4aa0      	ldr	r2, [pc, #640]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	4b9d      	ldr	r3, [pc, #628]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ffd8 	bl	80019fc <logger_log_print_>
 8001a4c:	b662      	cpsie	i
 8001a4e:	b672      	cpsid	i
 8001a50:	4b99      	ldr	r3, [pc, #612]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a9b      	ldr	r2, [pc, #620]	@ (8001cc4 <task_actuator_init+0x2a0>)
 8001a56:	213f      	movs	r1, #63	@ 0x3f
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f001 fb8d 	bl	8003178 <sniprintf>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	4a97      	ldr	r2, [pc, #604]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b94      	ldr	r3, [pc, #592]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ffc7 	bl	80019fc <logger_log_print_>
 8001a6e:	b662      	cpsie	i
 8001a70:	b672      	cpsid	i
 8001a72:	4b91      	ldr	r3, [pc, #580]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a94      	ldr	r2, [pc, #592]	@ (8001cc8 <task_actuator_init+0x2a4>)
 8001a78:	213f      	movs	r1, #63	@ 0x3f
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 fb7c 	bl	8003178 <sniprintf>
 8001a80:	4603      	mov	r3, r0
 8001a82:	4a8f      	ldr	r2, [pc, #572]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	4b8c      	ldr	r3, [pc, #560]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ffb6 	bl	80019fc <logger_log_print_>
 8001a90:	b662      	cpsie	i
	LOGGER_INFO("  %s is running - %s", GET_NAME(task_actuator_init), p_task_actuator);
 8001a92:	b672      	cpsid	i
 8001a94:	4b88      	ldr	r3, [pc, #544]	@ (8001cb8 <task_actuator_init+0x294>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a88      	ldr	r2, [pc, #544]	@ (8001cbc <task_actuator_init+0x298>)
 8001a9a:	213f      	movs	r1, #63	@ 0x3f
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 fb6b 	bl	8003178 <sniprintf>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a86      	ldr	r2, [pc, #536]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b83      	ldr	r3, [pc, #524]	@ (8001cb8 <task_actuator_init+0x294>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ffa5 	bl	80019fc <logger_log_print_>
 8001ab2:	b662      	cpsie	i
 8001ab4:	b672      	cpsid	i
 8001ab6:	4b80      	ldr	r3, [pc, #512]	@ (8001cb8 <task_actuator_init+0x294>)
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	4b84      	ldr	r3, [pc, #528]	@ (8001ccc <task_actuator_init+0x2a8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4b83      	ldr	r3, [pc, #524]	@ (8001cd0 <task_actuator_init+0x2ac>)
 8001ac2:	4a84      	ldr	r2, [pc, #528]	@ (8001cd4 <task_actuator_init+0x2b0>)
 8001ac4:	213f      	movs	r1, #63	@ 0x3f
 8001ac6:	f001 fb57 	bl	8003178 <sniprintf>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4a7c      	ldr	r2, [pc, #496]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b79      	ldr	r3, [pc, #484]	@ (8001cb8 <task_actuator_init+0x294>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff91 	bl	80019fc <logger_log_print_>
 8001ada:	b662      	cpsie	i
 8001adc:	b672      	cpsid	i
 8001ade:	4b76      	ldr	r3, [pc, #472]	@ (8001cb8 <task_actuator_init+0x294>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a79      	ldr	r2, [pc, #484]	@ (8001cc8 <task_actuator_init+0x2a4>)
 8001ae4:	213f      	movs	r1, #63	@ 0x3f
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f001 fb46 	bl	8003178 <sniprintf>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a74      	ldr	r2, [pc, #464]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b71      	ldr	r3, [pc, #452]	@ (8001cb8 <task_actuator_init+0x294>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff80 	bl	80019fc <logger_log_print_>
 8001afc:	b662      	cpsie	i
	LOGGER_INFO("  %s is a %s", GET_NAME(task_actuator), p_task_actuator_);
 8001afe:	b672      	cpsid	i
 8001b00:	4b6d      	ldr	r3, [pc, #436]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a6d      	ldr	r2, [pc, #436]	@ (8001cbc <task_actuator_init+0x298>)
 8001b06:	213f      	movs	r1, #63	@ 0x3f
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f001 fb35 	bl	8003178 <sniprintf>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4a6b      	ldr	r2, [pc, #428]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001b12:	6013      	str	r3, [r2, #0]
 8001b14:	4b68      	ldr	r3, [pc, #416]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff ff6f 	bl	80019fc <logger_log_print_>
 8001b1e:	b662      	cpsie	i
 8001b20:	b672      	cpsid	i
 8001b22:	4b65      	ldr	r3, [pc, #404]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b24:	6818      	ldr	r0, [r3, #0]
 8001b26:	4b6c      	ldr	r3, [pc, #432]	@ (8001cd8 <task_actuator_init+0x2b4>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8001cdc <task_actuator_init+0x2b8>)
 8001b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8001ce0 <task_actuator_init+0x2bc>)
 8001b30:	213f      	movs	r1, #63	@ 0x3f
 8001b32:	f001 fb21 	bl	8003178 <sniprintf>
 8001b36:	4603      	mov	r3, r0
 8001b38:	4a61      	ldr	r2, [pc, #388]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001b3a:	6013      	str	r3, [r2, #0]
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5b 	bl	80019fc <logger_log_print_>
 8001b46:	b662      	cpsie	i
 8001b48:	b672      	cpsid	i
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5e      	ldr	r2, [pc, #376]	@ (8001cc8 <task_actuator_init+0x2a4>)
 8001b50:	213f      	movs	r1, #63	@ 0x3f
 8001b52:	4618      	mov	r0, r3
 8001b54:	f001 fb10 	bl	8003178 <sniprintf>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a59      	ldr	r2, [pc, #356]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	4b56      	ldr	r3, [pc, #344]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff ff4a 	bl	80019fc <logger_log_print_>
 8001b68:	b662      	cpsie	i

	/* Init & Print out: Task execution counter */
	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8001b6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ce4 <task_actuator_init+0x2c0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
	LOGGER_INFO("   %s = %lu", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8001b70:	b672      	cpsid	i
 8001b72:	4b51      	ldr	r3, [pc, #324]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a51      	ldr	r2, [pc, #324]	@ (8001cbc <task_actuator_init+0x298>)
 8001b78:	213f      	movs	r1, #63	@ 0x3f
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f001 fafc 	bl	8003178 <sniprintf>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b4c      	ldr	r3, [pc, #304]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff36 	bl	80019fc <logger_log_print_>
 8001b90:	b662      	cpsie	i
 8001b92:	b672      	cpsid	i
 8001b94:	4b48      	ldr	r3, [pc, #288]	@ (8001cb8 <task_actuator_init+0x294>)
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	4b52      	ldr	r3, [pc, #328]	@ (8001ce4 <task_actuator_init+0x2c0>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4b52      	ldr	r3, [pc, #328]	@ (8001ce8 <task_actuator_init+0x2c4>)
 8001ba0:	4a52      	ldr	r2, [pc, #328]	@ (8001cec <task_actuator_init+0x2c8>)
 8001ba2:	213f      	movs	r1, #63	@ 0x3f
 8001ba4:	f001 fae8 	bl	8003178 <sniprintf>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a45      	ldr	r2, [pc, #276]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <task_actuator_init+0x294>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff22 	bl	80019fc <logger_log_print_>
 8001bb8:	b662      	cpsie	i
 8001bba:	b672      	cpsid	i
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8001cb8 <task_actuator_init+0x294>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a41      	ldr	r2, [pc, #260]	@ (8001cc8 <task_actuator_init+0x2a4>)
 8001bc2:	213f      	movs	r1, #63	@ 0x3f
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f001 fad7 	bl	8003178 <sniprintf>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b39      	ldr	r3, [pc, #228]	@ (8001cb8 <task_actuator_init+0x294>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff11 	bl	80019fc <logger_log_print_>
 8001bda:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	e0c3      	b.n	8001d6a <task_actuator_init+0x346>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4613      	mov	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4a40      	ldr	r2, [pc, #256]	@ (8001cf0 <task_actuator_init+0x2cc>)
 8001bee:	4413      	add	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cf4 <task_actuator_init+0x2d0>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	60fb      	str	r3, [r7, #12]

		/* Init & Print out: Index & Task execution FSM */
		state = ST_LED_XX_OFF;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	72fb      	strb	r3, [r7, #11]
		p_task_actuator_dta->state = state;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	7afa      	ldrb	r2, [r7, #11]
 8001c04:	711a      	strb	r2, [r3, #4]

		event = EV_LED_XX_OFF;
 8001c06:	2300      	movs	r3, #0
 8001c08:	72bb      	strb	r3, [r7, #10]
		p_task_actuator_dta->event = event;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	7aba      	ldrb	r2, [r7, #10]
 8001c0e:	715a      	strb	r2, [r3, #5]

		b_event = false;
 8001c10:	2300      	movs	r3, #0
 8001c12:	727b      	strb	r3, [r7, #9]
		p_task_actuator_dta->flag = b_event;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	7a7a      	ldrb	r2, [r7, #9]
 8001c18:	719a      	strb	r2, [r3, #6]

		LOGGER_INFO(" ");
 8001c1a:	b672      	cpsid	i
 8001c1c:	4b26      	ldr	r3, [pc, #152]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a26      	ldr	r2, [pc, #152]	@ (8001cbc <task_actuator_init+0x298>)
 8001c22:	213f      	movs	r1, #63	@ 0x3f
 8001c24:	4618      	mov	r0, r3
 8001c26:	f001 faa7 	bl	8003178 <sniprintf>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4a24      	ldr	r2, [pc, #144]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fee1 	bl	80019fc <logger_log_print_>
 8001c3a:	b662      	cpsie	i
 8001c3c:	b672      	cpsid	i
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a20      	ldr	r2, [pc, #128]	@ (8001cc4 <task_actuator_init+0x2a0>)
 8001c44:	213f      	movs	r1, #63	@ 0x3f
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fa96 	bl	8003178 <sniprintf>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b19      	ldr	r3, [pc, #100]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fed0 	bl	80019fc <logger_log_print_>
 8001c5c:	b662      	cpsie	i
 8001c5e:	b672      	cpsid	i
 8001c60:	4b15      	ldr	r3, [pc, #84]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a18      	ldr	r2, [pc, #96]	@ (8001cc8 <task_actuator_init+0x2a4>)
 8001c66:	213f      	movs	r1, #63	@ 0x3f
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f001 fa85 	bl	8003178 <sniprintf>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	4a13      	ldr	r2, [pc, #76]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001c72:	6013      	str	r3, [r2, #0]
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff febf 	bl	80019fc <logger_log_print_>
 8001c7e:	b662      	cpsie	i
		LOGGER_INFO("   %s = %lu   %s = %lu   %s = %lu   %s = %s",
 8001c80:	b672      	cpsid	i
 8001c82:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a0d      	ldr	r2, [pc, #52]	@ (8001cbc <task_actuator_init+0x298>)
 8001c88:	213f      	movs	r1, #63	@ 0x3f
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f001 fa74 	bl	8003178 <sniprintf>
 8001c90:	4603      	mov	r3, r0
 8001c92:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc0 <task_actuator_init+0x29c>)
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	4b08      	ldr	r3, [pc, #32]	@ (8001cb8 <task_actuator_init+0x294>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff feae 	bl	80019fc <logger_log_print_>
 8001ca0:	b662      	cpsie	i
 8001ca2:	b672      	cpsid	i
 8001ca4:	4b04      	ldr	r3, [pc, #16]	@ (8001cb8 <task_actuator_init+0x294>)
 8001ca6:	6818      	ldr	r0, [r3, #0]
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	7aba      	ldrb	r2, [r7, #10]
 8001cac:	7a79      	ldrb	r1, [r7, #9]
 8001cae:	2900      	cmp	r1, #0
 8001cb0:	d024      	beq.n	8001cfc <task_actuator_init+0x2d8>
 8001cb2:	4911      	ldr	r1, [pc, #68]	@ (8001cf8 <task_actuator_init+0x2d4>)
 8001cb4:	e023      	b.n	8001cfe <task_actuator_init+0x2da>
 8001cb6:	bf00      	nop
 8001cb8:	080044f4 	.word	0x080044f4
 8001cbc:	080041cc 	.word	0x080041cc
 8001cc0:	2000015c 	.word	0x2000015c
 8001cc4:	080041d4 	.word	0x080041d4
 8001cc8:	080041d8 	.word	0x080041d8
 8001ccc:	2000001c 	.word	0x2000001c
 8001cd0:	080041dc 	.word	0x080041dc
 8001cd4:	080041f0 	.word	0x080041f0
 8001cd8:	20000020 	.word	0x20000020
 8001cdc:	08004208 	.word	0x08004208
 8001ce0:	08004218 	.word	0x08004218
 8001ce4:	20000160 	.word	0x20000160
 8001ce8:	08004228 	.word	0x08004228
 8001cec:	0800423c 	.word	0x0800423c
 8001cf0:	080044f8 	.word	0x080044f8
 8001cf4:	20000014 	.word	0x20000014
 8001cf8:	08004248 	.word	0x08004248
 8001cfc:	491f      	ldr	r1, [pc, #124]	@ (8001d7c <task_actuator_init+0x358>)
 8001cfe:	9106      	str	r1, [sp, #24]
 8001d00:	491f      	ldr	r1, [pc, #124]	@ (8001d80 <task_actuator_init+0x35c>)
 8001d02:	9105      	str	r1, [sp, #20]
 8001d04:	9204      	str	r2, [sp, #16]
 8001d06:	4a1f      	ldr	r2, [pc, #124]	@ (8001d84 <task_actuator_init+0x360>)
 8001d08:	9203      	str	r2, [sp, #12]
 8001d0a:	9302      	str	r3, [sp, #8]
 8001d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <task_actuator_init+0x364>)
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	4b1d      	ldr	r3, [pc, #116]	@ (8001d8c <task_actuator_init+0x368>)
 8001d16:	4a1e      	ldr	r2, [pc, #120]	@ (8001d90 <task_actuator_init+0x36c>)
 8001d18:	213f      	movs	r1, #63	@ 0x3f
 8001d1a:	f001 fa2d 	bl	8003178 <sniprintf>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <task_actuator_init+0x370>)
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <task_actuator_init+0x374>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fe67 	bl	80019fc <logger_log_print_>
 8001d2e:	b662      	cpsie	i
 8001d30:	b672      	cpsid	i
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <task_actuator_init+0x374>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <task_actuator_init+0x378>)
 8001d38:	213f      	movs	r1, #63	@ 0x3f
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f001 fa1c 	bl	8003178 <sniprintf>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a14      	ldr	r2, [pc, #80]	@ (8001d94 <task_actuator_init+0x370>)
 8001d44:	6013      	str	r3, [r2, #0]
 8001d46:	4b14      	ldr	r3, [pc, #80]	@ (8001d98 <task_actuator_init+0x374>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fe56 	bl	80019fc <logger_log_print_>
 8001d50:	b662      	cpsie	i
					 GET_NAME(index), index,
					 GET_NAME(state), (uint32_t)state,
					 GET_NAME(event), (uint32_t)event,
					 GET_NAME(b_event), (b_event ? "true" : "false"));

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6858      	ldr	r0, [r3, #4]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	8919      	ldrh	r1, [r3, #8]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	7adb      	ldrb	r3, [r3, #11]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	f7fe ff05 	bl	8000b6e <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	3301      	adds	r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f43f af38 	beq.w	8001be2 <task_actuator_init+0x1be>
	}
}
 8001d72:	bf00      	nop
 8001d74:	bf00      	nop
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	08004250 	.word	0x08004250
 8001d80:	0800428c 	.word	0x0800428c
 8001d84:	08004294 	.word	0x08004294
 8001d88:	0800429c 	.word	0x0800429c
 8001d8c:	08004258 	.word	0x08004258
 8001d90:	08004260 	.word	0x08004260
 8001d94:	2000015c 	.word	0x2000015c
 8001d98:	080044f4 	.word	0x080044f4
 8001d9c:	080041d8 	.word	0x080041d8

08001da0 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts*/
 8001dac:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <task_actuator_update+0x68>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d006      	beq.n	8001dc4 <task_actuator_update+0x24>
    {
		/* Update Tick Counter */
    	g_task_actuator_tick_cnt--;
 8001db6:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <task_actuator_update+0x68>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	4a12      	ldr	r2, [pc, #72]	@ (8001e08 <task_actuator_update+0x68>)
 8001dbe:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts */
 8001dc4:	b662      	cpsie	i

    while (b_time_update_required)
 8001dc6:	e016      	b.n	8001df6 <task_actuator_update+0x56>
    {
		/* Update Task Counter */
		g_task_actuator_cnt++;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	@ (8001e0c <task_actuator_update+0x6c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	4a0f      	ldr	r2, [pc, #60]	@ (8001e0c <task_actuator_update+0x6c>)
 8001dd0:	6013      	str	r3, [r2, #0]

		/* Run Task Statechart */
    	task_actuator_statechart();
 8001dd2:	f000 f81d 	bl	8001e10 <task_actuator_statechart>

    	/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 8001dd6:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <task_actuator_update+0x68>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <task_actuator_update+0x50>
		{
			/* Update Tick Counter */
			g_task_actuator_tick_cnt--;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <task_actuator_update+0x68>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <task_actuator_update+0x68>)
 8001de8:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8001dea:	2301      	movs	r3, #1
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e001      	b.n	8001df4 <task_actuator_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts */
 8001df4:	b662      	cpsie	i
    while (b_time_update_required)
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e5      	bne.n	8001dc8 <task_actuator_update+0x28>
    }
}
 8001dfc:	bf00      	nop
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	20000164 	.word	0x20000164
 8001e0c:	20000160 	.word	0x20000160

08001e10 <task_actuator_statechart>:

void task_actuator_statechart(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	e062      	b.n	8001ee2 <task_actuator_statechart+0xd2>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4a33      	ldr	r2, [pc, #204]	@ (8001ef4 <task_actuator_statechart+0xe4>)
 8001e28:	4413      	add	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4a31      	ldr	r2, [pc, #196]	@ (8001ef8 <task_actuator_statechart+0xe8>)
 8001e32:	4413      	add	r3, r2
 8001e34:	607b      	str	r3, [r7, #4]

		switch (p_task_actuator_dta->state)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	791b      	ldrb	r3, [r3, #4]
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	d83c      	bhi.n	8001eb8 <task_actuator_statechart+0xa8>
 8001e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e44 <task_actuator_statechart+0x34>)
 8001e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e44:	08001e59 	.word	0x08001e59
 8001e48:	08001e89 	.word	0x08001e89
 8001e4c:	08001ed3 	.word	0x08001ed3
 8001e50:	08001ed3 	.word	0x08001ed3
 8001e54:	08001ed3 	.word	0x08001ed3
		{
			case ST_LED_XX_OFF:

				if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	799b      	ldrb	r3, [r3, #6]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d03a      	beq.n	8001ed6 <task_actuator_statechart+0xc6>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	795b      	ldrb	r3, [r3, #5]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d136      	bne.n	8001ed6 <task_actuator_statechart+0xc6>
				{
					p_task_actuator_dta->flag = false;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	719a      	strb	r2, [r3, #6]
					HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	6858      	ldr	r0, [r3, #4]
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	8919      	ldrh	r1, [r3, #8]
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	7a9b      	ldrb	r3, [r3, #10]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	f7fe fe77 	bl	8000b6e <HAL_GPIO_WritePin>
					p_task_actuator_dta->state = ST_LED_XX_ON;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	711a      	strb	r2, [r3, #4]
				}

				break;
 8001e86:	e026      	b.n	8001ed6 <task_actuator_statechart+0xc6>

			case ST_LED_XX_ON:

				if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	799b      	ldrb	r3, [r3, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d024      	beq.n	8001eda <task_actuator_statechart+0xca>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	795b      	ldrb	r3, [r3, #5]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d120      	bne.n	8001eda <task_actuator_statechart+0xca>
				{
					p_task_actuator_dta->flag = false;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	719a      	strb	r2, [r3, #6]
					HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	6858      	ldr	r0, [r3, #4]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	8919      	ldrh	r1, [r3, #8]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	7adb      	ldrb	r3, [r3, #11]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f7fe fe5f 	bl	8000b6e <HAL_GPIO_WritePin>
					p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	711a      	strb	r2, [r3, #4]
				}

				break;
 8001eb6:	e010      	b.n	8001eda <task_actuator_statechart+0xca>

				break;

			default:

				p_task_actuator_dta->tick  = DEL_LED_XX_MIN;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
				p_task_actuator_dta->state = ST_LED_XX_OFF;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	711a      	strb	r2, [r3, #4]
				p_task_actuator_dta->event = EV_LED_XX_OFF;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	715a      	strb	r2, [r3, #5]
				p_task_actuator_dta->flag = false;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	719a      	strb	r2, [r3, #6]

				break;
 8001ed0:	e004      	b.n	8001edc <task_actuator_statechart+0xcc>
				break;
 8001ed2:	bf00      	nop
 8001ed4:	e002      	b.n	8001edc <task_actuator_statechart+0xcc>
				break;
 8001ed6:	bf00      	nop
 8001ed8:	e000      	b.n	8001edc <task_actuator_statechart+0xcc>
				break;
 8001eda:	bf00      	nop
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d099      	beq.n	8001e1c <task_actuator_statechart+0xc>
		}
	}
}
 8001ee8:	bf00      	nop
 8001eea:	bf00      	nop
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	080044f8 	.word	0x080044f8
 8001ef8:	20000014 	.word	0x20000014

08001efc <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	460a      	mov	r2, r1
 8001f06:	71fb      	strb	r3, [r7, #7]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8001f0c:	79bb      	ldrb	r3, [r7, #6]
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4a06      	ldr	r2, [pc, #24]	@ (8001f2c <put_event_task_actuator+0x30>)
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	79fa      	ldrb	r2, [r7, #7]
 8001f1a:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	719a      	strb	r2, [r3, #6]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr
 8001f2c:	20000014 	.word	0x20000014

08001f30 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b08c      	sub	sp, #48	@ 0x30
 8001f34:	af06      	add	r7, sp, #24
 8001f36:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_INFO(" ");
 8001f38:	b672      	cpsid	i
 8001f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80020f4 <task_sensor_init+0x1c4>)
 8001f40:	213f      	movs	r1, #63	@ 0x3f
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 f918 	bl	8003178 <sniprintf>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	4a6b      	ldr	r2, [pc, #428]	@ (80020f8 <task_sensor_init+0x1c8>)
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff fd52 	bl	80019fc <logger_log_print_>
 8001f58:	b662      	cpsie	i
 8001f5a:	b672      	cpsid	i
 8001f5c:	4b64      	ldr	r3, [pc, #400]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a66      	ldr	r2, [pc, #408]	@ (80020fc <task_sensor_init+0x1cc>)
 8001f62:	213f      	movs	r1, #63	@ 0x3f
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 f907 	bl	8003178 <sniprintf>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a62      	ldr	r2, [pc, #392]	@ (80020f8 <task_sensor_init+0x1c8>)
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b5f      	ldr	r3, [pc, #380]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fd41 	bl	80019fc <logger_log_print_>
 8001f7a:	b662      	cpsie	i
 8001f7c:	b672      	cpsid	i
 8001f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a5f      	ldr	r2, [pc, #380]	@ (8002100 <task_sensor_init+0x1d0>)
 8001f84:	213f      	movs	r1, #63	@ 0x3f
 8001f86:	4618      	mov	r0, r3
 8001f88:	f001 f8f6 	bl	8003178 <sniprintf>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80020f8 <task_sensor_init+0x1c8>)
 8001f90:	6013      	str	r3, [r2, #0]
 8001f92:	4b57      	ldr	r3, [pc, #348]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fd30 	bl	80019fc <logger_log_print_>
 8001f9c:	b662      	cpsie	i
	LOGGER_INFO("  %s is running - %s", GET_NAME(task_sensor_init), p_task_sensor);
 8001f9e:	b672      	cpsid	i
 8001fa0:	4b53      	ldr	r3, [pc, #332]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a53      	ldr	r2, [pc, #332]	@ (80020f4 <task_sensor_init+0x1c4>)
 8001fa6:	213f      	movs	r1, #63	@ 0x3f
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f001 f8e5 	bl	8003178 <sniprintf>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	4a51      	ldr	r2, [pc, #324]	@ (80020f8 <task_sensor_init+0x1c8>)
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b4e      	ldr	r3, [pc, #312]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fd1f 	bl	80019fc <logger_log_print_>
 8001fbe:	b662      	cpsie	i
 8001fc0:	b672      	cpsid	i
 8001fc2:	4b4b      	ldr	r3, [pc, #300]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001fc4:	6818      	ldr	r0, [r3, #0]
 8001fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8002104 <task_sensor_init+0x1d4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8002108 <task_sensor_init+0x1d8>)
 8001fce:	4a4f      	ldr	r2, [pc, #316]	@ (800210c <task_sensor_init+0x1dc>)
 8001fd0:	213f      	movs	r1, #63	@ 0x3f
 8001fd2:	f001 f8d1 	bl	8003178 <sniprintf>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4a47      	ldr	r2, [pc, #284]	@ (80020f8 <task_sensor_init+0x1c8>)
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b44      	ldr	r3, [pc, #272]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff fd0b 	bl	80019fc <logger_log_print_>
 8001fe6:	b662      	cpsie	i
 8001fe8:	b672      	cpsid	i
 8001fea:	4b41      	ldr	r3, [pc, #260]	@ (80020f0 <task_sensor_init+0x1c0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a44      	ldr	r2, [pc, #272]	@ (8002100 <task_sensor_init+0x1d0>)
 8001ff0:	213f      	movs	r1, #63	@ 0x3f
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f001 f8c0 	bl	8003178 <sniprintf>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a3f      	ldr	r2, [pc, #252]	@ (80020f8 <task_sensor_init+0x1c8>)
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80020f0 <task_sensor_init+0x1c0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fcfa 	bl	80019fc <logger_log_print_>
 8002008:	b662      	cpsie	i
	LOGGER_INFO("  %s is a %s", GET_NAME(task_sensor), p_task_sensor_);
 800200a:	b672      	cpsid	i
 800200c:	4b38      	ldr	r3, [pc, #224]	@ (80020f0 <task_sensor_init+0x1c0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <task_sensor_init+0x1c4>)
 8002012:	213f      	movs	r1, #63	@ 0x3f
 8002014:	4618      	mov	r0, r3
 8002016:	f001 f8af 	bl	8003178 <sniprintf>
 800201a:	4603      	mov	r3, r0
 800201c:	4a36      	ldr	r2, [pc, #216]	@ (80020f8 <task_sensor_init+0x1c8>)
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b33      	ldr	r3, [pc, #204]	@ (80020f0 <task_sensor_init+0x1c0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fce9 	bl	80019fc <logger_log_print_>
 800202a:	b662      	cpsie	i
 800202c:	b672      	cpsid	i
 800202e:	4b30      	ldr	r3, [pc, #192]	@ (80020f0 <task_sensor_init+0x1c0>)
 8002030:	6818      	ldr	r0, [r3, #0]
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <task_sensor_init+0x1e0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <task_sensor_init+0x1e4>)
 800203a:	4a37      	ldr	r2, [pc, #220]	@ (8002118 <task_sensor_init+0x1e8>)
 800203c:	213f      	movs	r1, #63	@ 0x3f
 800203e:	f001 f89b 	bl	8003178 <sniprintf>
 8002042:	4603      	mov	r3, r0
 8002044:	4a2c      	ldr	r2, [pc, #176]	@ (80020f8 <task_sensor_init+0x1c8>)
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b29      	ldr	r3, [pc, #164]	@ (80020f0 <task_sensor_init+0x1c0>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fcd5 	bl	80019fc <logger_log_print_>
 8002052:	b662      	cpsie	i
 8002054:	b672      	cpsid	i
 8002056:	4b26      	ldr	r3, [pc, #152]	@ (80020f0 <task_sensor_init+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a29      	ldr	r2, [pc, #164]	@ (8002100 <task_sensor_init+0x1d0>)
 800205c:	213f      	movs	r1, #63	@ 0x3f
 800205e:	4618      	mov	r0, r3
 8002060:	f001 f88a 	bl	8003178 <sniprintf>
 8002064:	4603      	mov	r3, r0
 8002066:	4a24      	ldr	r2, [pc, #144]	@ (80020f8 <task_sensor_init+0x1c8>)
 8002068:	6013      	str	r3, [r2, #0]
 800206a:	4b21      	ldr	r3, [pc, #132]	@ (80020f0 <task_sensor_init+0x1c0>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fcc4 	bl	80019fc <logger_log_print_>
 8002074:	b662      	cpsie	i

	/* Init & Print out: Task execution counter */
	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8002076:	4b29      	ldr	r3, [pc, #164]	@ (800211c <task_sensor_init+0x1ec>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
	LOGGER_INFO("   %s = %lu", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 800207c:	b672      	cpsid	i
 800207e:	4b1c      	ldr	r3, [pc, #112]	@ (80020f0 <task_sensor_init+0x1c0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <task_sensor_init+0x1c4>)
 8002084:	213f      	movs	r1, #63	@ 0x3f
 8002086:	4618      	mov	r0, r3
 8002088:	f001 f876 	bl	8003178 <sniprintf>
 800208c:	4603      	mov	r3, r0
 800208e:	4a1a      	ldr	r2, [pc, #104]	@ (80020f8 <task_sensor_init+0x1c8>)
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	4b17      	ldr	r3, [pc, #92]	@ (80020f0 <task_sensor_init+0x1c0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fcb0 	bl	80019fc <logger_log_print_>
 800209c:	b662      	cpsie	i
 800209e:	b672      	cpsid	i
 80020a0:	4b13      	ldr	r3, [pc, #76]	@ (80020f0 <task_sensor_init+0x1c0>)
 80020a2:	6818      	ldr	r0, [r3, #0]
 80020a4:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <task_sensor_init+0x1ec>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <task_sensor_init+0x1f0>)
 80020ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002124 <task_sensor_init+0x1f4>)
 80020ae:	213f      	movs	r1, #63	@ 0x3f
 80020b0:	f001 f862 	bl	8003178 <sniprintf>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a10      	ldr	r2, [pc, #64]	@ (80020f8 <task_sensor_init+0x1c8>)
 80020b8:	6013      	str	r3, [r2, #0]
 80020ba:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <task_sensor_init+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fc9c 	bl	80019fc <logger_log_print_>
 80020c4:	b662      	cpsie	i
 80020c6:	b672      	cpsid	i
 80020c8:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <task_sensor_init+0x1c0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0c      	ldr	r2, [pc, #48]	@ (8002100 <task_sensor_init+0x1d0>)
 80020ce:	213f      	movs	r1, #63	@ 0x3f
 80020d0:	4618      	mov	r0, r3
 80020d2:	f001 f851 	bl	8003178 <sniprintf>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a07      	ldr	r2, [pc, #28]	@ (80020f8 <task_sensor_init+0x1c8>)
 80020da:	6013      	str	r3, [r2, #0]
 80020dc:	4b04      	ldr	r3, [pc, #16]	@ (80020f0 <task_sensor_init+0x1c0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fc8b 	bl	80019fc <logger_log_print_>
 80020e6:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e09e      	b.n	800222c <task_sensor_init+0x2fc>
 80020ee:	bf00      	nop
 80020f0:	080044f4 	.word	0x080044f4
 80020f4:	080042e8 	.word	0x080042e8
 80020f8:	2000015c 	.word	0x2000015c
 80020fc:	080042f0 	.word	0x080042f0
 8002100:	080042f4 	.word	0x080042f4
 8002104:	20000024 	.word	0x20000024
 8002108:	080042f8 	.word	0x080042f8
 800210c:	0800430c 	.word	0x0800430c
 8002110:	20000028 	.word	0x20000028
 8002114:	08004324 	.word	0x08004324
 8002118:	08004330 	.word	0x08004330
 800211c:	20000170 	.word	0x20000170
 8002120:	08004340 	.word	0x08004340
 8002124:	08004354 	.word	0x08004354
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4a44      	ldr	r2, [pc, #272]	@ (8002240 <task_sensor_init+0x310>)
 800212e:	4413      	add	r3, r2
 8002130:	613b      	str	r3, [r7, #16]

		/* Init & Print out: Index & Task execution FSM */
		state = ST_BTN_XX_UP;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
		p_task_sensor_dta->state = state;
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	711a      	strb	r2, [r3, #4]

		event = EV_BTN_XX_UP;
 800213c:	2300      	movs	r3, #0
 800213e:	73bb      	strb	r3, [r7, #14]
		p_task_sensor_dta->event = event;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	7bba      	ldrb	r2, [r7, #14]
 8002144:	715a      	strb	r2, [r3, #5]

		LOGGER_INFO(" ");
 8002146:	b672      	cpsid	i
 8002148:	4b3e      	ldr	r3, [pc, #248]	@ (8002244 <task_sensor_init+0x314>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a3e      	ldr	r2, [pc, #248]	@ (8002248 <task_sensor_init+0x318>)
 800214e:	213f      	movs	r1, #63	@ 0x3f
 8002150:	4618      	mov	r0, r3
 8002152:	f001 f811 	bl	8003178 <sniprintf>
 8002156:	4603      	mov	r3, r0
 8002158:	4a3c      	ldr	r2, [pc, #240]	@ (800224c <task_sensor_init+0x31c>)
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b39      	ldr	r3, [pc, #228]	@ (8002244 <task_sensor_init+0x314>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff fc4b 	bl	80019fc <logger_log_print_>
 8002166:	b662      	cpsie	i
 8002168:	b672      	cpsid	i
 800216a:	4b36      	ldr	r3, [pc, #216]	@ (8002244 <task_sensor_init+0x314>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a38      	ldr	r2, [pc, #224]	@ (8002250 <task_sensor_init+0x320>)
 8002170:	213f      	movs	r1, #63	@ 0x3f
 8002172:	4618      	mov	r0, r3
 8002174:	f001 f800 	bl	8003178 <sniprintf>
 8002178:	4603      	mov	r3, r0
 800217a:	4a34      	ldr	r2, [pc, #208]	@ (800224c <task_sensor_init+0x31c>)
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	4b31      	ldr	r3, [pc, #196]	@ (8002244 <task_sensor_init+0x314>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fc3a 	bl	80019fc <logger_log_print_>
 8002188:	b662      	cpsie	i
 800218a:	b672      	cpsid	i
 800218c:	4b2d      	ldr	r3, [pc, #180]	@ (8002244 <task_sensor_init+0x314>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a30      	ldr	r2, [pc, #192]	@ (8002254 <task_sensor_init+0x324>)
 8002192:	213f      	movs	r1, #63	@ 0x3f
 8002194:	4618      	mov	r0, r3
 8002196:	f000 ffef 	bl	8003178 <sniprintf>
 800219a:	4603      	mov	r3, r0
 800219c:	4a2b      	ldr	r2, [pc, #172]	@ (800224c <task_sensor_init+0x31c>)
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b28      	ldr	r3, [pc, #160]	@ (8002244 <task_sensor_init+0x314>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc29 	bl	80019fc <logger_log_print_>
 80021aa:	b662      	cpsie	i
		LOGGER_INFO("   %s = %lu   %s = %lu   %s = %lu",
 80021ac:	b672      	cpsid	i
 80021ae:	4b25      	ldr	r3, [pc, #148]	@ (8002244 <task_sensor_init+0x314>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a25      	ldr	r2, [pc, #148]	@ (8002248 <task_sensor_init+0x318>)
 80021b4:	213f      	movs	r1, #63	@ 0x3f
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 ffde 	bl	8003178 <sniprintf>
 80021bc:	4603      	mov	r3, r0
 80021be:	4a23      	ldr	r2, [pc, #140]	@ (800224c <task_sensor_init+0x31c>)
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	4b20      	ldr	r3, [pc, #128]	@ (8002244 <task_sensor_init+0x314>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fc18 	bl	80019fc <logger_log_print_>
 80021cc:	b662      	cpsie	i
 80021ce:	b672      	cpsid	i
 80021d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002244 <task_sensor_init+0x314>)
 80021d2:	6818      	ldr	r0, [r3, #0]
 80021d4:	7bfb      	ldrb	r3, [r7, #15]
 80021d6:	7bba      	ldrb	r2, [r7, #14]
 80021d8:	9204      	str	r2, [sp, #16]
 80021da:	4a1f      	ldr	r2, [pc, #124]	@ (8002258 <task_sensor_init+0x328>)
 80021dc:	9203      	str	r2, [sp, #12]
 80021de:	9302      	str	r3, [sp, #8]
 80021e0:	4b1e      	ldr	r3, [pc, #120]	@ (800225c <task_sensor_init+0x32c>)
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002260 <task_sensor_init+0x330>)
 80021ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002264 <task_sensor_init+0x334>)
 80021ec:	213f      	movs	r1, #63	@ 0x3f
 80021ee:	f000 ffc3 	bl	8003178 <sniprintf>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4a15      	ldr	r2, [pc, #84]	@ (800224c <task_sensor_init+0x31c>)
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b12      	ldr	r3, [pc, #72]	@ (8002244 <task_sensor_init+0x314>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff fbfd 	bl	80019fc <logger_log_print_>
 8002202:	b662      	cpsie	i
 8002204:	b672      	cpsid	i
 8002206:	4b0f      	ldr	r3, [pc, #60]	@ (8002244 <task_sensor_init+0x314>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a12      	ldr	r2, [pc, #72]	@ (8002254 <task_sensor_init+0x324>)
 800220c:	213f      	movs	r1, #63	@ 0x3f
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ffb2 	bl	8003178 <sniprintf>
 8002214:	4603      	mov	r3, r0
 8002216:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <task_sensor_init+0x31c>)
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b0a      	ldr	r3, [pc, #40]	@ (8002244 <task_sensor_init+0x314>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fbec 	bl	80019fc <logger_log_print_>
 8002224:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	3301      	adds	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f43f af7a 	beq.w	8002128 <task_sensor_init+0x1f8>
				    GET_NAME(index), index,
					GET_NAME(state), (uint32_t)state,
					GET_NAME(event), (uint32_t)event);
	}
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20000168 	.word	0x20000168
 8002244:	080044f4 	.word	0x080044f4
 8002248:	080042e8 	.word	0x080042e8
 800224c:	2000015c 	.word	0x2000015c
 8002250:	080042f0 	.word	0x080042f0
 8002254:	080042f4 	.word	0x080042f4
 8002258:	0800438c 	.word	0x0800438c
 800225c:	08004394 	.word	0x08004394
 8002260:	08004360 	.word	0x08004360
 8002264:	08004368 	.word	0x08004368

08002268 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8002270:	2300      	movs	r3, #0
 8002272:	73fb      	strb	r3, [r7, #15]

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 8002274:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <task_sensor_update+0x68>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <task_sensor_update+0x24>
    {
		/* Update Tick Counter */
    	g_task_sensor_tick_cnt--;
 800227e:	4b14      	ldr	r3, [pc, #80]	@ (80022d0 <task_sensor_update+0x68>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	4a12      	ldr	r2, [pc, #72]	@ (80022d0 <task_sensor_update+0x68>)
 8002286:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts */
 800228c:	b662      	cpsie	i

    while (b_time_update_required)
 800228e:	e016      	b.n	80022be <task_sensor_update+0x56>
    {
		/* Update Task Counter */
		g_task_sensor_cnt++;
 8002290:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <task_sensor_update+0x6c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	4a0f      	ldr	r2, [pc, #60]	@ (80022d4 <task_sensor_update+0x6c>)
 8002298:	6013      	str	r3, [r2, #0]

		/* Run Task Statechart */
    	task_sensor_statechart();
 800229a:	f000 f81d 	bl	80022d8 <task_sensor_statechart>

    	/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 800229e:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80022a0:	4b0b      	ldr	r3, [pc, #44]	@ (80022d0 <task_sensor_update+0x68>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d007      	beq.n	80022b8 <task_sensor_update+0x50>
		{
			/* Update Tick Counter */
			g_task_sensor_tick_cnt--;
 80022a8:	4b09      	ldr	r3, [pc, #36]	@ (80022d0 <task_sensor_update+0x68>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	4a08      	ldr	r2, [pc, #32]	@ (80022d0 <task_sensor_update+0x68>)
 80022b0:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73fb      	strb	r3, [r7, #15]
 80022b6:	e001      	b.n	80022bc <task_sensor_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 80022b8:	2300      	movs	r3, #0
 80022ba:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts */
 80022bc:	b662      	cpsie	i
    while (b_time_update_required)
 80022be:	7bfb      	ldrb	r3, [r7, #15]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e5      	bne.n	8002290 <task_sensor_update+0x28>
    }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000174 	.word	0x20000174
 80022d4:	20000170 	.word	0x20000170

080022d8 <task_sensor_statechart>:

void task_sensor_statechart(void)
{
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	e05b      	b.n	800239c <task_sensor_statechart+0xc4>
	{
		/* Update Task Sensor Configuration & Data Pointer */
		p_task_sensor_cfg = &task_sensor_cfg_list[index];
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4a2f      	ldr	r2, [pc, #188]	@ (80023ac <task_sensor_statechart+0xd4>)
 80022f0:	4413      	add	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
		p_task_sensor_dta = &task_sensor_dta_list[index];
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4a2d      	ldr	r2, [pc, #180]	@ (80023b0 <task_sensor_statechart+0xd8>)
 80022fa:	4413      	add	r3, r2
 80022fc:	607b      	str	r3, [r7, #4]

		if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	7a9c      	ldrb	r4, [r3, #10]
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	685a      	ldr	r2, [r3, #4]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	891b      	ldrh	r3, [r3, #8]
 800230a:	4619      	mov	r1, r3
 800230c:	4610      	mov	r0, r2
 800230e:	f7fe fc17 	bl	8000b40 <HAL_GPIO_ReadPin>
 8002312:	4603      	mov	r3, r0
 8002314:	429c      	cmp	r4, r3
 8002316:	d103      	bne.n	8002320 <task_sensor_statechart+0x48>
		{
			p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	715a      	strb	r2, [r3, #5]
 800231e:	e002      	b.n	8002326 <task_sensor_statechart+0x4e>
		}
		else
		{
			p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_sensor_dta->state)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	791b      	ldrb	r3, [r3, #4]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d824      	bhi.n	8002378 <task_sensor_statechart+0xa0>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <task_sensor_statechart+0x5c>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800238d 	.word	0x0800238d
 800233c:	0800235f 	.word	0x0800235f
 8002340:	0800238d 	.word	0x0800238d
		{
			case ST_BTN_XX_UP:

				if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	795b      	ldrb	r3, [r3, #5]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d121      	bne.n	8002390 <task_sensor_statechart+0xb8>
				{
					put_event_task_system(p_task_sensor_cfg->signal_down);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	7c5b      	ldrb	r3, [r3, #17]
 8002350:	4618      	mov	r0, r3
 8002352:	f000 fa8b 	bl	800286c <put_event_task_system>
					p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2202      	movs	r2, #2
 800235a:	711a      	strb	r2, [r3, #4]
				}

				break;
 800235c:	e018      	b.n	8002390 <task_sensor_statechart+0xb8>

				break;

			case ST_BTN_XX_DOWN:

				if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	795b      	ldrb	r3, [r3, #5]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d116      	bne.n	8002394 <task_sensor_statechart+0xbc>
				{
					put_event_task_system(p_task_sensor_cfg->signal_up);
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	7c1b      	ldrb	r3, [r3, #16]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fa7e 	bl	800286c <put_event_task_system>
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	711a      	strb	r2, [r3, #4]
				}

				break;
 8002376:	e00d      	b.n	8002394 <task_sensor_statechart+0xbc>

				break;

			default:

				p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
				p_task_sensor_dta->state = ST_BTN_XX_UP;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	711a      	strb	r2, [r3, #4]
				p_task_sensor_dta->event = EV_BTN_XX_UP;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	715a      	strb	r2, [r3, #5]

				break;
 800238a:	e004      	b.n	8002396 <task_sensor_statechart+0xbe>
				break;
 800238c:	bf00      	nop
 800238e:	e002      	b.n	8002396 <task_sensor_statechart+0xbe>
				break;
 8002390:	bf00      	nop
 8002392:	e000      	b.n	8002396 <task_sensor_statechart+0xbe>
				break;
 8002394:	bf00      	nop
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3301      	adds	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0a0      	beq.n	80022e4 <task_sensor_statechart+0xc>
		}
	}
}
 80023a2:	bf00      	nop
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}
 80023ac:	0800450c 	.word	0x0800450c
 80023b0:	20000168 	.word	0x20000168

080023b4 <task_system_init>:
uint32_t g_task_system_cnt;
volatile uint32_t g_task_system_tick_cnt;

/********************** external functions definition ************************/
void task_system_init(void *parameters)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	@ 0x28
 80023b8:	af06      	add	r7, sp, #24
 80023ba:	6078      	str	r0, [r7, #4]
	task_system_st_t	state;
	task_system_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_INFO(" ");
 80023bc:	b672      	cpsid	i
 80023be:	4b9c      	ldr	r3, [pc, #624]	@ (8002630 <task_system_init+0x27c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a9c      	ldr	r2, [pc, #624]	@ (8002634 <task_system_init+0x280>)
 80023c4:	213f      	movs	r1, #63	@ 0x3f
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 fed6 	bl	8003178 <sniprintf>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002638 <task_system_init+0x284>)
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	4b97      	ldr	r3, [pc, #604]	@ (8002630 <task_system_init+0x27c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fb10 	bl	80019fc <logger_log_print_>
 80023dc:	b662      	cpsie	i
 80023de:	b672      	cpsid	i
 80023e0:	4b93      	ldr	r3, [pc, #588]	@ (8002630 <task_system_init+0x27c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a95      	ldr	r2, [pc, #596]	@ (800263c <task_system_init+0x288>)
 80023e6:	213f      	movs	r1, #63	@ 0x3f
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fec5 	bl	8003178 <sniprintf>
 80023ee:	4603      	mov	r3, r0
 80023f0:	4a91      	ldr	r2, [pc, #580]	@ (8002638 <task_system_init+0x284>)
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b8e      	ldr	r3, [pc, #568]	@ (8002630 <task_system_init+0x27c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff faff 	bl	80019fc <logger_log_print_>
 80023fe:	b662      	cpsie	i
 8002400:	b672      	cpsid	i
 8002402:	4b8b      	ldr	r3, [pc, #556]	@ (8002630 <task_system_init+0x27c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a8e      	ldr	r2, [pc, #568]	@ (8002640 <task_system_init+0x28c>)
 8002408:	213f      	movs	r1, #63	@ 0x3f
 800240a:	4618      	mov	r0, r3
 800240c:	f000 feb4 	bl	8003178 <sniprintf>
 8002410:	4603      	mov	r3, r0
 8002412:	4a89      	ldr	r2, [pc, #548]	@ (8002638 <task_system_init+0x284>)
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b86      	ldr	r3, [pc, #536]	@ (8002630 <task_system_init+0x27c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff faee 	bl	80019fc <logger_log_print_>
 8002420:	b662      	cpsie	i
	LOGGER_INFO("  %s is running - %s", GET_NAME(task_system_init), p_task_system);
 8002422:	b672      	cpsid	i
 8002424:	4b82      	ldr	r3, [pc, #520]	@ (8002630 <task_system_init+0x27c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a82      	ldr	r2, [pc, #520]	@ (8002634 <task_system_init+0x280>)
 800242a:	213f      	movs	r1, #63	@ 0x3f
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fea3 	bl	8003178 <sniprintf>
 8002432:	4603      	mov	r3, r0
 8002434:	4a80      	ldr	r2, [pc, #512]	@ (8002638 <task_system_init+0x284>)
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	4b7d      	ldr	r3, [pc, #500]	@ (8002630 <task_system_init+0x27c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff fadd 	bl	80019fc <logger_log_print_>
 8002442:	b662      	cpsie	i
 8002444:	b672      	cpsid	i
 8002446:	4b7a      	ldr	r3, [pc, #488]	@ (8002630 <task_system_init+0x27c>)
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	4b7e      	ldr	r3, [pc, #504]	@ (8002644 <task_system_init+0x290>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	4b7d      	ldr	r3, [pc, #500]	@ (8002648 <task_system_init+0x294>)
 8002452:	4a7e      	ldr	r2, [pc, #504]	@ (800264c <task_system_init+0x298>)
 8002454:	213f      	movs	r1, #63	@ 0x3f
 8002456:	f000 fe8f 	bl	8003178 <sniprintf>
 800245a:	4603      	mov	r3, r0
 800245c:	4a76      	ldr	r2, [pc, #472]	@ (8002638 <task_system_init+0x284>)
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b73      	ldr	r3, [pc, #460]	@ (8002630 <task_system_init+0x27c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fac9 	bl	80019fc <logger_log_print_>
 800246a:	b662      	cpsie	i
 800246c:	b672      	cpsid	i
 800246e:	4b70      	ldr	r3, [pc, #448]	@ (8002630 <task_system_init+0x27c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a73      	ldr	r2, [pc, #460]	@ (8002640 <task_system_init+0x28c>)
 8002474:	213f      	movs	r1, #63	@ 0x3f
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fe7e 	bl	8003178 <sniprintf>
 800247c:	4603      	mov	r3, r0
 800247e:	4a6e      	ldr	r2, [pc, #440]	@ (8002638 <task_system_init+0x284>)
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6b      	ldr	r3, [pc, #428]	@ (8002630 <task_system_init+0x27c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fab8 	bl	80019fc <logger_log_print_>
 800248c:	b662      	cpsie	i
	LOGGER_INFO("  %s is a %s", GET_NAME(task_system), p_task_system_);
 800248e:	b672      	cpsid	i
 8002490:	4b67      	ldr	r3, [pc, #412]	@ (8002630 <task_system_init+0x27c>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a67      	ldr	r2, [pc, #412]	@ (8002634 <task_system_init+0x280>)
 8002496:	213f      	movs	r1, #63	@ 0x3f
 8002498:	4618      	mov	r0, r3
 800249a:	f000 fe6d 	bl	8003178 <sniprintf>
 800249e:	4603      	mov	r3, r0
 80024a0:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <task_system_init+0x284>)
 80024a2:	6013      	str	r3, [r2, #0]
 80024a4:	4b62      	ldr	r3, [pc, #392]	@ (8002630 <task_system_init+0x27c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff faa7 	bl	80019fc <logger_log_print_>
 80024ae:	b662      	cpsie	i
 80024b0:	b672      	cpsid	i
 80024b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002630 <task_system_init+0x27c>)
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <task_system_init+0x29c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <task_system_init+0x2a0>)
 80024be:	4a66      	ldr	r2, [pc, #408]	@ (8002658 <task_system_init+0x2a4>)
 80024c0:	213f      	movs	r1, #63	@ 0x3f
 80024c2:	f000 fe59 	bl	8003178 <sniprintf>
 80024c6:	4603      	mov	r3, r0
 80024c8:	4a5b      	ldr	r2, [pc, #364]	@ (8002638 <task_system_init+0x284>)
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	4b58      	ldr	r3, [pc, #352]	@ (8002630 <task_system_init+0x27c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fa93 	bl	80019fc <logger_log_print_>
 80024d6:	b662      	cpsie	i
 80024d8:	b672      	cpsid	i
 80024da:	4b55      	ldr	r3, [pc, #340]	@ (8002630 <task_system_init+0x27c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a58      	ldr	r2, [pc, #352]	@ (8002640 <task_system_init+0x28c>)
 80024e0:	213f      	movs	r1, #63	@ 0x3f
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 fe48 	bl	8003178 <sniprintf>
 80024e8:	4603      	mov	r3, r0
 80024ea:	4a53      	ldr	r2, [pc, #332]	@ (8002638 <task_system_init+0x284>)
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <task_system_init+0x27c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff fa82 	bl	80019fc <logger_log_print_>
 80024f8:	b662      	cpsie	i

	/* Init & Print out: Task execution counter */
	g_task_system_cnt = G_TASK_SYS_CNT_INI;
 80024fa:	4b58      	ldr	r3, [pc, #352]	@ (800265c <task_system_init+0x2a8>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
	LOGGER_INFO("   %s = %lu", GET_NAME(g_task_system_cnt), g_task_system_cnt);
 8002500:	b672      	cpsid	i
 8002502:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <task_system_init+0x27c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4b      	ldr	r2, [pc, #300]	@ (8002634 <task_system_init+0x280>)
 8002508:	213f      	movs	r1, #63	@ 0x3f
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fe34 	bl	8003178 <sniprintf>
 8002510:	4603      	mov	r3, r0
 8002512:	4a49      	ldr	r2, [pc, #292]	@ (8002638 <task_system_init+0x284>)
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b46      	ldr	r3, [pc, #280]	@ (8002630 <task_system_init+0x27c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fa6e 	bl	80019fc <logger_log_print_>
 8002520:	b662      	cpsie	i
 8002522:	b672      	cpsid	i
 8002524:	4b42      	ldr	r3, [pc, #264]	@ (8002630 <task_system_init+0x27c>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	4b4c      	ldr	r3, [pc, #304]	@ (800265c <task_system_init+0x2a8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	9300      	str	r3, [sp, #0]
 800252e:	4b4c      	ldr	r3, [pc, #304]	@ (8002660 <task_system_init+0x2ac>)
 8002530:	4a4c      	ldr	r2, [pc, #304]	@ (8002664 <task_system_init+0x2b0>)
 8002532:	213f      	movs	r1, #63	@ 0x3f
 8002534:	f000 fe20 	bl	8003178 <sniprintf>
 8002538:	4603      	mov	r3, r0
 800253a:	4a3f      	ldr	r2, [pc, #252]	@ (8002638 <task_system_init+0x284>)
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	4b3c      	ldr	r3, [pc, #240]	@ (8002630 <task_system_init+0x27c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fa5a 	bl	80019fc <logger_log_print_>
 8002548:	b662      	cpsie	i
 800254a:	b672      	cpsid	i
 800254c:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <task_system_init+0x27c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a3b      	ldr	r2, [pc, #236]	@ (8002640 <task_system_init+0x28c>)
 8002552:	213f      	movs	r1, #63	@ 0x3f
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fe0f 	bl	8003178 <sniprintf>
 800255a:	4603      	mov	r3, r0
 800255c:	4a36      	ldr	r2, [pc, #216]	@ (8002638 <task_system_init+0x284>)
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <task_system_init+0x27c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff fa49 	bl	80019fc <logger_log_print_>
 800256a:	b662      	cpsie	i

	init_queue_event_task_system();
 800256c:	f000 f95a 	bl	8002824 <init_queue_event_task_system>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_system_dta = &task_system_dta;
 8002570:	4b3d      	ldr	r3, [pc, #244]	@ (8002668 <task_system_init+0x2b4>)
 8002572:	60fb      	str	r3, [r7, #12]

	/* Init & Print out: Task execution FSM */
	state = ST_SYS_IDLE;
 8002574:	2300      	movs	r3, #0
 8002576:	72fb      	strb	r3, [r7, #11]
	p_task_system_dta->state = state;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	7afa      	ldrb	r2, [r7, #11]
 800257c:	711a      	strb	r2, [r3, #4]

	event = EV_SYS_IDLE;
 800257e:	2300      	movs	r3, #0
 8002580:	72bb      	strb	r3, [r7, #10]
	p_task_system_dta->event = event;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	7aba      	ldrb	r2, [r7, #10]
 8002586:	715a      	strb	r2, [r3, #5]

	b_event = false;
 8002588:	2300      	movs	r3, #0
 800258a:	727b      	strb	r3, [r7, #9]
	p_task_system_dta->flag = b_event;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	7a7a      	ldrb	r2, [r7, #9]
 8002590:	719a      	strb	r2, [r3, #6]

	LOGGER_INFO(" ");
 8002592:	b672      	cpsid	i
 8002594:	4b26      	ldr	r3, [pc, #152]	@ (8002630 <task_system_init+0x27c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a26      	ldr	r2, [pc, #152]	@ (8002634 <task_system_init+0x280>)
 800259a:	213f      	movs	r1, #63	@ 0x3f
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fdeb 	bl	8003178 <sniprintf>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4a24      	ldr	r2, [pc, #144]	@ (8002638 <task_system_init+0x284>)
 80025a6:	6013      	str	r3, [r2, #0]
 80025a8:	4b21      	ldr	r3, [pc, #132]	@ (8002630 <task_system_init+0x27c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fa25 	bl	80019fc <logger_log_print_>
 80025b2:	b662      	cpsie	i
 80025b4:	b672      	cpsid	i
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <task_system_init+0x27c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a20      	ldr	r2, [pc, #128]	@ (800263c <task_system_init+0x288>)
 80025bc:	213f      	movs	r1, #63	@ 0x3f
 80025be:	4618      	mov	r0, r3
 80025c0:	f000 fdda 	bl	8003178 <sniprintf>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002638 <task_system_init+0x284>)
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <task_system_init+0x27c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fa14 	bl	80019fc <logger_log_print_>
 80025d4:	b662      	cpsie	i
 80025d6:	b672      	cpsid	i
 80025d8:	4b15      	ldr	r3, [pc, #84]	@ (8002630 <task_system_init+0x27c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a18      	ldr	r2, [pc, #96]	@ (8002640 <task_system_init+0x28c>)
 80025de:	213f      	movs	r1, #63	@ 0x3f
 80025e0:	4618      	mov	r0, r3
 80025e2:	f000 fdc9 	bl	8003178 <sniprintf>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4a13      	ldr	r2, [pc, #76]	@ (8002638 <task_system_init+0x284>)
 80025ea:	6013      	str	r3, [r2, #0]
 80025ec:	4b10      	ldr	r3, [pc, #64]	@ (8002630 <task_system_init+0x27c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fa03 	bl	80019fc <logger_log_print_>
 80025f6:	b662      	cpsie	i
	LOGGER_INFO("   %s = %lu   %s = %lu   %s = %s",
 80025f8:	b672      	cpsid	i
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <task_system_init+0x27c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <task_system_init+0x280>)
 8002600:	213f      	movs	r1, #63	@ 0x3f
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fdb8 	bl	8003178 <sniprintf>
 8002608:	4603      	mov	r3, r0
 800260a:	4a0b      	ldr	r2, [pc, #44]	@ (8002638 <task_system_init+0x284>)
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	4b08      	ldr	r3, [pc, #32]	@ (8002630 <task_system_init+0x27c>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff f9f2 	bl	80019fc <logger_log_print_>
 8002618:	b662      	cpsie	i
 800261a:	b672      	cpsid	i
 800261c:	4b04      	ldr	r3, [pc, #16]	@ (8002630 <task_system_init+0x27c>)
 800261e:	6818      	ldr	r0, [r3, #0]
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	7aba      	ldrb	r2, [r7, #10]
 8002624:	7a79      	ldrb	r1, [r7, #9]
 8002626:	2900      	cmp	r1, #0
 8002628:	d022      	beq.n	8002670 <task_system_init+0x2bc>
 800262a:	4910      	ldr	r1, [pc, #64]	@ (800266c <task_system_init+0x2b8>)
 800262c:	e021      	b.n	8002672 <task_system_init+0x2be>
 800262e:	bf00      	nop
 8002630:	080044f4 	.word	0x080044f4
 8002634:	080043e0 	.word	0x080043e0
 8002638:	2000015c 	.word	0x2000015c
 800263c:	080043e8 	.word	0x080043e8
 8002640:	080043ec 	.word	0x080043ec
 8002644:	2000002c 	.word	0x2000002c
 8002648:	080043f0 	.word	0x080043f0
 800264c:	08004404 	.word	0x08004404
 8002650:	20000030 	.word	0x20000030
 8002654:	0800441c 	.word	0x0800441c
 8002658:	08004428 	.word	0x08004428
 800265c:	20000180 	.word	0x20000180
 8002660:	08004438 	.word	0x08004438
 8002664:	0800444c 	.word	0x0800444c
 8002668:	20000178 	.word	0x20000178
 800266c:	08004458 	.word	0x08004458
 8002670:	4915      	ldr	r1, [pc, #84]	@ (80026c8 <task_system_init+0x314>)
 8002672:	9104      	str	r1, [sp, #16]
 8002674:	4915      	ldr	r1, [pc, #84]	@ (80026cc <task_system_init+0x318>)
 8002676:	9103      	str	r1, [sp, #12]
 8002678:	9202      	str	r2, [sp, #8]
 800267a:	4a15      	ldr	r2, [pc, #84]	@ (80026d0 <task_system_init+0x31c>)
 800267c:	9201      	str	r2, [sp, #4]
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <task_system_init+0x320>)
 8002682:	4a15      	ldr	r2, [pc, #84]	@ (80026d8 <task_system_init+0x324>)
 8002684:	213f      	movs	r1, #63	@ 0x3f
 8002686:	f000 fd77 	bl	8003178 <sniprintf>
 800268a:	4603      	mov	r3, r0
 800268c:	4a13      	ldr	r2, [pc, #76]	@ (80026dc <task_system_init+0x328>)
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b13      	ldr	r3, [pc, #76]	@ (80026e0 <task_system_init+0x32c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff f9b1 	bl	80019fc <logger_log_print_>
 800269a:	b662      	cpsie	i
 800269c:	b672      	cpsid	i
 800269e:	4b10      	ldr	r3, [pc, #64]	@ (80026e0 <task_system_init+0x32c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <task_system_init+0x330>)
 80026a4:	213f      	movs	r1, #63	@ 0x3f
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 fd66 	bl	8003178 <sniprintf>
 80026ac:	4603      	mov	r3, r0
 80026ae:	4a0b      	ldr	r2, [pc, #44]	@ (80026dc <task_system_init+0x328>)
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <task_system_init+0x32c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f9a0 	bl	80019fc <logger_log_print_>
 80026bc:	b662      	cpsie	i
				 GET_NAME(state), (uint32_t)state,
				 GET_NAME(event), (uint32_t)event,
				 GET_NAME(b_event), (b_event ? "true" : "false"));
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	08004460 	.word	0x08004460
 80026cc:	08004494 	.word	0x08004494
 80026d0:	0800449c 	.word	0x0800449c
 80026d4:	08004468 	.word	0x08004468
 80026d8:	08004470 	.word	0x08004470
 80026dc:	2000015c 	.word	0x2000015c
 80026e0:	080044f4 	.word	0x080044f4
 80026e4:	080043ec 	.word	0x080043ec

080026e8 <task_system_update>:

void task_system_update(void *parameters)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]

	/* Protect shared resource */
	__asm("CPSID i");	/* disable interrupts */
 80026f4:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 80026f6:	4b16      	ldr	r3, [pc, #88]	@ (8002750 <task_system_update+0x68>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d006      	beq.n	800270c <task_system_update+0x24>
    {
		/* Update Tick Counter */
    	g_task_system_tick_cnt--;
 80026fe:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <task_system_update+0x68>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3b01      	subs	r3, #1
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <task_system_update+0x68>)
 8002706:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts */
 800270c:	b662      	cpsie	i

    while (b_time_update_required)
 800270e:	e016      	b.n	800273e <task_system_update+0x56>
    {
		/* Update Task Counter */
		g_task_system_cnt++;
 8002710:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <task_system_update+0x6c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	3301      	adds	r3, #1
 8002716:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <task_system_update+0x6c>)
 8002718:	6013      	str	r3, [r2, #0]

		/* Run Task Statechart */
    	task_system_statechart();
 800271a:	f000 f81d 	bl	8002758 <task_system_statechart>

    	/* Protect shared resource */
		__asm("CPSID i");	/* disable interrupts */
 800271e:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_system_tick_cnt)
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <task_system_update+0x68>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <task_system_update+0x50>
		{
			/* Update Tick Counter */
			g_task_system_tick_cnt--;
 8002728:	4b09      	ldr	r3, [pc, #36]	@ (8002750 <task_system_update+0x68>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3b01      	subs	r3, #1
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <task_system_update+0x68>)
 8002730:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
 8002736:	e001      	b.n	800273c <task_system_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts */
 800273c:	b662      	cpsie	i
    while (b_time_update_required)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1e5      	bne.n	8002710 <task_system_update+0x28>
    }
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000184 	.word	0x20000184
 8002754:	20000180 	.word	0x20000180

08002758 <task_system_statechart>:

void task_system_statechart(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
	task_system_dta_t *p_task_system_dta;

	/* Update Task System Data Pointer */
	p_task_system_dta = &task_system_dta;
 800275e:	4b30      	ldr	r3, [pc, #192]	@ (8002820 <task_system_statechart+0xc8>)
 8002760:	607b      	str	r3, [r7, #4]

	if (true == any_event_task_system())
 8002762:	f000 f8cb 	bl	80028fc <any_event_task_system>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <task_system_statechart+0x26>
	{
		p_task_system_dta->flag = true;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	719a      	strb	r2, [r3, #6]
		p_task_system_dta->event = get_event_task_system();
 8002772:	f000 f89d 	bl	80028b0 <get_event_task_system>
 8002776:	4603      	mov	r3, r0
 8002778:	461a      	mov	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	715a      	strb	r2, [r3, #5]
	}

	switch (p_task_system_dta->state)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	791b      	ldrb	r3, [r3, #4]
 8002782:	2b06      	cmp	r3, #6
 8002784:	d836      	bhi.n	80027f4 <task_system_statechart+0x9c>
 8002786:	a201      	add	r2, pc, #4	@ (adr r2, 800278c <task_system_statechart+0x34>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	080027a9 	.word	0x080027a9
 8002790:	080027cf 	.word	0x080027cf
 8002794:	0800280f 	.word	0x0800280f
 8002798:	0800280f 	.word	0x0800280f
 800279c:	0800280f 	.word	0x0800280f
 80027a0:	0800280f 	.word	0x0800280f
 80027a4:	0800280f 	.word	0x0800280f
	{
		case ST_SYS_IDLE:

			if ((true == p_task_system_dta->flag) && (EV_SYS_LOOP_DET == p_task_system_dta->event))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	799b      	ldrb	r3, [r3, #6]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d030      	beq.n	8002812 <task_system_statechart+0xba>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	795b      	ldrb	r3, [r3, #5]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d12c      	bne.n	8002812 <task_system_statechart+0xba>
			{
				p_task_system_dta->flag = false;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_ON, ID_LED_A);
 80027be:	2100      	movs	r1, #0
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff fb9b 	bl	8001efc <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_ACTIVE_01;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	711a      	strb	r2, [r3, #4]
			}

			break;
 80027cc:	e021      	b.n	8002812 <task_system_statechart+0xba>

		case ST_SYS_ACTIVE_01:

			if ((true == p_task_system_dta->flag) && (EV_SYS_IDLE == p_task_system_dta->event))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	799b      	ldrb	r3, [r3, #6]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <task_system_statechart+0xbe>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	795b      	ldrb	r3, [r3, #5]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d11b      	bne.n	8002816 <task_system_statechart+0xbe>
			{
				p_task_system_dta->flag = false;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_LED_A);
 80027e4:	2100      	movs	r1, #0
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7ff fb88 	bl	8001efc <put_event_task_actuator>
				p_task_system_dta->state = ST_SYS_IDLE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	711a      	strb	r2, [r3, #4]
			}

			break;
 80027f2:	e010      	b.n	8002816 <task_system_statechart+0xbe>

			break;

		default:

			p_task_system_dta->tick  = DEL_SYS_MIN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
			p_task_system_dta->state = ST_SYS_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	711a      	strb	r2, [r3, #4]
			p_task_system_dta->event = EV_SYS_IDLE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	715a      	strb	r2, [r3, #5]
			p_task_system_dta->flag = false;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	719a      	strb	r2, [r3, #6]

			break;
 800280c:	e004      	b.n	8002818 <task_system_statechart+0xc0>
			break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <task_system_statechart+0xc0>
			break;
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <task_system_statechart+0xc0>
			break;
 8002816:	bf00      	nop
	}
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000178 	.word	0x20000178

08002824 <init_queue_event_task_system>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_system(void)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 800282a:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <init_queue_event_task_system+0x44>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8002830:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <init_queue_event_task_system+0x44>)
 8002832:	2200      	movs	r2, #0
 8002834:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8002836:	4b0c      	ldr	r3, [pc, #48]	@ (8002868 <init_queue_event_task_system+0x44>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 800283c:	2300      	movs	r3, #0
 800283e:	607b      	str	r3, [r7, #4]
 8002840:	e008      	b.n	8002854 <init_queue_event_task_system+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002842:	4a09      	ldr	r2, [pc, #36]	@ (8002868 <init_queue_event_task_system+0x44>)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	330c      	adds	r3, #12
 800284a:	22ff      	movs	r2, #255	@ 0xff
 800284c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3301      	adds	r3, #1
 8002852:	607b      	str	r3, [r7, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b0f      	cmp	r3, #15
 8002858:	d9f3      	bls.n	8002842 <init_queue_event_task_system+0x1e>
}
 800285a:	bf00      	nop
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	20000188 	.word	0x20000188

0800286c <put_event_task_system>:

void put_event_task_system(task_system_ev_t event)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002876:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <put_event_task_system+0x40>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	3301      	adds	r3, #1
 800287c:	4a0b      	ldr	r2, [pc, #44]	@ (80028ac <put_event_task_system+0x40>)
 800287e:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002880:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <put_event_task_system+0x40>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1c5a      	adds	r2, r3, #1
 8002886:	4909      	ldr	r1, [pc, #36]	@ (80028ac <put_event_task_system+0x40>)
 8002888:	600a      	str	r2, [r1, #0]
 800288a:	4a08      	ldr	r2, [pc, #32]	@ (80028ac <put_event_task_system+0x40>)
 800288c:	4413      	add	r3, r2
 800288e:	79fa      	ldrb	r2, [r7, #7]
 8002890:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <put_event_task_system+0x40>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b10      	cmp	r3, #16
 8002898:	d102      	bne.n	80028a0 <put_event_task_system+0x34>
		queue_task_a.head = 0;
 800289a:	4b04      	ldr	r3, [pc, #16]	@ (80028ac <put_event_task_system+0x40>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000188 	.word	0x20000188

080028b0 <get_event_task_system>:

task_system_ev_t get_event_task_system(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
	task_system_ev_t event;

	queue_task_a.count--;
 80028b6:	4b10      	ldr	r3, [pc, #64]	@ (80028f8 <get_event_task_system+0x48>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	4a0e      	ldr	r2, [pc, #56]	@ (80028f8 <get_event_task_system+0x48>)
 80028be:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <get_event_task_system+0x48>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <get_event_task_system+0x48>)
 80028c6:	4413      	add	r3, r2
 80028c8:	7b1b      	ldrb	r3, [r3, #12]
 80028ca:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 80028cc:	4b0a      	ldr	r3, [pc, #40]	@ (80028f8 <get_event_task_system+0x48>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	1c5a      	adds	r2, r3, #1
 80028d2:	4909      	ldr	r1, [pc, #36]	@ (80028f8 <get_event_task_system+0x48>)
 80028d4:	604a      	str	r2, [r1, #4]
 80028d6:	4a08      	ldr	r2, [pc, #32]	@ (80028f8 <get_event_task_system+0x48>)
 80028d8:	4413      	add	r3, r2
 80028da:	22ff      	movs	r2, #255	@ 0xff
 80028dc:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <get_event_task_system+0x48>)
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d102      	bne.n	80028ec <get_event_task_system+0x3c>
		queue_task_a.tail = 0;
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <get_event_task_system+0x48>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	605a      	str	r2, [r3, #4]

	return event;
 80028ec:	79fb      	ldrb	r3, [r7, #7]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bc80      	pop	{r7}
 80028f6:	4770      	bx	lr
 80028f8:	20000188 	.word	0x20000188

080028fc <any_event_task_system>:

bool any_event_task_system(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <any_event_task_system+0x20>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <any_event_task_system+0x20>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	429a      	cmp	r2, r3
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bc80      	pop	{r7}
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000188 	.word	0x20000188

08002920 <findslot>:
 8002920:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <findslot+0x2c>)
 8002922:	b510      	push	{r4, lr}
 8002924:	4604      	mov	r4, r0
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	b118      	cbz	r0, 8002932 <findslot+0x12>
 800292a:	6a03      	ldr	r3, [r0, #32]
 800292c:	b90b      	cbnz	r3, 8002932 <findslot+0x12>
 800292e:	f000 fbdb 	bl	80030e8 <__sinit>
 8002932:	2c13      	cmp	r4, #19
 8002934:	d807      	bhi.n	8002946 <findslot+0x26>
 8002936:	4806      	ldr	r0, [pc, #24]	@ (8002950 <findslot+0x30>)
 8002938:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800293c:	3201      	adds	r2, #1
 800293e:	d002      	beq.n	8002946 <findslot+0x26>
 8002940:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002944:	bd10      	pop	{r4, pc}
 8002946:	2000      	movs	r0, #0
 8002948:	e7fc      	b.n	8002944 <findslot+0x24>
 800294a:	bf00      	nop
 800294c:	20000048 	.word	0x20000048
 8002950:	200001b0 	.word	0x200001b0

08002954 <error>:
 8002954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002956:	4604      	mov	r4, r0
 8002958:	f000 fcd6 	bl	8003308 <__errno>
 800295c:	2613      	movs	r6, #19
 800295e:	4605      	mov	r5, r0
 8002960:	2700      	movs	r7, #0
 8002962:	4630      	mov	r0, r6
 8002964:	4639      	mov	r1, r7
 8002966:	beab      	bkpt	0x00ab
 8002968:	4606      	mov	r6, r0
 800296a:	4620      	mov	r0, r4
 800296c:	602e      	str	r6, [r5, #0]
 800296e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002970 <checkerror>:
 8002970:	1c43      	adds	r3, r0, #1
 8002972:	d101      	bne.n	8002978 <checkerror+0x8>
 8002974:	f7ff bfee 	b.w	8002954 <error>
 8002978:	4770      	bx	lr

0800297a <_swiread>:
 800297a:	b530      	push	{r4, r5, lr}
 800297c:	b085      	sub	sp, #20
 800297e:	2406      	movs	r4, #6
 8002980:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002984:	9203      	str	r2, [sp, #12]
 8002986:	ad01      	add	r5, sp, #4
 8002988:	4620      	mov	r0, r4
 800298a:	4629      	mov	r1, r5
 800298c:	beab      	bkpt	0x00ab
 800298e:	4604      	mov	r4, r0
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff ffed 	bl	8002970 <checkerror>
 8002996:	b005      	add	sp, #20
 8002998:	bd30      	pop	{r4, r5, pc}

0800299a <_read>:
 800299a:	b570      	push	{r4, r5, r6, lr}
 800299c:	460e      	mov	r6, r1
 800299e:	4614      	mov	r4, r2
 80029a0:	f7ff ffbe 	bl	8002920 <findslot>
 80029a4:	4605      	mov	r5, r0
 80029a6:	b930      	cbnz	r0, 80029b6 <_read+0x1c>
 80029a8:	f000 fcae 	bl	8003308 <__errno>
 80029ac:	2309      	movs	r3, #9
 80029ae:	6003      	str	r3, [r0, #0]
 80029b0:	f04f 30ff 	mov.w	r0, #4294967295
 80029b4:	bd70      	pop	{r4, r5, r6, pc}
 80029b6:	4622      	mov	r2, r4
 80029b8:	4631      	mov	r1, r6
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	f7ff ffdd 	bl	800297a <_swiread>
 80029c0:	1c43      	adds	r3, r0, #1
 80029c2:	d0f5      	beq.n	80029b0 <_read+0x16>
 80029c4:	686b      	ldr	r3, [r5, #4]
 80029c6:	1a20      	subs	r0, r4, r0
 80029c8:	4403      	add	r3, r0
 80029ca:	606b      	str	r3, [r5, #4]
 80029cc:	e7f2      	b.n	80029b4 <_read+0x1a>

080029ce <_swilseek>:
 80029ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029d0:	460c      	mov	r4, r1
 80029d2:	4616      	mov	r6, r2
 80029d4:	f7ff ffa4 	bl	8002920 <findslot>
 80029d8:	4605      	mov	r5, r0
 80029da:	b940      	cbnz	r0, 80029ee <_swilseek+0x20>
 80029dc:	f000 fc94 	bl	8003308 <__errno>
 80029e0:	2309      	movs	r3, #9
 80029e2:	6003      	str	r3, [r0, #0]
 80029e4:	f04f 34ff 	mov.w	r4, #4294967295
 80029e8:	4620      	mov	r0, r4
 80029ea:	b003      	add	sp, #12
 80029ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029ee:	2e02      	cmp	r6, #2
 80029f0:	d903      	bls.n	80029fa <_swilseek+0x2c>
 80029f2:	f000 fc89 	bl	8003308 <__errno>
 80029f6:	2316      	movs	r3, #22
 80029f8:	e7f3      	b.n	80029e2 <_swilseek+0x14>
 80029fa:	2e01      	cmp	r6, #1
 80029fc:	d112      	bne.n	8002a24 <_swilseek+0x56>
 80029fe:	6843      	ldr	r3, [r0, #4]
 8002a00:	18e4      	adds	r4, r4, r3
 8002a02:	d4f6      	bmi.n	80029f2 <_swilseek+0x24>
 8002a04:	682b      	ldr	r3, [r5, #0]
 8002a06:	260a      	movs	r6, #10
 8002a08:	466f      	mov	r7, sp
 8002a0a:	e9cd 3400 	strd	r3, r4, [sp]
 8002a0e:	4630      	mov	r0, r6
 8002a10:	4639      	mov	r1, r7
 8002a12:	beab      	bkpt	0x00ab
 8002a14:	4606      	mov	r6, r0
 8002a16:	4630      	mov	r0, r6
 8002a18:	f7ff ffaa 	bl	8002970 <checkerror>
 8002a1c:	2800      	cmp	r0, #0
 8002a1e:	dbe1      	blt.n	80029e4 <_swilseek+0x16>
 8002a20:	606c      	str	r4, [r5, #4]
 8002a22:	e7e1      	b.n	80029e8 <_swilseek+0x1a>
 8002a24:	2e02      	cmp	r6, #2
 8002a26:	6803      	ldr	r3, [r0, #0]
 8002a28:	d1ec      	bne.n	8002a04 <_swilseek+0x36>
 8002a2a:	260c      	movs	r6, #12
 8002a2c:	466f      	mov	r7, sp
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4630      	mov	r0, r6
 8002a32:	4639      	mov	r1, r7
 8002a34:	beab      	bkpt	0x00ab
 8002a36:	4606      	mov	r6, r0
 8002a38:	4630      	mov	r0, r6
 8002a3a:	f7ff ff99 	bl	8002970 <checkerror>
 8002a3e:	1c43      	adds	r3, r0, #1
 8002a40:	d0d0      	beq.n	80029e4 <_swilseek+0x16>
 8002a42:	4404      	add	r4, r0
 8002a44:	e7de      	b.n	8002a04 <_swilseek+0x36>

08002a46 <_lseek>:
 8002a46:	f7ff bfc2 	b.w	80029ce <_swilseek>

08002a4a <_swiwrite>:
 8002a4a:	b530      	push	{r4, r5, lr}
 8002a4c:	b085      	sub	sp, #20
 8002a4e:	2405      	movs	r4, #5
 8002a50:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002a54:	9203      	str	r2, [sp, #12]
 8002a56:	ad01      	add	r5, sp, #4
 8002a58:	4620      	mov	r0, r4
 8002a5a:	4629      	mov	r1, r5
 8002a5c:	beab      	bkpt	0x00ab
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7ff ff85 	bl	8002970 <checkerror>
 8002a66:	b005      	add	sp, #20
 8002a68:	bd30      	pop	{r4, r5, pc}

08002a6a <_write>:
 8002a6a:	b570      	push	{r4, r5, r6, lr}
 8002a6c:	460e      	mov	r6, r1
 8002a6e:	4615      	mov	r5, r2
 8002a70:	f7ff ff56 	bl	8002920 <findslot>
 8002a74:	4604      	mov	r4, r0
 8002a76:	b930      	cbnz	r0, 8002a86 <_write+0x1c>
 8002a78:	f000 fc46 	bl	8003308 <__errno>
 8002a7c:	2309      	movs	r3, #9
 8002a7e:	6003      	str	r3, [r0, #0]
 8002a80:	f04f 30ff 	mov.w	r0, #4294967295
 8002a84:	bd70      	pop	{r4, r5, r6, pc}
 8002a86:	462a      	mov	r2, r5
 8002a88:	4631      	mov	r1, r6
 8002a8a:	6800      	ldr	r0, [r0, #0]
 8002a8c:	f7ff ffdd 	bl	8002a4a <_swiwrite>
 8002a90:	1e03      	subs	r3, r0, #0
 8002a92:	dbf5      	blt.n	8002a80 <_write+0x16>
 8002a94:	6862      	ldr	r2, [r4, #4]
 8002a96:	1ae8      	subs	r0, r5, r3
 8002a98:	4402      	add	r2, r0
 8002a9a:	42ab      	cmp	r3, r5
 8002a9c:	6062      	str	r2, [r4, #4]
 8002a9e:	d1f1      	bne.n	8002a84 <_write+0x1a>
 8002aa0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7ff bf55 	b.w	8002954 <error>

08002aaa <_swiclose>:
 8002aaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002aac:	2402      	movs	r4, #2
 8002aae:	9001      	str	r0, [sp, #4]
 8002ab0:	ad01      	add	r5, sp, #4
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	beab      	bkpt	0x00ab
 8002ab8:	4604      	mov	r4, r0
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff ff58 	bl	8002970 <checkerror>
 8002ac0:	b003      	add	sp, #12
 8002ac2:	bd30      	pop	{r4, r5, pc}

08002ac4 <_close>:
 8002ac4:	b538      	push	{r3, r4, r5, lr}
 8002ac6:	4605      	mov	r5, r0
 8002ac8:	f7ff ff2a 	bl	8002920 <findslot>
 8002acc:	4604      	mov	r4, r0
 8002ace:	b930      	cbnz	r0, 8002ade <_close+0x1a>
 8002ad0:	f000 fc1a 	bl	8003308 <__errno>
 8002ad4:	2309      	movs	r3, #9
 8002ad6:	6003      	str	r3, [r0, #0]
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	bd38      	pop	{r3, r4, r5, pc}
 8002ade:	3d01      	subs	r5, #1
 8002ae0:	2d01      	cmp	r5, #1
 8002ae2:	d809      	bhi.n	8002af8 <_close+0x34>
 8002ae4:	4b09      	ldr	r3, [pc, #36]	@ (8002b0c <_close+0x48>)
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d104      	bne.n	8002af8 <_close+0x34>
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	6003      	str	r3, [r0, #0]
 8002af4:	2000      	movs	r0, #0
 8002af6:	e7f1      	b.n	8002adc <_close+0x18>
 8002af8:	6820      	ldr	r0, [r4, #0]
 8002afa:	f7ff ffd6 	bl	8002aaa <_swiclose>
 8002afe:	2800      	cmp	r0, #0
 8002b00:	d1ec      	bne.n	8002adc <_close+0x18>
 8002b02:	f04f 33ff 	mov.w	r3, #4294967295
 8002b06:	6023      	str	r3, [r4, #0]
 8002b08:	e7e8      	b.n	8002adc <_close+0x18>
 8002b0a:	bf00      	nop
 8002b0c:	200001b0 	.word	0x200001b0

08002b10 <_swistat>:
 8002b10:	b570      	push	{r4, r5, r6, lr}
 8002b12:	460c      	mov	r4, r1
 8002b14:	f7ff ff04 	bl	8002920 <findslot>
 8002b18:	4605      	mov	r5, r0
 8002b1a:	b930      	cbnz	r0, 8002b2a <_swistat+0x1a>
 8002b1c:	f000 fbf4 	bl	8003308 <__errno>
 8002b20:	2309      	movs	r3, #9
 8002b22:	6003      	str	r3, [r0, #0]
 8002b24:	f04f 30ff 	mov.w	r0, #4294967295
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	6863      	ldr	r3, [r4, #4]
 8002b2c:	260c      	movs	r6, #12
 8002b2e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002b32:	6063      	str	r3, [r4, #4]
 8002b34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b38:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002b3a:	4630      	mov	r0, r6
 8002b3c:	4629      	mov	r1, r5
 8002b3e:	beab      	bkpt	0x00ab
 8002b40:	4605      	mov	r5, r0
 8002b42:	4628      	mov	r0, r5
 8002b44:	f7ff ff14 	bl	8002970 <checkerror>
 8002b48:	1c43      	adds	r3, r0, #1
 8002b4a:	d0eb      	beq.n	8002b24 <_swistat+0x14>
 8002b4c:	6120      	str	r0, [r4, #16]
 8002b4e:	2000      	movs	r0, #0
 8002b50:	e7ea      	b.n	8002b28 <_swistat+0x18>

08002b52 <_fstat>:
 8002b52:	460b      	mov	r3, r1
 8002b54:	b510      	push	{r4, lr}
 8002b56:	2100      	movs	r1, #0
 8002b58:	4604      	mov	r4, r0
 8002b5a:	2258      	movs	r2, #88	@ 0x58
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fb84 	bl	800326a <memset>
 8002b62:	4601      	mov	r1, r0
 8002b64:	4620      	mov	r0, r4
 8002b66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b6a:	f7ff bfd1 	b.w	8002b10 <_swistat>

08002b6e <_stat>:
 8002b6e:	b538      	push	{r3, r4, r5, lr}
 8002b70:	460d      	mov	r5, r1
 8002b72:	4604      	mov	r4, r0
 8002b74:	2258      	movs	r2, #88	@ 0x58
 8002b76:	2100      	movs	r1, #0
 8002b78:	4628      	mov	r0, r5
 8002b7a:	f000 fb76 	bl	800326a <memset>
 8002b7e:	4620      	mov	r0, r4
 8002b80:	2100      	movs	r1, #0
 8002b82:	f000 f811 	bl	8002ba8 <_swiopen>
 8002b86:	1c43      	adds	r3, r0, #1
 8002b88:	4604      	mov	r4, r0
 8002b8a:	d00b      	beq.n	8002ba4 <_stat+0x36>
 8002b8c:	686b      	ldr	r3, [r5, #4]
 8002b8e:	4629      	mov	r1, r5
 8002b90:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002b94:	606b      	str	r3, [r5, #4]
 8002b96:	f7ff ffbb 	bl	8002b10 <_swistat>
 8002b9a:	4605      	mov	r5, r0
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f7ff ff91 	bl	8002ac4 <_close>
 8002ba2:	462c      	mov	r4, r5
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	bd38      	pop	{r3, r4, r5, pc}

08002ba8 <_swiopen>:
 8002ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bac:	4607      	mov	r7, r0
 8002bae:	460e      	mov	r6, r1
 8002bb0:	2400      	movs	r4, #0
 8002bb2:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8002c58 <_swiopen+0xb0>
 8002bb6:	b096      	sub	sp, #88	@ 0x58
 8002bb8:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002bbc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	d032      	beq.n	8002c2a <_swiopen+0x82>
 8002bc4:	3401      	adds	r4, #1
 8002bc6:	2c14      	cmp	r4, #20
 8002bc8:	d1f6      	bne.n	8002bb8 <_swiopen+0x10>
 8002bca:	f000 fb9d 	bl	8003308 <__errno>
 8002bce:	2318      	movs	r3, #24
 8002bd0:	e03a      	b.n	8002c48 <_swiopen+0xa0>
 8002bd2:	f240 6301 	movw	r3, #1537	@ 0x601
 8002bd6:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002bda:	07b2      	lsls	r2, r6, #30
 8002bdc:	bf48      	it	mi
 8002bde:	f045 0502 	orrmi.w	r5, r5, #2
 8002be2:	421e      	tst	r6, r3
 8002be4:	bf18      	it	ne
 8002be6:	f045 0504 	orrne.w	r5, r5, #4
 8002bea:	0733      	lsls	r3, r6, #28
 8002bec:	bf48      	it	mi
 8002bee:	f025 0504 	bicmi.w	r5, r5, #4
 8002bf2:	4638      	mov	r0, r7
 8002bf4:	bf48      	it	mi
 8002bf6:	f045 0508 	orrmi.w	r5, r5, #8
 8002bfa:	9700      	str	r7, [sp, #0]
 8002bfc:	f7fd faa6 	bl	800014c <strlen>
 8002c00:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002c04:	2501      	movs	r5, #1
 8002c06:	4628      	mov	r0, r5
 8002c08:	4651      	mov	r1, sl
 8002c0a:	beab      	bkpt	0x00ab
 8002c0c:	4605      	mov	r5, r0
 8002c0e:	2d00      	cmp	r5, #0
 8002c10:	db06      	blt.n	8002c20 <_swiopen+0x78>
 8002c12:	2300      	movs	r3, #0
 8002c14:	44c8      	add	r8, r9
 8002c16:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8002c1a:	f8c8 3004 	str.w	r3, [r8, #4]
 8002c1e:	e016      	b.n	8002c4e <_swiopen+0xa6>
 8002c20:	4628      	mov	r0, r5
 8002c22:	f7ff fe97 	bl	8002954 <error>
 8002c26:	4604      	mov	r4, r0
 8002c28:	e011      	b.n	8002c4e <_swiopen+0xa6>
 8002c2a:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002c2e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002c32:	46ea      	mov	sl, sp
 8002c34:	d1cd      	bne.n	8002bd2 <_swiopen+0x2a>
 8002c36:	4651      	mov	r1, sl
 8002c38:	4638      	mov	r0, r7
 8002c3a:	f7ff ff98 	bl	8002b6e <_stat>
 8002c3e:	3001      	adds	r0, #1
 8002c40:	d0c7      	beq.n	8002bd2 <_swiopen+0x2a>
 8002c42:	f000 fb61 	bl	8003308 <__errno>
 8002c46:	2311      	movs	r3, #17
 8002c48:	f04f 34ff 	mov.w	r4, #4294967295
 8002c4c:	6003      	str	r3, [r0, #0]
 8002c4e:	4620      	mov	r0, r4
 8002c50:	b016      	add	sp, #88	@ 0x58
 8002c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c56:	bf00      	nop
 8002c58:	200001b0 	.word	0x200001b0

08002c5c <_get_semihosting_exts>:
 8002c5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002c60:	4606      	mov	r6, r0
 8002c62:	460f      	mov	r7, r1
 8002c64:	4829      	ldr	r0, [pc, #164]	@ (8002d0c <_get_semihosting_exts+0xb0>)
 8002c66:	2100      	movs	r1, #0
 8002c68:	4615      	mov	r5, r2
 8002c6a:	f7ff ff9d 	bl	8002ba8 <_swiopen>
 8002c6e:	4604      	mov	r4, r0
 8002c70:	462a      	mov	r2, r5
 8002c72:	2100      	movs	r1, #0
 8002c74:	4630      	mov	r0, r6
 8002c76:	f000 faf8 	bl	800326a <memset>
 8002c7a:	1c63      	adds	r3, r4, #1
 8002c7c:	d014      	beq.n	8002ca8 <_get_semihosting_exts+0x4c>
 8002c7e:	4620      	mov	r0, r4
 8002c80:	f7ff fe4e 	bl	8002920 <findslot>
 8002c84:	f04f 080c 	mov.w	r8, #12
 8002c88:	4681      	mov	r9, r0
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	beab      	bkpt	0x00ab
 8002c90:	4680      	mov	r8, r0
 8002c92:	4640      	mov	r0, r8
 8002c94:	f7ff fe6c 	bl	8002970 <checkerror>
 8002c98:	2803      	cmp	r0, #3
 8002c9a:	dd02      	ble.n	8002ca2 <_get_semihosting_exts+0x46>
 8002c9c:	1ec3      	subs	r3, r0, #3
 8002c9e:	42ab      	cmp	r3, r5
 8002ca0:	dc07      	bgt.n	8002cb2 <_get_semihosting_exts+0x56>
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff ff0e 	bl	8002ac4 <_close>
 8002ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8002cac:	b003      	add	sp, #12
 8002cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4620      	mov	r0, r4
 8002cb6:	eb0d 0102 	add.w	r1, sp, r2
 8002cba:	f7ff fe6e 	bl	800299a <_read>
 8002cbe:	2803      	cmp	r0, #3
 8002cc0:	ddef      	ble.n	8002ca2 <_get_semihosting_exts+0x46>
 8002cc2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002cc6:	2b53      	cmp	r3, #83	@ 0x53
 8002cc8:	d1eb      	bne.n	8002ca2 <_get_semihosting_exts+0x46>
 8002cca:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002cce:	2b48      	cmp	r3, #72	@ 0x48
 8002cd0:	d1e7      	bne.n	8002ca2 <_get_semihosting_exts+0x46>
 8002cd2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002cd6:	2b46      	cmp	r3, #70	@ 0x46
 8002cd8:	d1e3      	bne.n	8002ca2 <_get_semihosting_exts+0x46>
 8002cda:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cde:	2b42      	cmp	r3, #66	@ 0x42
 8002ce0:	d1df      	bne.n	8002ca2 <_get_semihosting_exts+0x46>
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4639      	mov	r1, r7
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7ff fe71 	bl	80029ce <_swilseek>
 8002cec:	2800      	cmp	r0, #0
 8002cee:	dbd8      	blt.n	8002ca2 <_get_semihosting_exts+0x46>
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4631      	mov	r1, r6
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f7ff fe50 	bl	800299a <_read>
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	4620      	mov	r0, r4
 8002cfe:	f7ff fee1 	bl	8002ac4 <_close>
 8002d02:	4628      	mov	r0, r5
 8002d04:	f7ff fe34 	bl	8002970 <checkerror>
 8002d08:	e7d0      	b.n	8002cac <_get_semihosting_exts+0x50>
 8002d0a:	bf00      	nop
 8002d0c:	08004520 	.word	0x08004520

08002d10 <initialise_semihosting_exts>:
 8002d10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002d12:	2100      	movs	r1, #0
 8002d14:	2201      	movs	r2, #1
 8002d16:	4d09      	ldr	r5, [pc, #36]	@ (8002d3c <initialise_semihosting_exts+0x2c>)
 8002d18:	4c09      	ldr	r4, [pc, #36]	@ (8002d40 <initialise_semihosting_exts+0x30>)
 8002d1a:	a801      	add	r0, sp, #4
 8002d1c:	6029      	str	r1, [r5, #0]
 8002d1e:	6022      	str	r2, [r4, #0]
 8002d20:	f7ff ff9c 	bl	8002c5c <_get_semihosting_exts>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	dd07      	ble.n	8002d38 <initialise_semihosting_exts+0x28>
 8002d28:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002d2c:	f003 0201 	and.w	r2, r3, #1
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	602a      	str	r2, [r5, #0]
 8002d36:	6023      	str	r3, [r4, #0]
 8002d38:	b003      	add	sp, #12
 8002d3a:	bd30      	pop	{r4, r5, pc}
 8002d3c:	20000038 	.word	0x20000038
 8002d40:	20000034 	.word	0x20000034

08002d44 <_has_ext_stdout_stderr>:
 8002d44:	b510      	push	{r4, lr}
 8002d46:	4c04      	ldr	r4, [pc, #16]	@ (8002d58 <_has_ext_stdout_stderr+0x14>)
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	da01      	bge.n	8002d52 <_has_ext_stdout_stderr+0xe>
 8002d4e:	f7ff ffdf 	bl	8002d10 <initialise_semihosting_exts>
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	bd10      	pop	{r4, pc}
 8002d56:	bf00      	nop
 8002d58:	20000034 	.word	0x20000034

08002d5c <initialise_monitor_handles>:
 8002d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d60:	2303      	movs	r3, #3
 8002d62:	2400      	movs	r4, #0
 8002d64:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002e08 <initialise_monitor_handles+0xac>
 8002d68:	b085      	sub	sp, #20
 8002d6a:	f8cd 9004 	str.w	r9, [sp, #4]
 8002d6e:	af01      	add	r7, sp, #4
 8002d70:	9303      	str	r3, [sp, #12]
 8002d72:	2501      	movs	r5, #1
 8002d74:	9402      	str	r4, [sp, #8]
 8002d76:	4628      	mov	r0, r5
 8002d78:	4639      	mov	r1, r7
 8002d7a:	beab      	bkpt	0x00ab
 8002d7c:	4605      	mov	r5, r0
 8002d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d82:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8002e0c <initialise_monitor_handles+0xb0>
 8002d86:	4623      	mov	r3, r4
 8002d88:	4c21      	ldr	r4, [pc, #132]	@ (8002e10 <initialise_monitor_handles+0xb4>)
 8002d8a:	f8c8 5000 	str.w	r5, [r8]
 8002d8e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002d92:	3301      	adds	r3, #1
 8002d94:	2b14      	cmp	r3, #20
 8002d96:	d1fa      	bne.n	8002d8e <initialise_monitor_handles+0x32>
 8002d98:	f7ff ffd4 	bl	8002d44 <_has_ext_stdout_stderr>
 8002d9c:	4d1d      	ldr	r5, [pc, #116]	@ (8002e14 <initialise_monitor_handles+0xb8>)
 8002d9e:	b1d0      	cbz	r0, 8002dd6 <initialise_monitor_handles+0x7a>
 8002da0:	f04f 0a03 	mov.w	sl, #3
 8002da4:	2304      	movs	r3, #4
 8002da6:	f8cd 9004 	str.w	r9, [sp, #4]
 8002daa:	2601      	movs	r6, #1
 8002dac:	f8cd a00c 	str.w	sl, [sp, #12]
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	4630      	mov	r0, r6
 8002db4:	4639      	mov	r1, r7
 8002db6:	beab      	bkpt	0x00ab
 8002db8:	4683      	mov	fp, r0
 8002dba:	4b17      	ldr	r3, [pc, #92]	@ (8002e18 <initialise_monitor_handles+0xbc>)
 8002dbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8002dc0:	f8c3 b000 	str.w	fp, [r3]
 8002dc4:	2308      	movs	r3, #8
 8002dc6:	f8cd a00c 	str.w	sl, [sp, #12]
 8002dca:	9302      	str	r3, [sp, #8]
 8002dcc:	4630      	mov	r0, r6
 8002dce:	4639      	mov	r1, r7
 8002dd0:	beab      	bkpt	0x00ab
 8002dd2:	4606      	mov	r6, r0
 8002dd4:	602e      	str	r6, [r5, #0]
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	6066      	str	r6, [r4, #4]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	bf02      	ittt	eq
 8002de0:	4b0d      	ldreq	r3, [pc, #52]	@ (8002e18 <initialise_monitor_handles+0xbc>)
 8002de2:	681b      	ldreq	r3, [r3, #0]
 8002de4:	602b      	streq	r3, [r5, #0]
 8002de6:	f8d8 3000 	ldr.w	r3, [r8]
 8002dea:	6023      	str	r3, [r4, #0]
 8002dec:	f7ff ffaa 	bl	8002d44 <_has_ext_stdout_stderr>
 8002df0:	b130      	cbz	r0, 8002e00 <initialise_monitor_handles+0xa4>
 8002df2:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <initialise_monitor_handles+0xbc>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002dfa:	682b      	ldr	r3, [r5, #0]
 8002dfc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002e00:	b005      	add	sp, #20
 8002e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	08004536 	.word	0x08004536
 8002e0c:	200001ac 	.word	0x200001ac
 8002e10:	200001b0 	.word	0x200001b0
 8002e14:	200001a4 	.word	0x200001a4
 8002e18:	200001a8 	.word	0x200001a8

08002e1c <_isatty>:
 8002e1c:	b570      	push	{r4, r5, r6, lr}
 8002e1e:	f7ff fd7f 	bl	8002920 <findslot>
 8002e22:	2409      	movs	r4, #9
 8002e24:	4605      	mov	r5, r0
 8002e26:	b920      	cbnz	r0, 8002e32 <_isatty+0x16>
 8002e28:	f000 fa6e 	bl	8003308 <__errno>
 8002e2c:	6004      	str	r4, [r0, #0]
 8002e2e:	2000      	movs	r0, #0
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	4620      	mov	r0, r4
 8002e34:	4629      	mov	r1, r5
 8002e36:	beab      	bkpt	0x00ab
 8002e38:	4604      	mov	r4, r0
 8002e3a:	2c01      	cmp	r4, #1
 8002e3c:	4620      	mov	r0, r4
 8002e3e:	d0f7      	beq.n	8002e30 <_isatty+0x14>
 8002e40:	f000 fa62 	bl	8003308 <__errno>
 8002e44:	2513      	movs	r5, #19
 8002e46:	4604      	mov	r4, r0
 8002e48:	2600      	movs	r6, #0
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	4631      	mov	r1, r6
 8002e4e:	beab      	bkpt	0x00ab
 8002e50:	4605      	mov	r5, r0
 8002e52:	6025      	str	r5, [r4, #0]
 8002e54:	e7eb      	b.n	8002e2e <_isatty+0x12>
	...

08002e58 <__sflush_r>:
 8002e58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e5e:	0716      	lsls	r6, r2, #28
 8002e60:	4605      	mov	r5, r0
 8002e62:	460c      	mov	r4, r1
 8002e64:	d454      	bmi.n	8002f10 <__sflush_r+0xb8>
 8002e66:	684b      	ldr	r3, [r1, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dc02      	bgt.n	8002e72 <__sflush_r+0x1a>
 8002e6c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	dd48      	ble.n	8002f04 <__sflush_r+0xac>
 8002e72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e74:	2e00      	cmp	r6, #0
 8002e76:	d045      	beq.n	8002f04 <__sflush_r+0xac>
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e7e:	682f      	ldr	r7, [r5, #0]
 8002e80:	6a21      	ldr	r1, [r4, #32]
 8002e82:	602b      	str	r3, [r5, #0]
 8002e84:	d030      	beq.n	8002ee8 <__sflush_r+0x90>
 8002e86:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e88:	89a3      	ldrh	r3, [r4, #12]
 8002e8a:	0759      	lsls	r1, r3, #29
 8002e8c:	d505      	bpl.n	8002e9a <__sflush_r+0x42>
 8002e8e:	6863      	ldr	r3, [r4, #4]
 8002e90:	1ad2      	subs	r2, r2, r3
 8002e92:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e94:	b10b      	cbz	r3, 8002e9a <__sflush_r+0x42>
 8002e96:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e98:	1ad2      	subs	r2, r2, r3
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ea0:	6a21      	ldr	r1, [r4, #32]
 8002ea2:	47b0      	blx	r6
 8002ea4:	1c43      	adds	r3, r0, #1
 8002ea6:	89a3      	ldrh	r3, [r4, #12]
 8002ea8:	d106      	bne.n	8002eb8 <__sflush_r+0x60>
 8002eaa:	6829      	ldr	r1, [r5, #0]
 8002eac:	291d      	cmp	r1, #29
 8002eae:	d82b      	bhi.n	8002f08 <__sflush_r+0xb0>
 8002eb0:	4a28      	ldr	r2, [pc, #160]	@ (8002f54 <__sflush_r+0xfc>)
 8002eb2:	40ca      	lsrs	r2, r1
 8002eb4:	07d6      	lsls	r6, r2, #31
 8002eb6:	d527      	bpl.n	8002f08 <__sflush_r+0xb0>
 8002eb8:	2200      	movs	r2, #0
 8002eba:	6062      	str	r2, [r4, #4]
 8002ebc:	6922      	ldr	r2, [r4, #16]
 8002ebe:	04d9      	lsls	r1, r3, #19
 8002ec0:	6022      	str	r2, [r4, #0]
 8002ec2:	d504      	bpl.n	8002ece <__sflush_r+0x76>
 8002ec4:	1c42      	adds	r2, r0, #1
 8002ec6:	d101      	bne.n	8002ecc <__sflush_r+0x74>
 8002ec8:	682b      	ldr	r3, [r5, #0]
 8002eca:	b903      	cbnz	r3, 8002ece <__sflush_r+0x76>
 8002ecc:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ece:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ed0:	602f      	str	r7, [r5, #0]
 8002ed2:	b1b9      	cbz	r1, 8002f04 <__sflush_r+0xac>
 8002ed4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ed8:	4299      	cmp	r1, r3
 8002eda:	d002      	beq.n	8002ee2 <__sflush_r+0x8a>
 8002edc:	4628      	mov	r0, r5
 8002ede:	f000 fa41 	bl	8003364 <_free_r>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ee6:	e00d      	b.n	8002f04 <__sflush_r+0xac>
 8002ee8:	2301      	movs	r3, #1
 8002eea:	4628      	mov	r0, r5
 8002eec:	47b0      	blx	r6
 8002eee:	4602      	mov	r2, r0
 8002ef0:	1c50      	adds	r0, r2, #1
 8002ef2:	d1c9      	bne.n	8002e88 <__sflush_r+0x30>
 8002ef4:	682b      	ldr	r3, [r5, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0c6      	beq.n	8002e88 <__sflush_r+0x30>
 8002efa:	2b1d      	cmp	r3, #29
 8002efc:	d001      	beq.n	8002f02 <__sflush_r+0xaa>
 8002efe:	2b16      	cmp	r3, #22
 8002f00:	d11d      	bne.n	8002f3e <__sflush_r+0xe6>
 8002f02:	602f      	str	r7, [r5, #0]
 8002f04:	2000      	movs	r0, #0
 8002f06:	e021      	b.n	8002f4c <__sflush_r+0xf4>
 8002f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	e01a      	b.n	8002f46 <__sflush_r+0xee>
 8002f10:	690f      	ldr	r7, [r1, #16]
 8002f12:	2f00      	cmp	r7, #0
 8002f14:	d0f6      	beq.n	8002f04 <__sflush_r+0xac>
 8002f16:	0793      	lsls	r3, r2, #30
 8002f18:	bf18      	it	ne
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	680e      	ldr	r6, [r1, #0]
 8002f1e:	bf08      	it	eq
 8002f20:	694b      	ldreq	r3, [r1, #20]
 8002f22:	1bf6      	subs	r6, r6, r7
 8002f24:	600f      	str	r7, [r1, #0]
 8002f26:	608b      	str	r3, [r1, #8]
 8002f28:	2e00      	cmp	r6, #0
 8002f2a:	ddeb      	ble.n	8002f04 <__sflush_r+0xac>
 8002f2c:	4633      	mov	r3, r6
 8002f2e:	463a      	mov	r2, r7
 8002f30:	4628      	mov	r0, r5
 8002f32:	6a21      	ldr	r1, [r4, #32]
 8002f34:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002f38:	47e0      	blx	ip
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	dc07      	bgt.n	8002f4e <__sflush_r+0xf6>
 8002f3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4a:	81a3      	strh	r3, [r4, #12]
 8002f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f4e:	4407      	add	r7, r0
 8002f50:	1a36      	subs	r6, r6, r0
 8002f52:	e7e9      	b.n	8002f28 <__sflush_r+0xd0>
 8002f54:	20400001 	.word	0x20400001

08002f58 <_fflush_r>:
 8002f58:	b538      	push	{r3, r4, r5, lr}
 8002f5a:	690b      	ldr	r3, [r1, #16]
 8002f5c:	4605      	mov	r5, r0
 8002f5e:	460c      	mov	r4, r1
 8002f60:	b913      	cbnz	r3, 8002f68 <_fflush_r+0x10>
 8002f62:	2500      	movs	r5, #0
 8002f64:	4628      	mov	r0, r5
 8002f66:	bd38      	pop	{r3, r4, r5, pc}
 8002f68:	b118      	cbz	r0, 8002f72 <_fflush_r+0x1a>
 8002f6a:	6a03      	ldr	r3, [r0, #32]
 8002f6c:	b90b      	cbnz	r3, 8002f72 <_fflush_r+0x1a>
 8002f6e:	f000 f8bb 	bl	80030e8 <__sinit>
 8002f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f3      	beq.n	8002f62 <_fflush_r+0xa>
 8002f7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f7c:	07d0      	lsls	r0, r2, #31
 8002f7e:	d404      	bmi.n	8002f8a <_fflush_r+0x32>
 8002f80:	0599      	lsls	r1, r3, #22
 8002f82:	d402      	bmi.n	8002f8a <_fflush_r+0x32>
 8002f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f86:	f000 f9ea 	bl	800335e <__retarget_lock_acquire_recursive>
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	f7ff ff63 	bl	8002e58 <__sflush_r>
 8002f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f94:	4605      	mov	r5, r0
 8002f96:	07da      	lsls	r2, r3, #31
 8002f98:	d4e4      	bmi.n	8002f64 <_fflush_r+0xc>
 8002f9a:	89a3      	ldrh	r3, [r4, #12]
 8002f9c:	059b      	lsls	r3, r3, #22
 8002f9e:	d4e1      	bmi.n	8002f64 <_fflush_r+0xc>
 8002fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fa2:	f000 f9dd 	bl	8003360 <__retarget_lock_release_recursive>
 8002fa6:	e7dd      	b.n	8002f64 <_fflush_r+0xc>

08002fa8 <fflush>:
 8002fa8:	4601      	mov	r1, r0
 8002faa:	b920      	cbnz	r0, 8002fb6 <fflush+0xe>
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <fflush+0x18>)
 8002fae:	4905      	ldr	r1, [pc, #20]	@ (8002fc4 <fflush+0x1c>)
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <fflush+0x20>)
 8002fb2:	f000 b8b1 	b.w	8003118 <_fwalk_sglue>
 8002fb6:	4b05      	ldr	r3, [pc, #20]	@ (8002fcc <fflush+0x24>)
 8002fb8:	6818      	ldr	r0, [r3, #0]
 8002fba:	f7ff bfcd 	b.w	8002f58 <_fflush_r>
 8002fbe:	bf00      	nop
 8002fc0:	2000003c 	.word	0x2000003c
 8002fc4:	08002f59 	.word	0x08002f59
 8002fc8:	2000004c 	.word	0x2000004c
 8002fcc:	20000048 	.word	0x20000048

08002fd0 <std>:
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	b510      	push	{r4, lr}
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	e9c0 3300 	strd	r3, r3, [r0]
 8002fda:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002fde:	6083      	str	r3, [r0, #8]
 8002fe0:	8181      	strh	r1, [r0, #12]
 8002fe2:	6643      	str	r3, [r0, #100]	@ 0x64
 8002fe4:	81c2      	strh	r2, [r0, #14]
 8002fe6:	6183      	str	r3, [r0, #24]
 8002fe8:	4619      	mov	r1, r3
 8002fea:	2208      	movs	r2, #8
 8002fec:	305c      	adds	r0, #92	@ 0x5c
 8002fee:	f000 f93c 	bl	800326a <memset>
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <std+0x58>)
 8002ff4:	6224      	str	r4, [r4, #32]
 8002ff6:	6263      	str	r3, [r4, #36]	@ 0x24
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <std+0x5c>)
 8002ffa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8003030 <std+0x60>)
 8002ffe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003000:	4b0c      	ldr	r3, [pc, #48]	@ (8003034 <std+0x64>)
 8003002:	6323      	str	r3, [r4, #48]	@ 0x30
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <std+0x68>)
 8003006:	429c      	cmp	r4, r3
 8003008:	d006      	beq.n	8003018 <std+0x48>
 800300a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800300e:	4294      	cmp	r4, r2
 8003010:	d002      	beq.n	8003018 <std+0x48>
 8003012:	33d0      	adds	r3, #208	@ 0xd0
 8003014:	429c      	cmp	r4, r3
 8003016:	d105      	bne.n	8003024 <std+0x54>
 8003018:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800301c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003020:	f000 b99c 	b.w	800335c <__retarget_lock_init_recursive>
 8003024:	bd10      	pop	{r4, pc}
 8003026:	bf00      	nop
 8003028:	080031e5 	.word	0x080031e5
 800302c:	08003207 	.word	0x08003207
 8003030:	0800323f 	.word	0x0800323f
 8003034:	08003263 	.word	0x08003263
 8003038:	20000250 	.word	0x20000250

0800303c <stdio_exit_handler>:
 800303c:	4a02      	ldr	r2, [pc, #8]	@ (8003048 <stdio_exit_handler+0xc>)
 800303e:	4903      	ldr	r1, [pc, #12]	@ (800304c <stdio_exit_handler+0x10>)
 8003040:	4803      	ldr	r0, [pc, #12]	@ (8003050 <stdio_exit_handler+0x14>)
 8003042:	f000 b869 	b.w	8003118 <_fwalk_sglue>
 8003046:	bf00      	nop
 8003048:	2000003c 	.word	0x2000003c
 800304c:	08002f59 	.word	0x08002f59
 8003050:	2000004c 	.word	0x2000004c

08003054 <cleanup_stdio>:
 8003054:	6841      	ldr	r1, [r0, #4]
 8003056:	4b0c      	ldr	r3, [pc, #48]	@ (8003088 <cleanup_stdio+0x34>)
 8003058:	b510      	push	{r4, lr}
 800305a:	4299      	cmp	r1, r3
 800305c:	4604      	mov	r4, r0
 800305e:	d001      	beq.n	8003064 <cleanup_stdio+0x10>
 8003060:	f7ff ff7a 	bl	8002f58 <_fflush_r>
 8003064:	68a1      	ldr	r1, [r4, #8]
 8003066:	4b09      	ldr	r3, [pc, #36]	@ (800308c <cleanup_stdio+0x38>)
 8003068:	4299      	cmp	r1, r3
 800306a:	d002      	beq.n	8003072 <cleanup_stdio+0x1e>
 800306c:	4620      	mov	r0, r4
 800306e:	f7ff ff73 	bl	8002f58 <_fflush_r>
 8003072:	68e1      	ldr	r1, [r4, #12]
 8003074:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <cleanup_stdio+0x3c>)
 8003076:	4299      	cmp	r1, r3
 8003078:	d004      	beq.n	8003084 <cleanup_stdio+0x30>
 800307a:	4620      	mov	r0, r4
 800307c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003080:	f7ff bf6a 	b.w	8002f58 <_fflush_r>
 8003084:	bd10      	pop	{r4, pc}
 8003086:	bf00      	nop
 8003088:	20000250 	.word	0x20000250
 800308c:	200002b8 	.word	0x200002b8
 8003090:	20000320 	.word	0x20000320

08003094 <global_stdio_init.part.0>:
 8003094:	b510      	push	{r4, lr}
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <global_stdio_init.part.0+0x30>)
 8003098:	4c0b      	ldr	r4, [pc, #44]	@ (80030c8 <global_stdio_init.part.0+0x34>)
 800309a:	4a0c      	ldr	r2, [pc, #48]	@ (80030cc <global_stdio_init.part.0+0x38>)
 800309c:	4620      	mov	r0, r4
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	2104      	movs	r1, #4
 80030a2:	2200      	movs	r2, #0
 80030a4:	f7ff ff94 	bl	8002fd0 <std>
 80030a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80030ac:	2201      	movs	r2, #1
 80030ae:	2109      	movs	r1, #9
 80030b0:	f7ff ff8e 	bl	8002fd0 <std>
 80030b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80030b8:	2202      	movs	r2, #2
 80030ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030be:	2112      	movs	r1, #18
 80030c0:	f7ff bf86 	b.w	8002fd0 <std>
 80030c4:	20000388 	.word	0x20000388
 80030c8:	20000250 	.word	0x20000250
 80030cc:	0800303d 	.word	0x0800303d

080030d0 <__sfp_lock_acquire>:
 80030d0:	4801      	ldr	r0, [pc, #4]	@ (80030d8 <__sfp_lock_acquire+0x8>)
 80030d2:	f000 b944 	b.w	800335e <__retarget_lock_acquire_recursive>
 80030d6:	bf00      	nop
 80030d8:	20000391 	.word	0x20000391

080030dc <__sfp_lock_release>:
 80030dc:	4801      	ldr	r0, [pc, #4]	@ (80030e4 <__sfp_lock_release+0x8>)
 80030de:	f000 b93f 	b.w	8003360 <__retarget_lock_release_recursive>
 80030e2:	bf00      	nop
 80030e4:	20000391 	.word	0x20000391

080030e8 <__sinit>:
 80030e8:	b510      	push	{r4, lr}
 80030ea:	4604      	mov	r4, r0
 80030ec:	f7ff fff0 	bl	80030d0 <__sfp_lock_acquire>
 80030f0:	6a23      	ldr	r3, [r4, #32]
 80030f2:	b11b      	cbz	r3, 80030fc <__sinit+0x14>
 80030f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030f8:	f7ff bff0 	b.w	80030dc <__sfp_lock_release>
 80030fc:	4b04      	ldr	r3, [pc, #16]	@ (8003110 <__sinit+0x28>)
 80030fe:	6223      	str	r3, [r4, #32]
 8003100:	4b04      	ldr	r3, [pc, #16]	@ (8003114 <__sinit+0x2c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f5      	bne.n	80030f4 <__sinit+0xc>
 8003108:	f7ff ffc4 	bl	8003094 <global_stdio_init.part.0>
 800310c:	e7f2      	b.n	80030f4 <__sinit+0xc>
 800310e:	bf00      	nop
 8003110:	08003055 	.word	0x08003055
 8003114:	20000388 	.word	0x20000388

08003118 <_fwalk_sglue>:
 8003118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800311c:	4607      	mov	r7, r0
 800311e:	4688      	mov	r8, r1
 8003120:	4614      	mov	r4, r2
 8003122:	2600      	movs	r6, #0
 8003124:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003128:	f1b9 0901 	subs.w	r9, r9, #1
 800312c:	d505      	bpl.n	800313a <_fwalk_sglue+0x22>
 800312e:	6824      	ldr	r4, [r4, #0]
 8003130:	2c00      	cmp	r4, #0
 8003132:	d1f7      	bne.n	8003124 <_fwalk_sglue+0xc>
 8003134:	4630      	mov	r0, r6
 8003136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313a:	89ab      	ldrh	r3, [r5, #12]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d907      	bls.n	8003150 <_fwalk_sglue+0x38>
 8003140:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003144:	3301      	adds	r3, #1
 8003146:	d003      	beq.n	8003150 <_fwalk_sglue+0x38>
 8003148:	4629      	mov	r1, r5
 800314a:	4638      	mov	r0, r7
 800314c:	47c0      	blx	r8
 800314e:	4306      	orrs	r6, r0
 8003150:	3568      	adds	r5, #104	@ 0x68
 8003152:	e7e9      	b.n	8003128 <_fwalk_sglue+0x10>

08003154 <iprintf>:
 8003154:	b40f      	push	{r0, r1, r2, r3}
 8003156:	b507      	push	{r0, r1, r2, lr}
 8003158:	4906      	ldr	r1, [pc, #24]	@ (8003174 <iprintf+0x20>)
 800315a:	ab04      	add	r3, sp, #16
 800315c:	6808      	ldr	r0, [r1, #0]
 800315e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003162:	6881      	ldr	r1, [r0, #8]
 8003164:	9301      	str	r3, [sp, #4]
 8003166:	f000 fb73 	bl	8003850 <_vfiprintf_r>
 800316a:	b003      	add	sp, #12
 800316c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003170:	b004      	add	sp, #16
 8003172:	4770      	bx	lr
 8003174:	20000048 	.word	0x20000048

08003178 <sniprintf>:
 8003178:	b40c      	push	{r2, r3}
 800317a:	b530      	push	{r4, r5, lr}
 800317c:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <sniprintf+0x68>)
 800317e:	1e0c      	subs	r4, r1, #0
 8003180:	681d      	ldr	r5, [r3, #0]
 8003182:	b09d      	sub	sp, #116	@ 0x74
 8003184:	da08      	bge.n	8003198 <sniprintf+0x20>
 8003186:	238b      	movs	r3, #139	@ 0x8b
 8003188:	f04f 30ff 	mov.w	r0, #4294967295
 800318c:	602b      	str	r3, [r5, #0]
 800318e:	b01d      	add	sp, #116	@ 0x74
 8003190:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003194:	b002      	add	sp, #8
 8003196:	4770      	bx	lr
 8003198:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800319c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80031a0:	f04f 0300 	mov.w	r3, #0
 80031a4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80031a6:	bf0c      	ite	eq
 80031a8:	4623      	moveq	r3, r4
 80031aa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80031ae:	9304      	str	r3, [sp, #16]
 80031b0:	9307      	str	r3, [sp, #28]
 80031b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031b6:	9002      	str	r0, [sp, #8]
 80031b8:	9006      	str	r0, [sp, #24]
 80031ba:	f8ad 3016 	strh.w	r3, [sp, #22]
 80031be:	4628      	mov	r0, r5
 80031c0:	ab21      	add	r3, sp, #132	@ 0x84
 80031c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80031c4:	a902      	add	r1, sp, #8
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	f000 fa1e 	bl	8003608 <_svfiprintf_r>
 80031cc:	1c43      	adds	r3, r0, #1
 80031ce:	bfbc      	itt	lt
 80031d0:	238b      	movlt	r3, #139	@ 0x8b
 80031d2:	602b      	strlt	r3, [r5, #0]
 80031d4:	2c00      	cmp	r4, #0
 80031d6:	d0da      	beq.n	800318e <sniprintf+0x16>
 80031d8:	2200      	movs	r2, #0
 80031da:	9b02      	ldr	r3, [sp, #8]
 80031dc:	701a      	strb	r2, [r3, #0]
 80031de:	e7d6      	b.n	800318e <sniprintf+0x16>
 80031e0:	20000048 	.word	0x20000048

080031e4 <__sread>:
 80031e4:	b510      	push	{r4, lr}
 80031e6:	460c      	mov	r4, r1
 80031e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031ec:	f000 f868 	bl	80032c0 <_read_r>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	bfab      	itete	ge
 80031f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80031f6:	89a3      	ldrhlt	r3, [r4, #12]
 80031f8:	181b      	addge	r3, r3, r0
 80031fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80031fe:	bfac      	ite	ge
 8003200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003202:	81a3      	strhlt	r3, [r4, #12]
 8003204:	bd10      	pop	{r4, pc}

08003206 <__swrite>:
 8003206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800320a:	461f      	mov	r7, r3
 800320c:	898b      	ldrh	r3, [r1, #12]
 800320e:	4605      	mov	r5, r0
 8003210:	05db      	lsls	r3, r3, #23
 8003212:	460c      	mov	r4, r1
 8003214:	4616      	mov	r6, r2
 8003216:	d505      	bpl.n	8003224 <__swrite+0x1e>
 8003218:	2302      	movs	r3, #2
 800321a:	2200      	movs	r2, #0
 800321c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003220:	f000 f83c 	bl	800329c <_lseek_r>
 8003224:	89a3      	ldrh	r3, [r4, #12]
 8003226:	4632      	mov	r2, r6
 8003228:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800322c:	81a3      	strh	r3, [r4, #12]
 800322e:	4628      	mov	r0, r5
 8003230:	463b      	mov	r3, r7
 8003232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800323a:	f000 b853 	b.w	80032e4 <_write_r>

0800323e <__sseek>:
 800323e:	b510      	push	{r4, lr}
 8003240:	460c      	mov	r4, r1
 8003242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003246:	f000 f829 	bl	800329c <_lseek_r>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	89a3      	ldrh	r3, [r4, #12]
 800324e:	bf15      	itete	ne
 8003250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800325a:	81a3      	strheq	r3, [r4, #12]
 800325c:	bf18      	it	ne
 800325e:	81a3      	strhne	r3, [r4, #12]
 8003260:	bd10      	pop	{r4, pc}

08003262 <__sclose>:
 8003262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003266:	f000 b809 	b.w	800327c <_close_r>

0800326a <memset>:
 800326a:	4603      	mov	r3, r0
 800326c:	4402      	add	r2, r0
 800326e:	4293      	cmp	r3, r2
 8003270:	d100      	bne.n	8003274 <memset+0xa>
 8003272:	4770      	bx	lr
 8003274:	f803 1b01 	strb.w	r1, [r3], #1
 8003278:	e7f9      	b.n	800326e <memset+0x4>
	...

0800327c <_close_r>:
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	2300      	movs	r3, #0
 8003280:	4d05      	ldr	r5, [pc, #20]	@ (8003298 <_close_r+0x1c>)
 8003282:	4604      	mov	r4, r0
 8003284:	4608      	mov	r0, r1
 8003286:	602b      	str	r3, [r5, #0]
 8003288:	f7ff fc1c 	bl	8002ac4 <_close>
 800328c:	1c43      	adds	r3, r0, #1
 800328e:	d102      	bne.n	8003296 <_close_r+0x1a>
 8003290:	682b      	ldr	r3, [r5, #0]
 8003292:	b103      	cbz	r3, 8003296 <_close_r+0x1a>
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	bd38      	pop	{r3, r4, r5, pc}
 8003298:	2000038c 	.word	0x2000038c

0800329c <_lseek_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4604      	mov	r4, r0
 80032a0:	4608      	mov	r0, r1
 80032a2:	4611      	mov	r1, r2
 80032a4:	2200      	movs	r2, #0
 80032a6:	4d05      	ldr	r5, [pc, #20]	@ (80032bc <_lseek_r+0x20>)
 80032a8:	602a      	str	r2, [r5, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f7ff fbcb 	bl	8002a46 <_lseek>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_lseek_r+0x1e>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_lseek_r+0x1e>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	2000038c 	.word	0x2000038c

080032c0 <_read_r>:
 80032c0:	b538      	push	{r3, r4, r5, lr}
 80032c2:	4604      	mov	r4, r0
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	2200      	movs	r2, #0
 80032ca:	4d05      	ldr	r5, [pc, #20]	@ (80032e0 <_read_r+0x20>)
 80032cc:	602a      	str	r2, [r5, #0]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f7ff fb63 	bl	800299a <_read>
 80032d4:	1c43      	adds	r3, r0, #1
 80032d6:	d102      	bne.n	80032de <_read_r+0x1e>
 80032d8:	682b      	ldr	r3, [r5, #0]
 80032da:	b103      	cbz	r3, 80032de <_read_r+0x1e>
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	2000038c 	.word	0x2000038c

080032e4 <_write_r>:
 80032e4:	b538      	push	{r3, r4, r5, lr}
 80032e6:	4604      	mov	r4, r0
 80032e8:	4608      	mov	r0, r1
 80032ea:	4611      	mov	r1, r2
 80032ec:	2200      	movs	r2, #0
 80032ee:	4d05      	ldr	r5, [pc, #20]	@ (8003304 <_write_r+0x20>)
 80032f0:	602a      	str	r2, [r5, #0]
 80032f2:	461a      	mov	r2, r3
 80032f4:	f7ff fbb9 	bl	8002a6a <_write>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_write_r+0x1e>
 80032fc:	682b      	ldr	r3, [r5, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_write_r+0x1e>
 8003300:	6023      	str	r3, [r4, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	2000038c 	.word	0x2000038c

08003308 <__errno>:
 8003308:	4b01      	ldr	r3, [pc, #4]	@ (8003310 <__errno+0x8>)
 800330a:	6818      	ldr	r0, [r3, #0]
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000048 	.word	0x20000048

08003314 <__libc_init_array>:
 8003314:	b570      	push	{r4, r5, r6, lr}
 8003316:	2600      	movs	r6, #0
 8003318:	4d0c      	ldr	r5, [pc, #48]	@ (800334c <__libc_init_array+0x38>)
 800331a:	4c0d      	ldr	r4, [pc, #52]	@ (8003350 <__libc_init_array+0x3c>)
 800331c:	1b64      	subs	r4, r4, r5
 800331e:	10a4      	asrs	r4, r4, #2
 8003320:	42a6      	cmp	r6, r4
 8003322:	d109      	bne.n	8003338 <__libc_init_array+0x24>
 8003324:	f000 fed0 	bl	80040c8 <_init>
 8003328:	2600      	movs	r6, #0
 800332a:	4d0a      	ldr	r5, [pc, #40]	@ (8003354 <__libc_init_array+0x40>)
 800332c:	4c0a      	ldr	r4, [pc, #40]	@ (8003358 <__libc_init_array+0x44>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	42a6      	cmp	r6, r4
 8003334:	d105      	bne.n	8003342 <__libc_init_array+0x2e>
 8003336:	bd70      	pop	{r4, r5, r6, pc}
 8003338:	f855 3b04 	ldr.w	r3, [r5], #4
 800333c:	4798      	blx	r3
 800333e:	3601      	adds	r6, #1
 8003340:	e7ee      	b.n	8003320 <__libc_init_array+0xc>
 8003342:	f855 3b04 	ldr.w	r3, [r5], #4
 8003346:	4798      	blx	r3
 8003348:	3601      	adds	r6, #1
 800334a:	e7f2      	b.n	8003332 <__libc_init_array+0x1e>
 800334c:	08004578 	.word	0x08004578
 8003350:	08004578 	.word	0x08004578
 8003354:	08004578 	.word	0x08004578
 8003358:	0800457c 	.word	0x0800457c

0800335c <__retarget_lock_init_recursive>:
 800335c:	4770      	bx	lr

0800335e <__retarget_lock_acquire_recursive>:
 800335e:	4770      	bx	lr

08003360 <__retarget_lock_release_recursive>:
 8003360:	4770      	bx	lr
	...

08003364 <_free_r>:
 8003364:	b538      	push	{r3, r4, r5, lr}
 8003366:	4605      	mov	r5, r0
 8003368:	2900      	cmp	r1, #0
 800336a:	d040      	beq.n	80033ee <_free_r+0x8a>
 800336c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003370:	1f0c      	subs	r4, r1, #4
 8003372:	2b00      	cmp	r3, #0
 8003374:	bfb8      	it	lt
 8003376:	18e4      	addlt	r4, r4, r3
 8003378:	f000 f8de 	bl	8003538 <__malloc_lock>
 800337c:	4a1c      	ldr	r2, [pc, #112]	@ (80033f0 <_free_r+0x8c>)
 800337e:	6813      	ldr	r3, [r2, #0]
 8003380:	b933      	cbnz	r3, 8003390 <_free_r+0x2c>
 8003382:	6063      	str	r3, [r4, #4]
 8003384:	6014      	str	r4, [r2, #0]
 8003386:	4628      	mov	r0, r5
 8003388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800338c:	f000 b8da 	b.w	8003544 <__malloc_unlock>
 8003390:	42a3      	cmp	r3, r4
 8003392:	d908      	bls.n	80033a6 <_free_r+0x42>
 8003394:	6820      	ldr	r0, [r4, #0]
 8003396:	1821      	adds	r1, r4, r0
 8003398:	428b      	cmp	r3, r1
 800339a:	bf01      	itttt	eq
 800339c:	6819      	ldreq	r1, [r3, #0]
 800339e:	685b      	ldreq	r3, [r3, #4]
 80033a0:	1809      	addeq	r1, r1, r0
 80033a2:	6021      	streq	r1, [r4, #0]
 80033a4:	e7ed      	b.n	8003382 <_free_r+0x1e>
 80033a6:	461a      	mov	r2, r3
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	b10b      	cbz	r3, 80033b0 <_free_r+0x4c>
 80033ac:	42a3      	cmp	r3, r4
 80033ae:	d9fa      	bls.n	80033a6 <_free_r+0x42>
 80033b0:	6811      	ldr	r1, [r2, #0]
 80033b2:	1850      	adds	r0, r2, r1
 80033b4:	42a0      	cmp	r0, r4
 80033b6:	d10b      	bne.n	80033d0 <_free_r+0x6c>
 80033b8:	6820      	ldr	r0, [r4, #0]
 80033ba:	4401      	add	r1, r0
 80033bc:	1850      	adds	r0, r2, r1
 80033be:	4283      	cmp	r3, r0
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	d1e0      	bne.n	8003386 <_free_r+0x22>
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4408      	add	r0, r1
 80033ca:	6010      	str	r0, [r2, #0]
 80033cc:	6053      	str	r3, [r2, #4]
 80033ce:	e7da      	b.n	8003386 <_free_r+0x22>
 80033d0:	d902      	bls.n	80033d8 <_free_r+0x74>
 80033d2:	230c      	movs	r3, #12
 80033d4:	602b      	str	r3, [r5, #0]
 80033d6:	e7d6      	b.n	8003386 <_free_r+0x22>
 80033d8:	6820      	ldr	r0, [r4, #0]
 80033da:	1821      	adds	r1, r4, r0
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf01      	itttt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	1809      	addeq	r1, r1, r0
 80033e6:	6021      	streq	r1, [r4, #0]
 80033e8:	6063      	str	r3, [r4, #4]
 80033ea:	6054      	str	r4, [r2, #4]
 80033ec:	e7cb      	b.n	8003386 <_free_r+0x22>
 80033ee:	bd38      	pop	{r3, r4, r5, pc}
 80033f0:	20000398 	.word	0x20000398

080033f4 <sbrk_aligned>:
 80033f4:	b570      	push	{r4, r5, r6, lr}
 80033f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003434 <sbrk_aligned+0x40>)
 80033f8:	460c      	mov	r4, r1
 80033fa:	6831      	ldr	r1, [r6, #0]
 80033fc:	4605      	mov	r5, r0
 80033fe:	b911      	cbnz	r1, 8003406 <sbrk_aligned+0x12>
 8003400:	f000 fd7c 	bl	8003efc <_sbrk_r>
 8003404:	6030      	str	r0, [r6, #0]
 8003406:	4621      	mov	r1, r4
 8003408:	4628      	mov	r0, r5
 800340a:	f000 fd77 	bl	8003efc <_sbrk_r>
 800340e:	1c43      	adds	r3, r0, #1
 8003410:	d103      	bne.n	800341a <sbrk_aligned+0x26>
 8003412:	f04f 34ff 	mov.w	r4, #4294967295
 8003416:	4620      	mov	r0, r4
 8003418:	bd70      	pop	{r4, r5, r6, pc}
 800341a:	1cc4      	adds	r4, r0, #3
 800341c:	f024 0403 	bic.w	r4, r4, #3
 8003420:	42a0      	cmp	r0, r4
 8003422:	d0f8      	beq.n	8003416 <sbrk_aligned+0x22>
 8003424:	1a21      	subs	r1, r4, r0
 8003426:	4628      	mov	r0, r5
 8003428:	f000 fd68 	bl	8003efc <_sbrk_r>
 800342c:	3001      	adds	r0, #1
 800342e:	d1f2      	bne.n	8003416 <sbrk_aligned+0x22>
 8003430:	e7ef      	b.n	8003412 <sbrk_aligned+0x1e>
 8003432:	bf00      	nop
 8003434:	20000394 	.word	0x20000394

08003438 <_malloc_r>:
 8003438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800343c:	1ccd      	adds	r5, r1, #3
 800343e:	f025 0503 	bic.w	r5, r5, #3
 8003442:	3508      	adds	r5, #8
 8003444:	2d0c      	cmp	r5, #12
 8003446:	bf38      	it	cc
 8003448:	250c      	movcc	r5, #12
 800344a:	2d00      	cmp	r5, #0
 800344c:	4606      	mov	r6, r0
 800344e:	db01      	blt.n	8003454 <_malloc_r+0x1c>
 8003450:	42a9      	cmp	r1, r5
 8003452:	d904      	bls.n	800345e <_malloc_r+0x26>
 8003454:	230c      	movs	r3, #12
 8003456:	6033      	str	r3, [r6, #0]
 8003458:	2000      	movs	r0, #0
 800345a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800345e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003534 <_malloc_r+0xfc>
 8003462:	f000 f869 	bl	8003538 <__malloc_lock>
 8003466:	f8d8 3000 	ldr.w	r3, [r8]
 800346a:	461c      	mov	r4, r3
 800346c:	bb44      	cbnz	r4, 80034c0 <_malloc_r+0x88>
 800346e:	4629      	mov	r1, r5
 8003470:	4630      	mov	r0, r6
 8003472:	f7ff ffbf 	bl	80033f4 <sbrk_aligned>
 8003476:	1c43      	adds	r3, r0, #1
 8003478:	4604      	mov	r4, r0
 800347a:	d158      	bne.n	800352e <_malloc_r+0xf6>
 800347c:	f8d8 4000 	ldr.w	r4, [r8]
 8003480:	4627      	mov	r7, r4
 8003482:	2f00      	cmp	r7, #0
 8003484:	d143      	bne.n	800350e <_malloc_r+0xd6>
 8003486:	2c00      	cmp	r4, #0
 8003488:	d04b      	beq.n	8003522 <_malloc_r+0xea>
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	4639      	mov	r1, r7
 800348e:	4630      	mov	r0, r6
 8003490:	eb04 0903 	add.w	r9, r4, r3
 8003494:	f000 fd32 	bl	8003efc <_sbrk_r>
 8003498:	4581      	cmp	r9, r0
 800349a:	d142      	bne.n	8003522 <_malloc_r+0xea>
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	4630      	mov	r0, r6
 80034a0:	1a6d      	subs	r5, r5, r1
 80034a2:	4629      	mov	r1, r5
 80034a4:	f7ff ffa6 	bl	80033f4 <sbrk_aligned>
 80034a8:	3001      	adds	r0, #1
 80034aa:	d03a      	beq.n	8003522 <_malloc_r+0xea>
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	442b      	add	r3, r5
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	f8d8 3000 	ldr.w	r3, [r8]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	bb62      	cbnz	r2, 8003514 <_malloc_r+0xdc>
 80034ba:	f8c8 7000 	str.w	r7, [r8]
 80034be:	e00f      	b.n	80034e0 <_malloc_r+0xa8>
 80034c0:	6822      	ldr	r2, [r4, #0]
 80034c2:	1b52      	subs	r2, r2, r5
 80034c4:	d420      	bmi.n	8003508 <_malloc_r+0xd0>
 80034c6:	2a0b      	cmp	r2, #11
 80034c8:	d917      	bls.n	80034fa <_malloc_r+0xc2>
 80034ca:	1961      	adds	r1, r4, r5
 80034cc:	42a3      	cmp	r3, r4
 80034ce:	6025      	str	r5, [r4, #0]
 80034d0:	bf18      	it	ne
 80034d2:	6059      	strne	r1, [r3, #4]
 80034d4:	6863      	ldr	r3, [r4, #4]
 80034d6:	bf08      	it	eq
 80034d8:	f8c8 1000 	streq.w	r1, [r8]
 80034dc:	5162      	str	r2, [r4, r5]
 80034de:	604b      	str	r3, [r1, #4]
 80034e0:	4630      	mov	r0, r6
 80034e2:	f000 f82f 	bl	8003544 <__malloc_unlock>
 80034e6:	f104 000b 	add.w	r0, r4, #11
 80034ea:	1d23      	adds	r3, r4, #4
 80034ec:	f020 0007 	bic.w	r0, r0, #7
 80034f0:	1ac2      	subs	r2, r0, r3
 80034f2:	bf1c      	itt	ne
 80034f4:	1a1b      	subne	r3, r3, r0
 80034f6:	50a3      	strne	r3, [r4, r2]
 80034f8:	e7af      	b.n	800345a <_malloc_r+0x22>
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	42a3      	cmp	r3, r4
 80034fe:	bf0c      	ite	eq
 8003500:	f8c8 2000 	streq.w	r2, [r8]
 8003504:	605a      	strne	r2, [r3, #4]
 8003506:	e7eb      	b.n	80034e0 <_malloc_r+0xa8>
 8003508:	4623      	mov	r3, r4
 800350a:	6864      	ldr	r4, [r4, #4]
 800350c:	e7ae      	b.n	800346c <_malloc_r+0x34>
 800350e:	463c      	mov	r4, r7
 8003510:	687f      	ldr	r7, [r7, #4]
 8003512:	e7b6      	b.n	8003482 <_malloc_r+0x4a>
 8003514:	461a      	mov	r2, r3
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	42a3      	cmp	r3, r4
 800351a:	d1fb      	bne.n	8003514 <_malloc_r+0xdc>
 800351c:	2300      	movs	r3, #0
 800351e:	6053      	str	r3, [r2, #4]
 8003520:	e7de      	b.n	80034e0 <_malloc_r+0xa8>
 8003522:	230c      	movs	r3, #12
 8003524:	4630      	mov	r0, r6
 8003526:	6033      	str	r3, [r6, #0]
 8003528:	f000 f80c 	bl	8003544 <__malloc_unlock>
 800352c:	e794      	b.n	8003458 <_malloc_r+0x20>
 800352e:	6005      	str	r5, [r0, #0]
 8003530:	e7d6      	b.n	80034e0 <_malloc_r+0xa8>
 8003532:	bf00      	nop
 8003534:	20000398 	.word	0x20000398

08003538 <__malloc_lock>:
 8003538:	4801      	ldr	r0, [pc, #4]	@ (8003540 <__malloc_lock+0x8>)
 800353a:	f7ff bf10 	b.w	800335e <__retarget_lock_acquire_recursive>
 800353e:	bf00      	nop
 8003540:	20000390 	.word	0x20000390

08003544 <__malloc_unlock>:
 8003544:	4801      	ldr	r0, [pc, #4]	@ (800354c <__malloc_unlock+0x8>)
 8003546:	f7ff bf0b 	b.w	8003360 <__retarget_lock_release_recursive>
 800354a:	bf00      	nop
 800354c:	20000390 	.word	0x20000390

08003550 <__ssputs_r>:
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	461f      	mov	r7, r3
 8003556:	688e      	ldr	r6, [r1, #8]
 8003558:	4682      	mov	sl, r0
 800355a:	42be      	cmp	r6, r7
 800355c:	460c      	mov	r4, r1
 800355e:	4690      	mov	r8, r2
 8003560:	680b      	ldr	r3, [r1, #0]
 8003562:	d82d      	bhi.n	80035c0 <__ssputs_r+0x70>
 8003564:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003568:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800356c:	d026      	beq.n	80035bc <__ssputs_r+0x6c>
 800356e:	6965      	ldr	r5, [r4, #20]
 8003570:	6909      	ldr	r1, [r1, #16]
 8003572:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003576:	eba3 0901 	sub.w	r9, r3, r1
 800357a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800357e:	1c7b      	adds	r3, r7, #1
 8003580:	444b      	add	r3, r9
 8003582:	106d      	asrs	r5, r5, #1
 8003584:	429d      	cmp	r5, r3
 8003586:	bf38      	it	cc
 8003588:	461d      	movcc	r5, r3
 800358a:	0553      	lsls	r3, r2, #21
 800358c:	d527      	bpl.n	80035de <__ssputs_r+0x8e>
 800358e:	4629      	mov	r1, r5
 8003590:	f7ff ff52 	bl	8003438 <_malloc_r>
 8003594:	4606      	mov	r6, r0
 8003596:	b360      	cbz	r0, 80035f2 <__ssputs_r+0xa2>
 8003598:	464a      	mov	r2, r9
 800359a:	6921      	ldr	r1, [r4, #16]
 800359c:	f000 fccc 	bl	8003f38 <memcpy>
 80035a0:	89a3      	ldrh	r3, [r4, #12]
 80035a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80035a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035aa:	81a3      	strh	r3, [r4, #12]
 80035ac:	6126      	str	r6, [r4, #16]
 80035ae:	444e      	add	r6, r9
 80035b0:	6026      	str	r6, [r4, #0]
 80035b2:	463e      	mov	r6, r7
 80035b4:	6165      	str	r5, [r4, #20]
 80035b6:	eba5 0509 	sub.w	r5, r5, r9
 80035ba:	60a5      	str	r5, [r4, #8]
 80035bc:	42be      	cmp	r6, r7
 80035be:	d900      	bls.n	80035c2 <__ssputs_r+0x72>
 80035c0:	463e      	mov	r6, r7
 80035c2:	4632      	mov	r2, r6
 80035c4:	4641      	mov	r1, r8
 80035c6:	6820      	ldr	r0, [r4, #0]
 80035c8:	f000 fc7e 	bl	8003ec8 <memmove>
 80035cc:	2000      	movs	r0, #0
 80035ce:	68a3      	ldr	r3, [r4, #8]
 80035d0:	1b9b      	subs	r3, r3, r6
 80035d2:	60a3      	str	r3, [r4, #8]
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	4433      	add	r3, r6
 80035d8:	6023      	str	r3, [r4, #0]
 80035da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035de:	462a      	mov	r2, r5
 80035e0:	f000 fcb8 	bl	8003f54 <_realloc_r>
 80035e4:	4606      	mov	r6, r0
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d1e0      	bne.n	80035ac <__ssputs_r+0x5c>
 80035ea:	4650      	mov	r0, sl
 80035ec:	6921      	ldr	r1, [r4, #16]
 80035ee:	f7ff feb9 	bl	8003364 <_free_r>
 80035f2:	230c      	movs	r3, #12
 80035f4:	f8ca 3000 	str.w	r3, [sl]
 80035f8:	89a3      	ldrh	r3, [r4, #12]
 80035fa:	f04f 30ff 	mov.w	r0, #4294967295
 80035fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003602:	81a3      	strh	r3, [r4, #12]
 8003604:	e7e9      	b.n	80035da <__ssputs_r+0x8a>
	...

08003608 <_svfiprintf_r>:
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	4698      	mov	r8, r3
 800360e:	898b      	ldrh	r3, [r1, #12]
 8003610:	4607      	mov	r7, r0
 8003612:	061b      	lsls	r3, r3, #24
 8003614:	460d      	mov	r5, r1
 8003616:	4614      	mov	r4, r2
 8003618:	b09d      	sub	sp, #116	@ 0x74
 800361a:	d510      	bpl.n	800363e <_svfiprintf_r+0x36>
 800361c:	690b      	ldr	r3, [r1, #16]
 800361e:	b973      	cbnz	r3, 800363e <_svfiprintf_r+0x36>
 8003620:	2140      	movs	r1, #64	@ 0x40
 8003622:	f7ff ff09 	bl	8003438 <_malloc_r>
 8003626:	6028      	str	r0, [r5, #0]
 8003628:	6128      	str	r0, [r5, #16]
 800362a:	b930      	cbnz	r0, 800363a <_svfiprintf_r+0x32>
 800362c:	230c      	movs	r3, #12
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	f04f 30ff 	mov.w	r0, #4294967295
 8003634:	b01d      	add	sp, #116	@ 0x74
 8003636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800363a:	2340      	movs	r3, #64	@ 0x40
 800363c:	616b      	str	r3, [r5, #20]
 800363e:	2300      	movs	r3, #0
 8003640:	9309      	str	r3, [sp, #36]	@ 0x24
 8003642:	2320      	movs	r3, #32
 8003644:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003648:	2330      	movs	r3, #48	@ 0x30
 800364a:	f04f 0901 	mov.w	r9, #1
 800364e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003652:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80037ec <_svfiprintf_r+0x1e4>
 8003656:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800365a:	4623      	mov	r3, r4
 800365c:	469a      	mov	sl, r3
 800365e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003662:	b10a      	cbz	r2, 8003668 <_svfiprintf_r+0x60>
 8003664:	2a25      	cmp	r2, #37	@ 0x25
 8003666:	d1f9      	bne.n	800365c <_svfiprintf_r+0x54>
 8003668:	ebba 0b04 	subs.w	fp, sl, r4
 800366c:	d00b      	beq.n	8003686 <_svfiprintf_r+0x7e>
 800366e:	465b      	mov	r3, fp
 8003670:	4622      	mov	r2, r4
 8003672:	4629      	mov	r1, r5
 8003674:	4638      	mov	r0, r7
 8003676:	f7ff ff6b 	bl	8003550 <__ssputs_r>
 800367a:	3001      	adds	r0, #1
 800367c:	f000 80a7 	beq.w	80037ce <_svfiprintf_r+0x1c6>
 8003680:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003682:	445a      	add	r2, fp
 8003684:	9209      	str	r2, [sp, #36]	@ 0x24
 8003686:	f89a 3000 	ldrb.w	r3, [sl]
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 809f 	beq.w	80037ce <_svfiprintf_r+0x1c6>
 8003690:	2300      	movs	r3, #0
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800369a:	f10a 0a01 	add.w	sl, sl, #1
 800369e:	9304      	str	r3, [sp, #16]
 80036a0:	9307      	str	r3, [sp, #28]
 80036a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80036a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80036a8:	4654      	mov	r4, sl
 80036aa:	2205      	movs	r2, #5
 80036ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036b0:	484e      	ldr	r0, [pc, #312]	@ (80037ec <_svfiprintf_r+0x1e4>)
 80036b2:	f000 fc33 	bl	8003f1c <memchr>
 80036b6:	9a04      	ldr	r2, [sp, #16]
 80036b8:	b9d8      	cbnz	r0, 80036f2 <_svfiprintf_r+0xea>
 80036ba:	06d0      	lsls	r0, r2, #27
 80036bc:	bf44      	itt	mi
 80036be:	2320      	movmi	r3, #32
 80036c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036c4:	0711      	lsls	r1, r2, #28
 80036c6:	bf44      	itt	mi
 80036c8:	232b      	movmi	r3, #43	@ 0x2b
 80036ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80036ce:	f89a 3000 	ldrb.w	r3, [sl]
 80036d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80036d4:	d015      	beq.n	8003702 <_svfiprintf_r+0xfa>
 80036d6:	4654      	mov	r4, sl
 80036d8:	2000      	movs	r0, #0
 80036da:	f04f 0c0a 	mov.w	ip, #10
 80036de:	9a07      	ldr	r2, [sp, #28]
 80036e0:	4621      	mov	r1, r4
 80036e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036e6:	3b30      	subs	r3, #48	@ 0x30
 80036e8:	2b09      	cmp	r3, #9
 80036ea:	d94b      	bls.n	8003784 <_svfiprintf_r+0x17c>
 80036ec:	b1b0      	cbz	r0, 800371c <_svfiprintf_r+0x114>
 80036ee:	9207      	str	r2, [sp, #28]
 80036f0:	e014      	b.n	800371c <_svfiprintf_r+0x114>
 80036f2:	eba0 0308 	sub.w	r3, r0, r8
 80036f6:	fa09 f303 	lsl.w	r3, r9, r3
 80036fa:	4313      	orrs	r3, r2
 80036fc:	46a2      	mov	sl, r4
 80036fe:	9304      	str	r3, [sp, #16]
 8003700:	e7d2      	b.n	80036a8 <_svfiprintf_r+0xa0>
 8003702:	9b03      	ldr	r3, [sp, #12]
 8003704:	1d19      	adds	r1, r3, #4
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	9103      	str	r1, [sp, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	bfbb      	ittet	lt
 800370e:	425b      	neglt	r3, r3
 8003710:	f042 0202 	orrlt.w	r2, r2, #2
 8003714:	9307      	strge	r3, [sp, #28]
 8003716:	9307      	strlt	r3, [sp, #28]
 8003718:	bfb8      	it	lt
 800371a:	9204      	strlt	r2, [sp, #16]
 800371c:	7823      	ldrb	r3, [r4, #0]
 800371e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003720:	d10a      	bne.n	8003738 <_svfiprintf_r+0x130>
 8003722:	7863      	ldrb	r3, [r4, #1]
 8003724:	2b2a      	cmp	r3, #42	@ 0x2a
 8003726:	d132      	bne.n	800378e <_svfiprintf_r+0x186>
 8003728:	9b03      	ldr	r3, [sp, #12]
 800372a:	3402      	adds	r4, #2
 800372c:	1d1a      	adds	r2, r3, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	9203      	str	r2, [sp, #12]
 8003732:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003736:	9305      	str	r3, [sp, #20]
 8003738:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80037f0 <_svfiprintf_r+0x1e8>
 800373c:	2203      	movs	r2, #3
 800373e:	4650      	mov	r0, sl
 8003740:	7821      	ldrb	r1, [r4, #0]
 8003742:	f000 fbeb 	bl	8003f1c <memchr>
 8003746:	b138      	cbz	r0, 8003758 <_svfiprintf_r+0x150>
 8003748:	2240      	movs	r2, #64	@ 0x40
 800374a:	9b04      	ldr	r3, [sp, #16]
 800374c:	eba0 000a 	sub.w	r0, r0, sl
 8003750:	4082      	lsls	r2, r0
 8003752:	4313      	orrs	r3, r2
 8003754:	3401      	adds	r4, #1
 8003756:	9304      	str	r3, [sp, #16]
 8003758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800375c:	2206      	movs	r2, #6
 800375e:	4825      	ldr	r0, [pc, #148]	@ (80037f4 <_svfiprintf_r+0x1ec>)
 8003760:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003764:	f000 fbda 	bl	8003f1c <memchr>
 8003768:	2800      	cmp	r0, #0
 800376a:	d036      	beq.n	80037da <_svfiprintf_r+0x1d2>
 800376c:	4b22      	ldr	r3, [pc, #136]	@ (80037f8 <_svfiprintf_r+0x1f0>)
 800376e:	bb1b      	cbnz	r3, 80037b8 <_svfiprintf_r+0x1b0>
 8003770:	9b03      	ldr	r3, [sp, #12]
 8003772:	3307      	adds	r3, #7
 8003774:	f023 0307 	bic.w	r3, r3, #7
 8003778:	3308      	adds	r3, #8
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800377e:	4433      	add	r3, r6
 8003780:	9309      	str	r3, [sp, #36]	@ 0x24
 8003782:	e76a      	b.n	800365a <_svfiprintf_r+0x52>
 8003784:	460c      	mov	r4, r1
 8003786:	2001      	movs	r0, #1
 8003788:	fb0c 3202 	mla	r2, ip, r2, r3
 800378c:	e7a8      	b.n	80036e0 <_svfiprintf_r+0xd8>
 800378e:	2300      	movs	r3, #0
 8003790:	f04f 0c0a 	mov.w	ip, #10
 8003794:	4619      	mov	r1, r3
 8003796:	3401      	adds	r4, #1
 8003798:	9305      	str	r3, [sp, #20]
 800379a:	4620      	mov	r0, r4
 800379c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037a0:	3a30      	subs	r2, #48	@ 0x30
 80037a2:	2a09      	cmp	r2, #9
 80037a4:	d903      	bls.n	80037ae <_svfiprintf_r+0x1a6>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0c6      	beq.n	8003738 <_svfiprintf_r+0x130>
 80037aa:	9105      	str	r1, [sp, #20]
 80037ac:	e7c4      	b.n	8003738 <_svfiprintf_r+0x130>
 80037ae:	4604      	mov	r4, r0
 80037b0:	2301      	movs	r3, #1
 80037b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80037b6:	e7f0      	b.n	800379a <_svfiprintf_r+0x192>
 80037b8:	ab03      	add	r3, sp, #12
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	462a      	mov	r2, r5
 80037be:	4638      	mov	r0, r7
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <_svfiprintf_r+0x1f4>)
 80037c2:	a904      	add	r1, sp, #16
 80037c4:	f3af 8000 	nop.w
 80037c8:	1c42      	adds	r2, r0, #1
 80037ca:	4606      	mov	r6, r0
 80037cc:	d1d6      	bne.n	800377c <_svfiprintf_r+0x174>
 80037ce:	89ab      	ldrh	r3, [r5, #12]
 80037d0:	065b      	lsls	r3, r3, #25
 80037d2:	f53f af2d 	bmi.w	8003630 <_svfiprintf_r+0x28>
 80037d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80037d8:	e72c      	b.n	8003634 <_svfiprintf_r+0x2c>
 80037da:	ab03      	add	r3, sp, #12
 80037dc:	9300      	str	r3, [sp, #0]
 80037de:	462a      	mov	r2, r5
 80037e0:	4638      	mov	r0, r7
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <_svfiprintf_r+0x1f4>)
 80037e4:	a904      	add	r1, sp, #16
 80037e6:	f000 f9bd 	bl	8003b64 <_printf_i>
 80037ea:	e7ed      	b.n	80037c8 <_svfiprintf_r+0x1c0>
 80037ec:	0800453a 	.word	0x0800453a
 80037f0:	08004540 	.word	0x08004540
 80037f4:	08004544 	.word	0x08004544
 80037f8:	00000000 	.word	0x00000000
 80037fc:	08003551 	.word	0x08003551

08003800 <__sfputc_r>:
 8003800:	6893      	ldr	r3, [r2, #8]
 8003802:	b410      	push	{r4}
 8003804:	3b01      	subs	r3, #1
 8003806:	2b00      	cmp	r3, #0
 8003808:	6093      	str	r3, [r2, #8]
 800380a:	da07      	bge.n	800381c <__sfputc_r+0x1c>
 800380c:	6994      	ldr	r4, [r2, #24]
 800380e:	42a3      	cmp	r3, r4
 8003810:	db01      	blt.n	8003816 <__sfputc_r+0x16>
 8003812:	290a      	cmp	r1, #10
 8003814:	d102      	bne.n	800381c <__sfputc_r+0x1c>
 8003816:	bc10      	pop	{r4}
 8003818:	f000 bac2 	b.w	8003da0 <__swbuf_r>
 800381c:	6813      	ldr	r3, [r2, #0]
 800381e:	1c58      	adds	r0, r3, #1
 8003820:	6010      	str	r0, [r2, #0]
 8003822:	7019      	strb	r1, [r3, #0]
 8003824:	4608      	mov	r0, r1
 8003826:	bc10      	pop	{r4}
 8003828:	4770      	bx	lr

0800382a <__sfputs_r>:
 800382a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382c:	4606      	mov	r6, r0
 800382e:	460f      	mov	r7, r1
 8003830:	4614      	mov	r4, r2
 8003832:	18d5      	adds	r5, r2, r3
 8003834:	42ac      	cmp	r4, r5
 8003836:	d101      	bne.n	800383c <__sfputs_r+0x12>
 8003838:	2000      	movs	r0, #0
 800383a:	e007      	b.n	800384c <__sfputs_r+0x22>
 800383c:	463a      	mov	r2, r7
 800383e:	4630      	mov	r0, r6
 8003840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003844:	f7ff ffdc 	bl	8003800 <__sfputc_r>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d1f3      	bne.n	8003834 <__sfputs_r+0xa>
 800384c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003850 <_vfiprintf_r>:
 8003850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003854:	460d      	mov	r5, r1
 8003856:	4614      	mov	r4, r2
 8003858:	4698      	mov	r8, r3
 800385a:	4606      	mov	r6, r0
 800385c:	b09d      	sub	sp, #116	@ 0x74
 800385e:	b118      	cbz	r0, 8003868 <_vfiprintf_r+0x18>
 8003860:	6a03      	ldr	r3, [r0, #32]
 8003862:	b90b      	cbnz	r3, 8003868 <_vfiprintf_r+0x18>
 8003864:	f7ff fc40 	bl	80030e8 <__sinit>
 8003868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800386a:	07d9      	lsls	r1, r3, #31
 800386c:	d405      	bmi.n	800387a <_vfiprintf_r+0x2a>
 800386e:	89ab      	ldrh	r3, [r5, #12]
 8003870:	059a      	lsls	r2, r3, #22
 8003872:	d402      	bmi.n	800387a <_vfiprintf_r+0x2a>
 8003874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003876:	f7ff fd72 	bl	800335e <__retarget_lock_acquire_recursive>
 800387a:	89ab      	ldrh	r3, [r5, #12]
 800387c:	071b      	lsls	r3, r3, #28
 800387e:	d501      	bpl.n	8003884 <_vfiprintf_r+0x34>
 8003880:	692b      	ldr	r3, [r5, #16]
 8003882:	b99b      	cbnz	r3, 80038ac <_vfiprintf_r+0x5c>
 8003884:	4629      	mov	r1, r5
 8003886:	4630      	mov	r0, r6
 8003888:	f000 fac8 	bl	8003e1c <__swsetup_r>
 800388c:	b170      	cbz	r0, 80038ac <_vfiprintf_r+0x5c>
 800388e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003890:	07dc      	lsls	r4, r3, #31
 8003892:	d504      	bpl.n	800389e <_vfiprintf_r+0x4e>
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	b01d      	add	sp, #116	@ 0x74
 800389a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800389e:	89ab      	ldrh	r3, [r5, #12]
 80038a0:	0598      	lsls	r0, r3, #22
 80038a2:	d4f7      	bmi.n	8003894 <_vfiprintf_r+0x44>
 80038a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80038a6:	f7ff fd5b 	bl	8003360 <__retarget_lock_release_recursive>
 80038aa:	e7f3      	b.n	8003894 <_vfiprintf_r+0x44>
 80038ac:	2300      	movs	r3, #0
 80038ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80038b0:	2320      	movs	r3, #32
 80038b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80038b6:	2330      	movs	r3, #48	@ 0x30
 80038b8:	f04f 0901 	mov.w	r9, #1
 80038bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80038c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003a6c <_vfiprintf_r+0x21c>
 80038c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80038c8:	4623      	mov	r3, r4
 80038ca:	469a      	mov	sl, r3
 80038cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038d0:	b10a      	cbz	r2, 80038d6 <_vfiprintf_r+0x86>
 80038d2:	2a25      	cmp	r2, #37	@ 0x25
 80038d4:	d1f9      	bne.n	80038ca <_vfiprintf_r+0x7a>
 80038d6:	ebba 0b04 	subs.w	fp, sl, r4
 80038da:	d00b      	beq.n	80038f4 <_vfiprintf_r+0xa4>
 80038dc:	465b      	mov	r3, fp
 80038de:	4622      	mov	r2, r4
 80038e0:	4629      	mov	r1, r5
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7ff ffa1 	bl	800382a <__sfputs_r>
 80038e8:	3001      	adds	r0, #1
 80038ea:	f000 80a7 	beq.w	8003a3c <_vfiprintf_r+0x1ec>
 80038ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80038f0:	445a      	add	r2, fp
 80038f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80038f4:	f89a 3000 	ldrb.w	r3, [sl]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f000 809f 	beq.w	8003a3c <_vfiprintf_r+0x1ec>
 80038fe:	2300      	movs	r3, #0
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003908:	f10a 0a01 	add.w	sl, sl, #1
 800390c:	9304      	str	r3, [sp, #16]
 800390e:	9307      	str	r3, [sp, #28]
 8003910:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003914:	931a      	str	r3, [sp, #104]	@ 0x68
 8003916:	4654      	mov	r4, sl
 8003918:	2205      	movs	r2, #5
 800391a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800391e:	4853      	ldr	r0, [pc, #332]	@ (8003a6c <_vfiprintf_r+0x21c>)
 8003920:	f000 fafc 	bl	8003f1c <memchr>
 8003924:	9a04      	ldr	r2, [sp, #16]
 8003926:	b9d8      	cbnz	r0, 8003960 <_vfiprintf_r+0x110>
 8003928:	06d1      	lsls	r1, r2, #27
 800392a:	bf44      	itt	mi
 800392c:	2320      	movmi	r3, #32
 800392e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003932:	0713      	lsls	r3, r2, #28
 8003934:	bf44      	itt	mi
 8003936:	232b      	movmi	r3, #43	@ 0x2b
 8003938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800393c:	f89a 3000 	ldrb.w	r3, [sl]
 8003940:	2b2a      	cmp	r3, #42	@ 0x2a
 8003942:	d015      	beq.n	8003970 <_vfiprintf_r+0x120>
 8003944:	4654      	mov	r4, sl
 8003946:	2000      	movs	r0, #0
 8003948:	f04f 0c0a 	mov.w	ip, #10
 800394c:	9a07      	ldr	r2, [sp, #28]
 800394e:	4621      	mov	r1, r4
 8003950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003954:	3b30      	subs	r3, #48	@ 0x30
 8003956:	2b09      	cmp	r3, #9
 8003958:	d94b      	bls.n	80039f2 <_vfiprintf_r+0x1a2>
 800395a:	b1b0      	cbz	r0, 800398a <_vfiprintf_r+0x13a>
 800395c:	9207      	str	r2, [sp, #28]
 800395e:	e014      	b.n	800398a <_vfiprintf_r+0x13a>
 8003960:	eba0 0308 	sub.w	r3, r0, r8
 8003964:	fa09 f303 	lsl.w	r3, r9, r3
 8003968:	4313      	orrs	r3, r2
 800396a:	46a2      	mov	sl, r4
 800396c:	9304      	str	r3, [sp, #16]
 800396e:	e7d2      	b.n	8003916 <_vfiprintf_r+0xc6>
 8003970:	9b03      	ldr	r3, [sp, #12]
 8003972:	1d19      	adds	r1, r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	9103      	str	r1, [sp, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	bfbb      	ittet	lt
 800397c:	425b      	neglt	r3, r3
 800397e:	f042 0202 	orrlt.w	r2, r2, #2
 8003982:	9307      	strge	r3, [sp, #28]
 8003984:	9307      	strlt	r3, [sp, #28]
 8003986:	bfb8      	it	lt
 8003988:	9204      	strlt	r2, [sp, #16]
 800398a:	7823      	ldrb	r3, [r4, #0]
 800398c:	2b2e      	cmp	r3, #46	@ 0x2e
 800398e:	d10a      	bne.n	80039a6 <_vfiprintf_r+0x156>
 8003990:	7863      	ldrb	r3, [r4, #1]
 8003992:	2b2a      	cmp	r3, #42	@ 0x2a
 8003994:	d132      	bne.n	80039fc <_vfiprintf_r+0x1ac>
 8003996:	9b03      	ldr	r3, [sp, #12]
 8003998:	3402      	adds	r4, #2
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	9203      	str	r2, [sp, #12]
 80039a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80039a4:	9305      	str	r3, [sp, #20]
 80039a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003a70 <_vfiprintf_r+0x220>
 80039aa:	2203      	movs	r2, #3
 80039ac:	4650      	mov	r0, sl
 80039ae:	7821      	ldrb	r1, [r4, #0]
 80039b0:	f000 fab4 	bl	8003f1c <memchr>
 80039b4:	b138      	cbz	r0, 80039c6 <_vfiprintf_r+0x176>
 80039b6:	2240      	movs	r2, #64	@ 0x40
 80039b8:	9b04      	ldr	r3, [sp, #16]
 80039ba:	eba0 000a 	sub.w	r0, r0, sl
 80039be:	4082      	lsls	r2, r0
 80039c0:	4313      	orrs	r3, r2
 80039c2:	3401      	adds	r4, #1
 80039c4:	9304      	str	r3, [sp, #16]
 80039c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ca:	2206      	movs	r2, #6
 80039cc:	4829      	ldr	r0, [pc, #164]	@ (8003a74 <_vfiprintf_r+0x224>)
 80039ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80039d2:	f000 faa3 	bl	8003f1c <memchr>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d03f      	beq.n	8003a5a <_vfiprintf_r+0x20a>
 80039da:	4b27      	ldr	r3, [pc, #156]	@ (8003a78 <_vfiprintf_r+0x228>)
 80039dc:	bb1b      	cbnz	r3, 8003a26 <_vfiprintf_r+0x1d6>
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	3307      	adds	r3, #7
 80039e2:	f023 0307 	bic.w	r3, r3, #7
 80039e6:	3308      	adds	r3, #8
 80039e8:	9303      	str	r3, [sp, #12]
 80039ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80039ec:	443b      	add	r3, r7
 80039ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80039f0:	e76a      	b.n	80038c8 <_vfiprintf_r+0x78>
 80039f2:	460c      	mov	r4, r1
 80039f4:	2001      	movs	r0, #1
 80039f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80039fa:	e7a8      	b.n	800394e <_vfiprintf_r+0xfe>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f04f 0c0a 	mov.w	ip, #10
 8003a02:	4619      	mov	r1, r3
 8003a04:	3401      	adds	r4, #1
 8003a06:	9305      	str	r3, [sp, #20]
 8003a08:	4620      	mov	r0, r4
 8003a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a0e:	3a30      	subs	r2, #48	@ 0x30
 8003a10:	2a09      	cmp	r2, #9
 8003a12:	d903      	bls.n	8003a1c <_vfiprintf_r+0x1cc>
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0c6      	beq.n	80039a6 <_vfiprintf_r+0x156>
 8003a18:	9105      	str	r1, [sp, #20]
 8003a1a:	e7c4      	b.n	80039a6 <_vfiprintf_r+0x156>
 8003a1c:	4604      	mov	r4, r0
 8003a1e:	2301      	movs	r3, #1
 8003a20:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a24:	e7f0      	b.n	8003a08 <_vfiprintf_r+0x1b8>
 8003a26:	ab03      	add	r3, sp, #12
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	462a      	mov	r2, r5
 8003a2c:	4630      	mov	r0, r6
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <_vfiprintf_r+0x22c>)
 8003a30:	a904      	add	r1, sp, #16
 8003a32:	f3af 8000 	nop.w
 8003a36:	4607      	mov	r7, r0
 8003a38:	1c78      	adds	r0, r7, #1
 8003a3a:	d1d6      	bne.n	80039ea <_vfiprintf_r+0x19a>
 8003a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a3e:	07d9      	lsls	r1, r3, #31
 8003a40:	d405      	bmi.n	8003a4e <_vfiprintf_r+0x1fe>
 8003a42:	89ab      	ldrh	r3, [r5, #12]
 8003a44:	059a      	lsls	r2, r3, #22
 8003a46:	d402      	bmi.n	8003a4e <_vfiprintf_r+0x1fe>
 8003a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a4a:	f7ff fc89 	bl	8003360 <__retarget_lock_release_recursive>
 8003a4e:	89ab      	ldrh	r3, [r5, #12]
 8003a50:	065b      	lsls	r3, r3, #25
 8003a52:	f53f af1f 	bmi.w	8003894 <_vfiprintf_r+0x44>
 8003a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003a58:	e71e      	b.n	8003898 <_vfiprintf_r+0x48>
 8003a5a:	ab03      	add	r3, sp, #12
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	462a      	mov	r2, r5
 8003a60:	4630      	mov	r0, r6
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <_vfiprintf_r+0x22c>)
 8003a64:	a904      	add	r1, sp, #16
 8003a66:	f000 f87d 	bl	8003b64 <_printf_i>
 8003a6a:	e7e4      	b.n	8003a36 <_vfiprintf_r+0x1e6>
 8003a6c:	0800453a 	.word	0x0800453a
 8003a70:	08004540 	.word	0x08004540
 8003a74:	08004544 	.word	0x08004544
 8003a78:	00000000 	.word	0x00000000
 8003a7c:	0800382b 	.word	0x0800382b

08003a80 <_printf_common>:
 8003a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a84:	4616      	mov	r6, r2
 8003a86:	4698      	mov	r8, r3
 8003a88:	688a      	ldr	r2, [r1, #8]
 8003a8a:	690b      	ldr	r3, [r1, #16]
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bfb8      	it	lt
 8003a92:	4613      	movlt	r3, r2
 8003a94:	6033      	str	r3, [r6, #0]
 8003a96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003aa0:	b10a      	cbz	r2, 8003aa6 <_printf_common+0x26>
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	6033      	str	r3, [r6, #0]
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	0699      	lsls	r1, r3, #26
 8003aaa:	bf42      	ittt	mi
 8003aac:	6833      	ldrmi	r3, [r6, #0]
 8003aae:	3302      	addmi	r3, #2
 8003ab0:	6033      	strmi	r3, [r6, #0]
 8003ab2:	6825      	ldr	r5, [r4, #0]
 8003ab4:	f015 0506 	ands.w	r5, r5, #6
 8003ab8:	d106      	bne.n	8003ac8 <_printf_common+0x48>
 8003aba:	f104 0a19 	add.w	sl, r4, #25
 8003abe:	68e3      	ldr	r3, [r4, #12]
 8003ac0:	6832      	ldr	r2, [r6, #0]
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	42ab      	cmp	r3, r5
 8003ac6:	dc2b      	bgt.n	8003b20 <_printf_common+0xa0>
 8003ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003acc:	6822      	ldr	r2, [r4, #0]
 8003ace:	3b00      	subs	r3, #0
 8003ad0:	bf18      	it	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	0692      	lsls	r2, r2, #26
 8003ad6:	d430      	bmi.n	8003b3a <_printf_common+0xba>
 8003ad8:	4641      	mov	r1, r8
 8003ada:	4638      	mov	r0, r7
 8003adc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ae0:	47c8      	blx	r9
 8003ae2:	3001      	adds	r0, #1
 8003ae4:	d023      	beq.n	8003b2e <_printf_common+0xae>
 8003ae6:	6823      	ldr	r3, [r4, #0]
 8003ae8:	6922      	ldr	r2, [r4, #16]
 8003aea:	f003 0306 	and.w	r3, r3, #6
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	bf14      	ite	ne
 8003af2:	2500      	movne	r5, #0
 8003af4:	6833      	ldreq	r3, [r6, #0]
 8003af6:	f04f 0600 	mov.w	r6, #0
 8003afa:	bf08      	it	eq
 8003afc:	68e5      	ldreq	r5, [r4, #12]
 8003afe:	f104 041a 	add.w	r4, r4, #26
 8003b02:	bf08      	it	eq
 8003b04:	1aed      	subeq	r5, r5, r3
 8003b06:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003b0a:	bf08      	it	eq
 8003b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b10:	4293      	cmp	r3, r2
 8003b12:	bfc4      	itt	gt
 8003b14:	1a9b      	subgt	r3, r3, r2
 8003b16:	18ed      	addgt	r5, r5, r3
 8003b18:	42b5      	cmp	r5, r6
 8003b1a:	d11a      	bne.n	8003b52 <_printf_common+0xd2>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e008      	b.n	8003b32 <_printf_common+0xb2>
 8003b20:	2301      	movs	r3, #1
 8003b22:	4652      	mov	r2, sl
 8003b24:	4641      	mov	r1, r8
 8003b26:	4638      	mov	r0, r7
 8003b28:	47c8      	blx	r9
 8003b2a:	3001      	adds	r0, #1
 8003b2c:	d103      	bne.n	8003b36 <_printf_common+0xb6>
 8003b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b36:	3501      	adds	r5, #1
 8003b38:	e7c1      	b.n	8003abe <_printf_common+0x3e>
 8003b3a:	2030      	movs	r0, #48	@ 0x30
 8003b3c:	18e1      	adds	r1, r4, r3
 8003b3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003b48:	4422      	add	r2, r4
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003b50:	e7c2      	b.n	8003ad8 <_printf_common+0x58>
 8003b52:	2301      	movs	r3, #1
 8003b54:	4622      	mov	r2, r4
 8003b56:	4641      	mov	r1, r8
 8003b58:	4638      	mov	r0, r7
 8003b5a:	47c8      	blx	r9
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d0e6      	beq.n	8003b2e <_printf_common+0xae>
 8003b60:	3601      	adds	r6, #1
 8003b62:	e7d9      	b.n	8003b18 <_printf_common+0x98>

08003b64 <_printf_i>:
 8003b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	7e0f      	ldrb	r7, [r1, #24]
 8003b6a:	4691      	mov	r9, r2
 8003b6c:	2f78      	cmp	r7, #120	@ 0x78
 8003b6e:	4680      	mov	r8, r0
 8003b70:	460c      	mov	r4, r1
 8003b72:	469a      	mov	sl, r3
 8003b74:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003b76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003b7a:	d807      	bhi.n	8003b8c <_printf_i+0x28>
 8003b7c:	2f62      	cmp	r7, #98	@ 0x62
 8003b7e:	d80a      	bhi.n	8003b96 <_printf_i+0x32>
 8003b80:	2f00      	cmp	r7, #0
 8003b82:	f000 80d1 	beq.w	8003d28 <_printf_i+0x1c4>
 8003b86:	2f58      	cmp	r7, #88	@ 0x58
 8003b88:	f000 80b8 	beq.w	8003cfc <_printf_i+0x198>
 8003b8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b94:	e03a      	b.n	8003c0c <_printf_i+0xa8>
 8003b96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b9a:	2b15      	cmp	r3, #21
 8003b9c:	d8f6      	bhi.n	8003b8c <_printf_i+0x28>
 8003b9e:	a101      	add	r1, pc, #4	@ (adr r1, 8003ba4 <_printf_i+0x40>)
 8003ba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ba4:	08003bfd 	.word	0x08003bfd
 8003ba8:	08003c11 	.word	0x08003c11
 8003bac:	08003b8d 	.word	0x08003b8d
 8003bb0:	08003b8d 	.word	0x08003b8d
 8003bb4:	08003b8d 	.word	0x08003b8d
 8003bb8:	08003b8d 	.word	0x08003b8d
 8003bbc:	08003c11 	.word	0x08003c11
 8003bc0:	08003b8d 	.word	0x08003b8d
 8003bc4:	08003b8d 	.word	0x08003b8d
 8003bc8:	08003b8d 	.word	0x08003b8d
 8003bcc:	08003b8d 	.word	0x08003b8d
 8003bd0:	08003d0f 	.word	0x08003d0f
 8003bd4:	08003c3b 	.word	0x08003c3b
 8003bd8:	08003cc9 	.word	0x08003cc9
 8003bdc:	08003b8d 	.word	0x08003b8d
 8003be0:	08003b8d 	.word	0x08003b8d
 8003be4:	08003d31 	.word	0x08003d31
 8003be8:	08003b8d 	.word	0x08003b8d
 8003bec:	08003c3b 	.word	0x08003c3b
 8003bf0:	08003b8d 	.word	0x08003b8d
 8003bf4:	08003b8d 	.word	0x08003b8d
 8003bf8:	08003cd1 	.word	0x08003cd1
 8003bfc:	6833      	ldr	r3, [r6, #0]
 8003bfe:	1d1a      	adds	r2, r3, #4
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6032      	str	r2, [r6, #0]
 8003c04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e09c      	b.n	8003d4a <_printf_i+0x1e6>
 8003c10:	6833      	ldr	r3, [r6, #0]
 8003c12:	6820      	ldr	r0, [r4, #0]
 8003c14:	1d19      	adds	r1, r3, #4
 8003c16:	6031      	str	r1, [r6, #0]
 8003c18:	0606      	lsls	r6, r0, #24
 8003c1a:	d501      	bpl.n	8003c20 <_printf_i+0xbc>
 8003c1c:	681d      	ldr	r5, [r3, #0]
 8003c1e:	e003      	b.n	8003c28 <_printf_i+0xc4>
 8003c20:	0645      	lsls	r5, r0, #25
 8003c22:	d5fb      	bpl.n	8003c1c <_printf_i+0xb8>
 8003c24:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c28:	2d00      	cmp	r5, #0
 8003c2a:	da03      	bge.n	8003c34 <_printf_i+0xd0>
 8003c2c:	232d      	movs	r3, #45	@ 0x2d
 8003c2e:	426d      	negs	r5, r5
 8003c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c34:	230a      	movs	r3, #10
 8003c36:	4858      	ldr	r0, [pc, #352]	@ (8003d98 <_printf_i+0x234>)
 8003c38:	e011      	b.n	8003c5e <_printf_i+0xfa>
 8003c3a:	6821      	ldr	r1, [r4, #0]
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	0608      	lsls	r0, r1, #24
 8003c40:	f853 5b04 	ldr.w	r5, [r3], #4
 8003c44:	d402      	bmi.n	8003c4c <_printf_i+0xe8>
 8003c46:	0649      	lsls	r1, r1, #25
 8003c48:	bf48      	it	mi
 8003c4a:	b2ad      	uxthmi	r5, r5
 8003c4c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003c4e:	6033      	str	r3, [r6, #0]
 8003c50:	bf14      	ite	ne
 8003c52:	230a      	movne	r3, #10
 8003c54:	2308      	moveq	r3, #8
 8003c56:	4850      	ldr	r0, [pc, #320]	@ (8003d98 <_printf_i+0x234>)
 8003c58:	2100      	movs	r1, #0
 8003c5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003c5e:	6866      	ldr	r6, [r4, #4]
 8003c60:	2e00      	cmp	r6, #0
 8003c62:	60a6      	str	r6, [r4, #8]
 8003c64:	db05      	blt.n	8003c72 <_printf_i+0x10e>
 8003c66:	6821      	ldr	r1, [r4, #0]
 8003c68:	432e      	orrs	r6, r5
 8003c6a:	f021 0104 	bic.w	r1, r1, #4
 8003c6e:	6021      	str	r1, [r4, #0]
 8003c70:	d04b      	beq.n	8003d0a <_printf_i+0x1a6>
 8003c72:	4616      	mov	r6, r2
 8003c74:	fbb5 f1f3 	udiv	r1, r5, r3
 8003c78:	fb03 5711 	mls	r7, r3, r1, r5
 8003c7c:	5dc7      	ldrb	r7, [r0, r7]
 8003c7e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c82:	462f      	mov	r7, r5
 8003c84:	42bb      	cmp	r3, r7
 8003c86:	460d      	mov	r5, r1
 8003c88:	d9f4      	bls.n	8003c74 <_printf_i+0x110>
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d10b      	bne.n	8003ca6 <_printf_i+0x142>
 8003c8e:	6823      	ldr	r3, [r4, #0]
 8003c90:	07df      	lsls	r7, r3, #31
 8003c92:	d508      	bpl.n	8003ca6 <_printf_i+0x142>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	6861      	ldr	r1, [r4, #4]
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	bfde      	ittt	le
 8003c9c:	2330      	movle	r3, #48	@ 0x30
 8003c9e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ca2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ca6:	1b92      	subs	r2, r2, r6
 8003ca8:	6122      	str	r2, [r4, #16]
 8003caa:	464b      	mov	r3, r9
 8003cac:	4621      	mov	r1, r4
 8003cae:	4640      	mov	r0, r8
 8003cb0:	f8cd a000 	str.w	sl, [sp]
 8003cb4:	aa03      	add	r2, sp, #12
 8003cb6:	f7ff fee3 	bl	8003a80 <_printf_common>
 8003cba:	3001      	adds	r0, #1
 8003cbc:	d14a      	bne.n	8003d54 <_printf_i+0x1f0>
 8003cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc2:	b004      	add	sp, #16
 8003cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc8:	6823      	ldr	r3, [r4, #0]
 8003cca:	f043 0320 	orr.w	r3, r3, #32
 8003cce:	6023      	str	r3, [r4, #0]
 8003cd0:	2778      	movs	r7, #120	@ 0x78
 8003cd2:	4832      	ldr	r0, [pc, #200]	@ (8003d9c <_printf_i+0x238>)
 8003cd4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	6831      	ldr	r1, [r6, #0]
 8003cdc:	061f      	lsls	r7, r3, #24
 8003cde:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ce2:	d402      	bmi.n	8003cea <_printf_i+0x186>
 8003ce4:	065f      	lsls	r7, r3, #25
 8003ce6:	bf48      	it	mi
 8003ce8:	b2ad      	uxthmi	r5, r5
 8003cea:	6031      	str	r1, [r6, #0]
 8003cec:	07d9      	lsls	r1, r3, #31
 8003cee:	bf44      	itt	mi
 8003cf0:	f043 0320 	orrmi.w	r3, r3, #32
 8003cf4:	6023      	strmi	r3, [r4, #0]
 8003cf6:	b11d      	cbz	r5, 8003d00 <_printf_i+0x19c>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	e7ad      	b.n	8003c58 <_printf_i+0xf4>
 8003cfc:	4826      	ldr	r0, [pc, #152]	@ (8003d98 <_printf_i+0x234>)
 8003cfe:	e7e9      	b.n	8003cd4 <_printf_i+0x170>
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	f023 0320 	bic.w	r3, r3, #32
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	e7f6      	b.n	8003cf8 <_printf_i+0x194>
 8003d0a:	4616      	mov	r6, r2
 8003d0c:	e7bd      	b.n	8003c8a <_printf_i+0x126>
 8003d0e:	6833      	ldr	r3, [r6, #0]
 8003d10:	6825      	ldr	r5, [r4, #0]
 8003d12:	1d18      	adds	r0, r3, #4
 8003d14:	6961      	ldr	r1, [r4, #20]
 8003d16:	6030      	str	r0, [r6, #0]
 8003d18:	062e      	lsls	r6, r5, #24
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	d501      	bpl.n	8003d22 <_printf_i+0x1be>
 8003d1e:	6019      	str	r1, [r3, #0]
 8003d20:	e002      	b.n	8003d28 <_printf_i+0x1c4>
 8003d22:	0668      	lsls	r0, r5, #25
 8003d24:	d5fb      	bpl.n	8003d1e <_printf_i+0x1ba>
 8003d26:	8019      	strh	r1, [r3, #0]
 8003d28:	2300      	movs	r3, #0
 8003d2a:	4616      	mov	r6, r2
 8003d2c:	6123      	str	r3, [r4, #16]
 8003d2e:	e7bc      	b.n	8003caa <_printf_i+0x146>
 8003d30:	6833      	ldr	r3, [r6, #0]
 8003d32:	2100      	movs	r1, #0
 8003d34:	1d1a      	adds	r2, r3, #4
 8003d36:	6032      	str	r2, [r6, #0]
 8003d38:	681e      	ldr	r6, [r3, #0]
 8003d3a:	6862      	ldr	r2, [r4, #4]
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f000 f8ed 	bl	8003f1c <memchr>
 8003d42:	b108      	cbz	r0, 8003d48 <_printf_i+0x1e4>
 8003d44:	1b80      	subs	r0, r0, r6
 8003d46:	6060      	str	r0, [r4, #4]
 8003d48:	6863      	ldr	r3, [r4, #4]
 8003d4a:	6123      	str	r3, [r4, #16]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d52:	e7aa      	b.n	8003caa <_printf_i+0x146>
 8003d54:	4632      	mov	r2, r6
 8003d56:	4649      	mov	r1, r9
 8003d58:	4640      	mov	r0, r8
 8003d5a:	6923      	ldr	r3, [r4, #16]
 8003d5c:	47d0      	blx	sl
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d0ad      	beq.n	8003cbe <_printf_i+0x15a>
 8003d62:	6823      	ldr	r3, [r4, #0]
 8003d64:	079b      	lsls	r3, r3, #30
 8003d66:	d413      	bmi.n	8003d90 <_printf_i+0x22c>
 8003d68:	68e0      	ldr	r0, [r4, #12]
 8003d6a:	9b03      	ldr	r3, [sp, #12]
 8003d6c:	4298      	cmp	r0, r3
 8003d6e:	bfb8      	it	lt
 8003d70:	4618      	movlt	r0, r3
 8003d72:	e7a6      	b.n	8003cc2 <_printf_i+0x15e>
 8003d74:	2301      	movs	r3, #1
 8003d76:	4632      	mov	r2, r6
 8003d78:	4649      	mov	r1, r9
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	47d0      	blx	sl
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d09d      	beq.n	8003cbe <_printf_i+0x15a>
 8003d82:	3501      	adds	r5, #1
 8003d84:	68e3      	ldr	r3, [r4, #12]
 8003d86:	9903      	ldr	r1, [sp, #12]
 8003d88:	1a5b      	subs	r3, r3, r1
 8003d8a:	42ab      	cmp	r3, r5
 8003d8c:	dcf2      	bgt.n	8003d74 <_printf_i+0x210>
 8003d8e:	e7eb      	b.n	8003d68 <_printf_i+0x204>
 8003d90:	2500      	movs	r5, #0
 8003d92:	f104 0619 	add.w	r6, r4, #25
 8003d96:	e7f5      	b.n	8003d84 <_printf_i+0x220>
 8003d98:	0800454b 	.word	0x0800454b
 8003d9c:	0800455c 	.word	0x0800455c

08003da0 <__swbuf_r>:
 8003da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003da2:	460e      	mov	r6, r1
 8003da4:	4614      	mov	r4, r2
 8003da6:	4605      	mov	r5, r0
 8003da8:	b118      	cbz	r0, 8003db2 <__swbuf_r+0x12>
 8003daa:	6a03      	ldr	r3, [r0, #32]
 8003dac:	b90b      	cbnz	r3, 8003db2 <__swbuf_r+0x12>
 8003dae:	f7ff f99b 	bl	80030e8 <__sinit>
 8003db2:	69a3      	ldr	r3, [r4, #24]
 8003db4:	60a3      	str	r3, [r4, #8]
 8003db6:	89a3      	ldrh	r3, [r4, #12]
 8003db8:	071a      	lsls	r2, r3, #28
 8003dba:	d501      	bpl.n	8003dc0 <__swbuf_r+0x20>
 8003dbc:	6923      	ldr	r3, [r4, #16]
 8003dbe:	b943      	cbnz	r3, 8003dd2 <__swbuf_r+0x32>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f82a 	bl	8003e1c <__swsetup_r>
 8003dc8:	b118      	cbz	r0, 8003dd2 <__swbuf_r+0x32>
 8003dca:	f04f 37ff 	mov.w	r7, #4294967295
 8003dce:	4638      	mov	r0, r7
 8003dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	6922      	ldr	r2, [r4, #16]
 8003dd6:	b2f6      	uxtb	r6, r6
 8003dd8:	1a98      	subs	r0, r3, r2
 8003dda:	6963      	ldr	r3, [r4, #20]
 8003ddc:	4637      	mov	r7, r6
 8003dde:	4283      	cmp	r3, r0
 8003de0:	dc05      	bgt.n	8003dee <__swbuf_r+0x4e>
 8003de2:	4621      	mov	r1, r4
 8003de4:	4628      	mov	r0, r5
 8003de6:	f7ff f8b7 	bl	8002f58 <_fflush_r>
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d1ed      	bne.n	8003dca <__swbuf_r+0x2a>
 8003dee:	68a3      	ldr	r3, [r4, #8]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	60a3      	str	r3, [r4, #8]
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	6022      	str	r2, [r4, #0]
 8003dfa:	701e      	strb	r6, [r3, #0]
 8003dfc:	6962      	ldr	r2, [r4, #20]
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d004      	beq.n	8003e0e <__swbuf_r+0x6e>
 8003e04:	89a3      	ldrh	r3, [r4, #12]
 8003e06:	07db      	lsls	r3, r3, #31
 8003e08:	d5e1      	bpl.n	8003dce <__swbuf_r+0x2e>
 8003e0a:	2e0a      	cmp	r6, #10
 8003e0c:	d1df      	bne.n	8003dce <__swbuf_r+0x2e>
 8003e0e:	4621      	mov	r1, r4
 8003e10:	4628      	mov	r0, r5
 8003e12:	f7ff f8a1 	bl	8002f58 <_fflush_r>
 8003e16:	2800      	cmp	r0, #0
 8003e18:	d0d9      	beq.n	8003dce <__swbuf_r+0x2e>
 8003e1a:	e7d6      	b.n	8003dca <__swbuf_r+0x2a>

08003e1c <__swsetup_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4b29      	ldr	r3, [pc, #164]	@ (8003ec4 <__swsetup_r+0xa8>)
 8003e20:	4605      	mov	r5, r0
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	460c      	mov	r4, r1
 8003e26:	b118      	cbz	r0, 8003e30 <__swsetup_r+0x14>
 8003e28:	6a03      	ldr	r3, [r0, #32]
 8003e2a:	b90b      	cbnz	r3, 8003e30 <__swsetup_r+0x14>
 8003e2c:	f7ff f95c 	bl	80030e8 <__sinit>
 8003e30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e34:	0719      	lsls	r1, r3, #28
 8003e36:	d422      	bmi.n	8003e7e <__swsetup_r+0x62>
 8003e38:	06da      	lsls	r2, r3, #27
 8003e3a:	d407      	bmi.n	8003e4c <__swsetup_r+0x30>
 8003e3c:	2209      	movs	r2, #9
 8003e3e:	602a      	str	r2, [r5, #0]
 8003e40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295
 8003e48:	81a3      	strh	r3, [r4, #12]
 8003e4a:	e033      	b.n	8003eb4 <__swsetup_r+0x98>
 8003e4c:	0758      	lsls	r0, r3, #29
 8003e4e:	d512      	bpl.n	8003e76 <__swsetup_r+0x5a>
 8003e50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e52:	b141      	cbz	r1, 8003e66 <__swsetup_r+0x4a>
 8003e54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e58:	4299      	cmp	r1, r3
 8003e5a:	d002      	beq.n	8003e62 <__swsetup_r+0x46>
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f7ff fa81 	bl	8003364 <_free_r>
 8003e62:	2300      	movs	r3, #0
 8003e64:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003e6c:	81a3      	strh	r3, [r4, #12]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6063      	str	r3, [r4, #4]
 8003e72:	6923      	ldr	r3, [r4, #16]
 8003e74:	6023      	str	r3, [r4, #0]
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	f043 0308 	orr.w	r3, r3, #8
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	b94b      	cbnz	r3, 8003e96 <__swsetup_r+0x7a>
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003e88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e8c:	d003      	beq.n	8003e96 <__swsetup_r+0x7a>
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 f8b2 	bl	8003ffa <__smakebuf_r>
 8003e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e9a:	f013 0201 	ands.w	r2, r3, #1
 8003e9e:	d00a      	beq.n	8003eb6 <__swsetup_r+0x9a>
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	60a2      	str	r2, [r4, #8]
 8003ea4:	6962      	ldr	r2, [r4, #20]
 8003ea6:	4252      	negs	r2, r2
 8003ea8:	61a2      	str	r2, [r4, #24]
 8003eaa:	6922      	ldr	r2, [r4, #16]
 8003eac:	b942      	cbnz	r2, 8003ec0 <__swsetup_r+0xa4>
 8003eae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003eb2:	d1c5      	bne.n	8003e40 <__swsetup_r+0x24>
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
 8003eb6:	0799      	lsls	r1, r3, #30
 8003eb8:	bf58      	it	pl
 8003eba:	6962      	ldrpl	r2, [r4, #20]
 8003ebc:	60a2      	str	r2, [r4, #8]
 8003ebe:	e7f4      	b.n	8003eaa <__swsetup_r+0x8e>
 8003ec0:	2000      	movs	r0, #0
 8003ec2:	e7f7      	b.n	8003eb4 <__swsetup_r+0x98>
 8003ec4:	20000048 	.word	0x20000048

08003ec8 <memmove>:
 8003ec8:	4288      	cmp	r0, r1
 8003eca:	b510      	push	{r4, lr}
 8003ecc:	eb01 0402 	add.w	r4, r1, r2
 8003ed0:	d902      	bls.n	8003ed8 <memmove+0x10>
 8003ed2:	4284      	cmp	r4, r0
 8003ed4:	4623      	mov	r3, r4
 8003ed6:	d807      	bhi.n	8003ee8 <memmove+0x20>
 8003ed8:	1e43      	subs	r3, r0, #1
 8003eda:	42a1      	cmp	r1, r4
 8003edc:	d008      	beq.n	8003ef0 <memmove+0x28>
 8003ede:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ee2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ee6:	e7f8      	b.n	8003eda <memmove+0x12>
 8003ee8:	4601      	mov	r1, r0
 8003eea:	4402      	add	r2, r0
 8003eec:	428a      	cmp	r2, r1
 8003eee:	d100      	bne.n	8003ef2 <memmove+0x2a>
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ef6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003efa:	e7f7      	b.n	8003eec <memmove+0x24>

08003efc <_sbrk_r>:
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	2300      	movs	r3, #0
 8003f00:	4d05      	ldr	r5, [pc, #20]	@ (8003f18 <_sbrk_r+0x1c>)
 8003f02:	4604      	mov	r4, r0
 8003f04:	4608      	mov	r0, r1
 8003f06:	602b      	str	r3, [r5, #0]
 8003f08:	f7fc fabe 	bl	8000488 <_sbrk>
 8003f0c:	1c43      	adds	r3, r0, #1
 8003f0e:	d102      	bne.n	8003f16 <_sbrk_r+0x1a>
 8003f10:	682b      	ldr	r3, [r5, #0]
 8003f12:	b103      	cbz	r3, 8003f16 <_sbrk_r+0x1a>
 8003f14:	6023      	str	r3, [r4, #0]
 8003f16:	bd38      	pop	{r3, r4, r5, pc}
 8003f18:	2000038c 	.word	0x2000038c

08003f1c <memchr>:
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	b510      	push	{r4, lr}
 8003f20:	b2c9      	uxtb	r1, r1
 8003f22:	4402      	add	r2, r0
 8003f24:	4293      	cmp	r3, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	d101      	bne.n	8003f2e <memchr+0x12>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e003      	b.n	8003f36 <memchr+0x1a>
 8003f2e:	7804      	ldrb	r4, [r0, #0]
 8003f30:	3301      	adds	r3, #1
 8003f32:	428c      	cmp	r4, r1
 8003f34:	d1f6      	bne.n	8003f24 <memchr+0x8>
 8003f36:	bd10      	pop	{r4, pc}

08003f38 <memcpy>:
 8003f38:	440a      	add	r2, r1
 8003f3a:	4291      	cmp	r1, r2
 8003f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f40:	d100      	bne.n	8003f44 <memcpy+0xc>
 8003f42:	4770      	bx	lr
 8003f44:	b510      	push	{r4, lr}
 8003f46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f4a:	4291      	cmp	r1, r2
 8003f4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f50:	d1f9      	bne.n	8003f46 <memcpy+0xe>
 8003f52:	bd10      	pop	{r4, pc}

08003f54 <_realloc_r>:
 8003f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f58:	4607      	mov	r7, r0
 8003f5a:	4614      	mov	r4, r2
 8003f5c:	460d      	mov	r5, r1
 8003f5e:	b921      	cbnz	r1, 8003f6a <_realloc_r+0x16>
 8003f60:	4611      	mov	r1, r2
 8003f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f66:	f7ff ba67 	b.w	8003438 <_malloc_r>
 8003f6a:	b92a      	cbnz	r2, 8003f78 <_realloc_r+0x24>
 8003f6c:	f7ff f9fa 	bl	8003364 <_free_r>
 8003f70:	4625      	mov	r5, r4
 8003f72:	4628      	mov	r0, r5
 8003f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f78:	f000 f89e 	bl	80040b8 <_malloc_usable_size_r>
 8003f7c:	4284      	cmp	r4, r0
 8003f7e:	4606      	mov	r6, r0
 8003f80:	d802      	bhi.n	8003f88 <_realloc_r+0x34>
 8003f82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f86:	d8f4      	bhi.n	8003f72 <_realloc_r+0x1e>
 8003f88:	4621      	mov	r1, r4
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	f7ff fa54 	bl	8003438 <_malloc_r>
 8003f90:	4680      	mov	r8, r0
 8003f92:	b908      	cbnz	r0, 8003f98 <_realloc_r+0x44>
 8003f94:	4645      	mov	r5, r8
 8003f96:	e7ec      	b.n	8003f72 <_realloc_r+0x1e>
 8003f98:	42b4      	cmp	r4, r6
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	bf28      	it	cs
 8003fa0:	4632      	movcs	r2, r6
 8003fa2:	f7ff ffc9 	bl	8003f38 <memcpy>
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4638      	mov	r0, r7
 8003faa:	f7ff f9db 	bl	8003364 <_free_r>
 8003fae:	e7f1      	b.n	8003f94 <_realloc_r+0x40>

08003fb0 <__swhatbuf_r>:
 8003fb0:	b570      	push	{r4, r5, r6, lr}
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fb8:	4615      	mov	r5, r2
 8003fba:	2900      	cmp	r1, #0
 8003fbc:	461e      	mov	r6, r3
 8003fbe:	b096      	sub	sp, #88	@ 0x58
 8003fc0:	da0c      	bge.n	8003fdc <__swhatbuf_r+0x2c>
 8003fc2:	89a3      	ldrh	r3, [r4, #12]
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fca:	bf14      	ite	ne
 8003fcc:	2340      	movne	r3, #64	@ 0x40
 8003fce:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fd2:	2000      	movs	r0, #0
 8003fd4:	6031      	str	r1, [r6, #0]
 8003fd6:	602b      	str	r3, [r5, #0]
 8003fd8:	b016      	add	sp, #88	@ 0x58
 8003fda:	bd70      	pop	{r4, r5, r6, pc}
 8003fdc:	466a      	mov	r2, sp
 8003fde:	f000 f849 	bl	8004074 <_fstat_r>
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	dbed      	blt.n	8003fc2 <__swhatbuf_r+0x12>
 8003fe6:	9901      	ldr	r1, [sp, #4]
 8003fe8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003fec:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ff0:	4259      	negs	r1, r3
 8003ff2:	4159      	adcs	r1, r3
 8003ff4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ff8:	e7eb      	b.n	8003fd2 <__swhatbuf_r+0x22>

08003ffa <__smakebuf_r>:
 8003ffa:	898b      	ldrh	r3, [r1, #12]
 8003ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ffe:	079d      	lsls	r5, r3, #30
 8004000:	4606      	mov	r6, r0
 8004002:	460c      	mov	r4, r1
 8004004:	d507      	bpl.n	8004016 <__smakebuf_r+0x1c>
 8004006:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800400a:	6023      	str	r3, [r4, #0]
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	2301      	movs	r3, #1
 8004010:	6163      	str	r3, [r4, #20]
 8004012:	b003      	add	sp, #12
 8004014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004016:	466a      	mov	r2, sp
 8004018:	ab01      	add	r3, sp, #4
 800401a:	f7ff ffc9 	bl	8003fb0 <__swhatbuf_r>
 800401e:	9f00      	ldr	r7, [sp, #0]
 8004020:	4605      	mov	r5, r0
 8004022:	4639      	mov	r1, r7
 8004024:	4630      	mov	r0, r6
 8004026:	f7ff fa07 	bl	8003438 <_malloc_r>
 800402a:	b948      	cbnz	r0, 8004040 <__smakebuf_r+0x46>
 800402c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004030:	059a      	lsls	r2, r3, #22
 8004032:	d4ee      	bmi.n	8004012 <__smakebuf_r+0x18>
 8004034:	f023 0303 	bic.w	r3, r3, #3
 8004038:	f043 0302 	orr.w	r3, r3, #2
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	e7e2      	b.n	8004006 <__smakebuf_r+0xc>
 8004040:	89a3      	ldrh	r3, [r4, #12]
 8004042:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800404a:	81a3      	strh	r3, [r4, #12]
 800404c:	9b01      	ldr	r3, [sp, #4]
 800404e:	6020      	str	r0, [r4, #0]
 8004050:	b15b      	cbz	r3, 800406a <__smakebuf_r+0x70>
 8004052:	4630      	mov	r0, r6
 8004054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004058:	f000 f81e 	bl	8004098 <_isatty_r>
 800405c:	b128      	cbz	r0, 800406a <__smakebuf_r+0x70>
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	f023 0303 	bic.w	r3, r3, #3
 8004064:	f043 0301 	orr.w	r3, r3, #1
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	431d      	orrs	r5, r3
 800406e:	81a5      	strh	r5, [r4, #12]
 8004070:	e7cf      	b.n	8004012 <__smakebuf_r+0x18>
	...

08004074 <_fstat_r>:
 8004074:	b538      	push	{r3, r4, r5, lr}
 8004076:	2300      	movs	r3, #0
 8004078:	4d06      	ldr	r5, [pc, #24]	@ (8004094 <_fstat_r+0x20>)
 800407a:	4604      	mov	r4, r0
 800407c:	4608      	mov	r0, r1
 800407e:	4611      	mov	r1, r2
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	f7fe fd66 	bl	8002b52 <_fstat>
 8004086:	1c43      	adds	r3, r0, #1
 8004088:	d102      	bne.n	8004090 <_fstat_r+0x1c>
 800408a:	682b      	ldr	r3, [r5, #0]
 800408c:	b103      	cbz	r3, 8004090 <_fstat_r+0x1c>
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	bd38      	pop	{r3, r4, r5, pc}
 8004092:	bf00      	nop
 8004094:	2000038c 	.word	0x2000038c

08004098 <_isatty_r>:
 8004098:	b538      	push	{r3, r4, r5, lr}
 800409a:	2300      	movs	r3, #0
 800409c:	4d05      	ldr	r5, [pc, #20]	@ (80040b4 <_isatty_r+0x1c>)
 800409e:	4604      	mov	r4, r0
 80040a0:	4608      	mov	r0, r1
 80040a2:	602b      	str	r3, [r5, #0]
 80040a4:	f7fe feba 	bl	8002e1c <_isatty>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_isatty_r+0x1a>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_isatty_r+0x1a>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	2000038c 	.word	0x2000038c

080040b8 <_malloc_usable_size_r>:
 80040b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040bc:	1f18      	subs	r0, r3, #4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bfbc      	itt	lt
 80040c2:	580b      	ldrlt	r3, [r1, r0]
 80040c4:	18c0      	addlt	r0, r0, r3
 80040c6:	4770      	bx	lr

080040c8 <_init>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr

080040d4 <_fini>:
 80040d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d6:	bf00      	nop
 80040d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040da:	bc08      	pop	{r3}
 80040dc:	469e      	mov	lr, r3
 80040de:	4770      	bx	lr
